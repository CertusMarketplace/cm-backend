This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.gitattributes
.github/ISSUE_TEMPLATE/bug-report.yml
.github/ISSUE_TEMPLATE/feature_request.yml
.gitignore
.mvn/wrapper/maven-wrapper.properties
auth-module/.gitattributes
auth-module/.gitignore
auth-module/.mvn/wrapper/maven-wrapper.properties
auth-module/mvnw
auth-module/mvnw.cmd
auth-module/pom.xml
auth-module/src/main/java/pe/edu/certus/authmodule/AuthModuleApplication.java
auth-module/src/main/java/pe/edu/certus/authmodule/configuration/annotations/AuthComponentScanConfig.java
auth-module/src/main/java/pe/edu/certus/authmodule/configuration/annotations/AuthEntityScanConfig.java
auth-module/src/main/java/pe/edu/certus/authmodule/configuration/annotations/AuthPersistenceConfig.java
auth-module/src/main/java/pe/edu/certus/authmodule/configuration/policy/CorsConfig.java
auth-module/src/main/java/pe/edu/certus/authmodule/configuration/policy/JwtAuthorizationFilterConfig.java
auth-module/src/main/java/pe/edu/certus/authmodule/configuration/policy/SecurityConfig.java
auth-module/src/main/java/pe/edu/certus/authmodule/jwt/ports/ForJwt.java
auth-module/src/main/java/pe/edu/certus/authmodule/logic/adapters/driven/AuthManager.java
auth-module/src/main/java/pe/edu/certus/authmodule/logic/adapters/driven/GoogleAuthManager.java
auth-module/src/main/java/pe/edu/certus/authmodule/logic/adapters/driver/AuthAdapter.java
auth-module/src/main/java/pe/edu/certus/authmodule/logic/adapters/driver/ResponseWebModel.java
auth-module/src/main/java/pe/edu/certus/authmodule/logic/model/GoogleLoginModel.java
auth-module/src/main/java/pe/edu/certus/authmodule/logic/model/LoginModel.java
auth-module/src/main/java/pe/edu/certus/authmodule/logic/ports/driven/ForVerifyingGoogleToken.java
auth-module/src/main/java/pe/edu/certus/authmodule/logic/ports/driver/ForAuth.java
auth-module/src/main/java/pe/edu/certus/authmodule/logic/ports/driver/ForGoogleAuth.java
auth-module/src/main/java/pe/edu/certus/authmodule/repository/adapters/driver/GoogleTokenVerifierProxy.java
auth-module/src/main/java/pe/edu/certus/authmodule/repository/entity/AuthEntity.java
auth-module/src/main/java/pe/edu/certus/authmodule/repository/ports/driver/ForQueryingAuth.java
auth-module/src/main/resources/jwt-keys/public-key.pem
bootloader/.gitattributes
bootloader/.gitignore
bootloader/.mvn/wrapper/maven-wrapper.properties
bootloader/mvnw
bootloader/mvnw.cmd
bootloader/pom.xml
bootloader/src/main/java/pe/edu/certus/bootloader/BootloaderApplication.java
bootloader/src/main/java/pe/edu/certus/bootloader/config/BootComponentScan.java
bootloader/src/main/java/pe/edu/certus/bootloader/Main.java
bootloader/src/main/resources/application.properties
bootloader/src/main/resources/banner.txt
bootloader/src/main/resources/database-mysql.properties
bootloader/src/main/resources/database/data.sql
bootloader/src/main/resources/database/schema.sql
LICENSE
mvnw
mvnw.cmd
paypal-module/.gitattributes
paypal-module/.gitignore
paypal-module/.mvn/wrapper/maven-wrapper.properties
paypal-module/mvnw
paypal-module/mvnw.cmd
paypal-module/pom.xml
paypal-module/src/main/java/pe/edu/certus/paypalmodule/configuration/annotations/PaypalComponentScanConfig.java
paypal-module/src/main/java/pe/edu/certus/paypalmodule/configuration/annotations/PaypalEntityScanConfig.java
paypal-module/src/main/java/pe/edu/certus/paypalmodule/configuration/annotations/PaypalPersistenceConfig.java
paypal-module/src/main/java/pe/edu/certus/paypalmodule/configuration/sdk/PaypalConfig.java
paypal-module/src/main/java/pe/edu/certus/paypalmodule/logic/adapters/driven/PaypalManager.java
paypal-module/src/main/java/pe/edu/certus/paypalmodule/logic/adapters/driver/PaypalAdapter.java
paypal-module/src/main/java/pe/edu/certus/paypalmodule/logic/model/CreateOrderResponseModel.java
paypal-module/src/main/java/pe/edu/certus/paypalmodule/logic/model/PaymentDetailModel.java
paypal-module/src/main/java/pe/edu/certus/paypalmodule/logic/ports/driven/ForManagingPaypal.java
paypal-module/src/main/java/pe/edu/certus/paypalmodule/logic/ports/driven/ForPersistingPaypalPayment.java
paypal-module/src/main/java/pe/edu/certus/paypalmodule/logic/ports/driver/ForGettingWorkPrice.java
paypal-module/src/main/java/pe/edu/certus/paypalmodule/logic/ports/driver/ForPaypal.java
paypal-module/src/main/java/pe/edu/certus/paypalmodule/PaypalModuleApplication.java
paypal-module/src/main/java/pe/edu/certus/paypalmodule/repository/adapters/driver/PaypalPersistenceProxy.java
paypal-module/src/main/java/pe/edu/certus/paypalmodule/repository/adapters/driver/PaypalServiceProxy.java
paypal-module/src/main/java/pe/edu/certus/paypalmodule/repository/adapters/driver/WorkPriceManager.java
paypal-module/src/main/java/pe/edu/certus/paypalmodule/repository/adapters/mapper/PaypalPersistenceMapper.java
paypal-module/src/main/java/pe/edu/certus/paypalmodule/repository/entity/OrderEntity.java
paypal-module/src/main/java/pe/edu/certus/paypalmodule/repository/entity/PaypalPaymentEntity.java
paypal-module/src/main/java/pe/edu/certus/paypalmodule/repository/entity/WorkPriceEntity.java
paypal-module/src/main/java/pe/edu/certus/paypalmodule/repository/ports/driver/ForQueryingOrders.java
paypal-module/src/main/java/pe/edu/certus/paypalmodule/repository/ports/driver/ForQueryingPaypalPayments.java
paypal-module/src/main/java/pe/edu/certus/paypalmodule/repository/ports/driver/ForQueryingWorkInPaypal.java
paypal-module/src/main/java/pe/edu/certus/paypalmodule/repository/ports/mapper/ForBridgingPaypalPayment.java
people-module/.gitattributes
people-module/.gitignore
people-module/.mvn/wrapper/maven-wrapper.properties
people-module/mvnw
people-module/mvnw.cmd
people-module/pom.xml
people-module/src/main/java/pe/edu/certus/peoplemodule/configuration/annotations/PeopleComponentScanConfig.java
people-module/src/main/java/pe/edu/certus/peoplemodule/configuration/annotations/PeopleEntityScanConfig.java
people-module/src/main/java/pe/edu/certus/peoplemodule/configuration/annotations/PeoplePersistenceConfig.java
people-module/src/main/java/pe/edu/certus/peoplemodule/configuration/mappers/PeopleMapperConfig.java
people-module/src/main/java/pe/edu/certus/peoplemodule/configuration/mappers/PeopleMapperPersistenceConfig.java
people-module/src/main/java/pe/edu/certus/peoplemodule/logic/adapters/driven/PeopleManager.java
people-module/src/main/java/pe/edu/certus/peoplemodule/logic/adapters/driver/PeopleAdapter.java
people-module/src/main/java/pe/edu/certus/peoplemodule/logic/adapters/driver/PeopleWebModel.java
people-module/src/main/java/pe/edu/certus/peoplemodule/logic/adapters/mapper/PeopleMapper.java
people-module/src/main/java/pe/edu/certus/peoplemodule/logic/model/PeopleModel.java
people-module/src/main/java/pe/edu/certus/peoplemodule/logic/ports/driven/ForManagingPeople.java
people-module/src/main/java/pe/edu/certus/peoplemodule/logic/ports/driver/ForPeople.java
people-module/src/main/java/pe/edu/certus/peoplemodule/logic/ports/mapper/ForMappingPeople.java
people-module/src/main/java/pe/edu/certus/peoplemodule/PeopleModuleApplication.java
people-module/src/main/java/pe/edu/certus/peoplemodule/repository/adapters/driver/PeopleQuerierProxy.java
people-module/src/main/java/pe/edu/certus/peoplemodule/repository/adapters/mapper/PeoplePersistenceMapper.java
people-module/src/main/java/pe/edu/certus/peoplemodule/repository/entity/PeopleEntity.java
people-module/src/main/java/pe/edu/certus/peoplemodule/repository/ports/driver/ForQueryingPeople.java
people-module/src/main/java/pe/edu/certus/peoplemodule/repository/ports/mapper/ForBridgingPeople.java
people-module/src/main/resources/application.properties
pom.xml
ratings-module/.gitattributes
ratings-module/.gitignore
ratings-module/.mvn/wrapper/maven-wrapper.properties
ratings-module/mvnw
ratings-module/mvnw.cmd
ratings-module/pom.xml
ratings-module/src/main/java/pe/edu/certus/ratingsmodule/configuration/annotations/RatingComponentScanConfig.java
ratings-module/src/main/java/pe/edu/certus/ratingsmodule/configuration/annotations/RatingEntityScanConfig.java
ratings-module/src/main/java/pe/edu/certus/ratingsmodule/configuration/annotations/RatingPersistenceConfig.java
ratings-module/src/main/java/pe/edu/certus/ratingsmodule/configuration/mappers/RatingMapperConfig.java
ratings-module/src/main/java/pe/edu/certus/ratingsmodule/configuration/mappers/RatingMapperPersistenceConfig.java
ratings-module/src/main/java/pe/edu/certus/ratingsmodule/logic/adapters/driven/RatingManager.java
ratings-module/src/main/java/pe/edu/certus/ratingsmodule/logic/adapters/driver/RatingAdapter.java
ratings-module/src/main/java/pe/edu/certus/ratingsmodule/logic/adapters/driver/RatingWebModel.java
ratings-module/src/main/java/pe/edu/certus/ratingsmodule/logic/adapters/mapper/RatingMapper.java
ratings-module/src/main/java/pe/edu/certus/ratingsmodule/logic/model/RatingModel.java
ratings-module/src/main/java/pe/edu/certus/ratingsmodule/logic/ports/driven/ForManagingRating.java
ratings-module/src/main/java/pe/edu/certus/ratingsmodule/logic/ports/driver/ForRating.java
ratings-module/src/main/java/pe/edu/certus/ratingsmodule/logic/ports/mapper/ForMappingRating.java
ratings-module/src/main/java/pe/edu/certus/ratingsmodule/RatingsModuleApplication.java
ratings-module/src/main/java/pe/edu/certus/ratingsmodule/repository/adapters/driver/RatingQuerierProxy.java
ratings-module/src/main/java/pe/edu/certus/ratingsmodule/repository/adapters/mapper/RatingPersistenceMapper.java
ratings-module/src/main/java/pe/edu/certus/ratingsmodule/repository/entity/RatingEntity.java
ratings-module/src/main/java/pe/edu/certus/ratingsmodule/repository/ports/driver/ForQueryingRating.java
ratings-module/src/main/java/pe/edu/certus/ratingsmodule/repository/ports/mapper/ForBridgingRating.java
ratings-module/src/main/resources/application.properties
README.md
src/main/java/pe/edu/certus/CertUsBackendServiceApplication.java
src/main/resources/application.properties
users-module/.gitattributes
users-module/.gitignore
users-module/.mvn/wrapper/maven-wrapper.properties
users-module/mvnw
users-module/mvnw.cmd
users-module/pom.xml
users-module/src/main/java/pe/edu/certus/usersmodule/configuration/annotations/UserComponentScanConfig.java
users-module/src/main/java/pe/edu/certus/usersmodule/configuration/annotations/UserEntityScanConfig.java
users-module/src/main/java/pe/edu/certus/usersmodule/configuration/annotations/UserPersistenceConfig.java
users-module/src/main/java/pe/edu/certus/usersmodule/configuration/mappers/UserMapperConfig.java
users-module/src/main/java/pe/edu/certus/usersmodule/configuration/mappers/UserMapperPersistenceConfig.java
users-module/src/main/java/pe/edu/certus/usersmodule/logic/adapters/driven/UserManager.java
users-module/src/main/java/pe/edu/certus/usersmodule/logic/adapters/driver/UserAdapter.java
users-module/src/main/java/pe/edu/certus/usersmodule/logic/adapters/driver/UserWebModel.java
users-module/src/main/java/pe/edu/certus/usersmodule/logic/adapters/mapper/UserMapper.java
users-module/src/main/java/pe/edu/certus/usersmodule/logic/model/UserModel.java
users-module/src/main/java/pe/edu/certus/usersmodule/logic/ports/driven/ForManagingUser.java
users-module/src/main/java/pe/edu/certus/usersmodule/logic/ports/driver/ForUser.java
users-module/src/main/java/pe/edu/certus/usersmodule/logic/ports/mapper/ForMappingUser.java
users-module/src/main/java/pe/edu/certus/usersmodule/repository/adapters/driver/UserQuerierProxy.java
users-module/src/main/java/pe/edu/certus/usersmodule/repository/adapters/mapper/UserPersistenceMapper.java
users-module/src/main/java/pe/edu/certus/usersmodule/repository/entity/UserEntity.java
users-module/src/main/java/pe/edu/certus/usersmodule/repository/ports/driver/ForQueryingUser.java
users-module/src/main/java/pe/edu/certus/usersmodule/repository/ports/mapper/ForBridgingUser.java
users-module/src/main/java/pe/edu/certus/usersmodule/UsersModuleApplication.java
users-module/src/main/resources/application.properties
works-module/.gitattributes
works-module/.gitignore
works-module/.mvn/wrapper/maven-wrapper.properties
works-module/mvnw
works-module/mvnw.cmd
works-module/pom.xml
works-module/src/main/java/pe/edu/certus/worksmodule/configuration/annotations/WorkComponentScanConfig.java
works-module/src/main/java/pe/edu/certus/worksmodule/configuration/annotations/WorkEntityScanConfig.java
works-module/src/main/java/pe/edu/certus/worksmodule/configuration/annotations/WorkPersistenceConfig.java
works-module/src/main/java/pe/edu/certus/worksmodule/configuration/mappers/WorkMapperConfig.java
works-module/src/main/java/pe/edu/certus/worksmodule/configuration/mappers/WorkMapperPersistenceConfig.java
works-module/src/main/java/pe/edu/certus/worksmodule/logic/adapters/driven/WorkManager.java
works-module/src/main/java/pe/edu/certus/worksmodule/logic/adapters/driver/WorkAdapter.java
works-module/src/main/java/pe/edu/certus/worksmodule/logic/adapters/driver/WorkWebModel.java
works-module/src/main/java/pe/edu/certus/worksmodule/logic/adapters/mapper/WorkMapper.java
works-module/src/main/java/pe/edu/certus/worksmodule/logic/model/WorkModel.java
works-module/src/main/java/pe/edu/certus/worksmodule/logic/ports/driven/ForManagingWork.java
works-module/src/main/java/pe/edu/certus/worksmodule/logic/ports/driver/ForWork.java
works-module/src/main/java/pe/edu/certus/worksmodule/logic/ports/mapper/ForMappingWork.java
works-module/src/main/java/pe/edu/certus/worksmodule/repository/adapters/driver/WorkQuerierProxy.java
works-module/src/main/java/pe/edu/certus/worksmodule/repository/adapters/mapper/WorkPersistenceMapper.java
works-module/src/main/java/pe/edu/certus/worksmodule/repository/entity/WorkEntity.java
works-module/src/main/java/pe/edu/certus/worksmodule/repository/ports/driver/ForQueryingWork.java
works-module/src/main/java/pe/edu/certus/worksmodule/repository/ports/mapper/ForBridgingWork.java
works-module/src/main/java/pe/edu/certus/worksmodule/WorksModuleApplication.java
works-module/src/main/resources/application.properties
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="auth-module/.gitattributes">
/mvnw text eol=lf
*.cmd text eol=crlf
</file>

<file path="auth-module/.gitignore">
HELP.md
target/
.mvn/wrapper/maven-wrapper.jar
!**/src/main/**/target/
!**/src/test/**/target/

### STS ###
.apt_generated
.classpath
.factorypath
.project
.settings
.springBeans
.sts4-cache

### IntelliJ IDEA ###
.idea
*.iws
*.iml
*.ipr

### NetBeans ###
/nbproject/private/
/nbbuild/
/dist/
/nbdist/
/.nb-gradle/
build/
!**/src/main/**/build/
!**/src/test/**/build/

### VS Code ###
.vscode/
</file>

<file path="auth-module/.mvn/wrapper/maven-wrapper.properties">
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
wrapperVersion=3.3.2
distributionType=only-script
distributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.9.10/apache-maven-3.9.10-bin.zip
</file>

<file path="auth-module/mvnw">
#!/bin/sh
# ----------------------------------------------------------------------------
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
# ----------------------------------------------------------------------------

# ----------------------------------------------------------------------------
# Apache Maven Wrapper startup batch script, version 3.3.2
#
# Optional ENV vars
# -----------------
#   JAVA_HOME - location of a JDK home dir, required when download maven via java source
#   MVNW_REPOURL - repo url base for downloading maven distribution
#   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
#   MVNW_VERBOSE - true: enable verbose log; debug: trace the mvnw script; others: silence the output
# ----------------------------------------------------------------------------

set -euf
[ "${MVNW_VERBOSE-}" != debug ] || set -x

# OS specific support.
native_path() { printf %s\\n "$1"; }
case "$(uname)" in
CYGWIN* | MINGW*)
  [ -z "${JAVA_HOME-}" ] || JAVA_HOME="$(cygpath --unix "$JAVA_HOME")"
  native_path() { cygpath --path --windows "$1"; }
  ;;
esac

# set JAVACMD and JAVACCMD
set_java_home() {
  # For Cygwin and MinGW, ensure paths are in Unix format before anything is touched
  if [ -n "${JAVA_HOME-}" ]; then
    if [ -x "$JAVA_HOME/jre/sh/java" ]; then
      # IBM's JDK on AIX uses strange locations for the executables
      JAVACMD="$JAVA_HOME/jre/sh/java"
      JAVACCMD="$JAVA_HOME/jre/sh/javac"
    else
      JAVACMD="$JAVA_HOME/bin/java"
      JAVACCMD="$JAVA_HOME/bin/javac"

      if [ ! -x "$JAVACMD" ] || [ ! -x "$JAVACCMD" ]; then
        echo "The JAVA_HOME environment variable is not defined correctly, so mvnw cannot run." >&2
        echo "JAVA_HOME is set to \"$JAVA_HOME\", but \"\$JAVA_HOME/bin/java\" or \"\$JAVA_HOME/bin/javac\" does not exist." >&2
        return 1
      fi
    fi
  else
    JAVACMD="$(
      'set' +e
      'unset' -f command 2>/dev/null
      'command' -v java
    )" || :
    JAVACCMD="$(
      'set' +e
      'unset' -f command 2>/dev/null
      'command' -v javac
    )" || :

    if [ ! -x "${JAVACMD-}" ] || [ ! -x "${JAVACCMD-}" ]; then
      echo "The java/javac command does not exist in PATH nor is JAVA_HOME set, so mvnw cannot run." >&2
      return 1
    fi
  fi
}

# hash string like Java String::hashCode
hash_string() {
  str="${1:-}" h=0
  while [ -n "$str" ]; do
    char="${str%"${str#?}"}"
    h=$(((h * 31 + $(LC_CTYPE=C printf %d "'$char")) % 4294967296))
    str="${str#?}"
  done
  printf %x\\n $h
}

verbose() { :; }
[ "${MVNW_VERBOSE-}" != true ] || verbose() { printf %s\\n "${1-}"; }

die() {
  printf %s\\n "$1" >&2
  exit 1
}

trim() {
  # MWRAPPER-139:
  #   Trims trailing and leading whitespace, carriage returns, tabs, and linefeeds.
  #   Needed for removing poorly interpreted newline sequences when running in more
  #   exotic environments such as mingw bash on Windows.
  printf "%s" "${1}" | tr -d '[:space:]'
}

# parse distributionUrl and optional distributionSha256Sum, requires .mvn/wrapper/maven-wrapper.properties
while IFS="=" read -r key value; do
  case "${key-}" in
  distributionUrl) distributionUrl=$(trim "${value-}") ;;
  distributionSha256Sum) distributionSha256Sum=$(trim "${value-}") ;;
  esac
done <"${0%/*}/.mvn/wrapper/maven-wrapper.properties"
[ -n "${distributionUrl-}" ] || die "cannot read distributionUrl property in ${0%/*}/.mvn/wrapper/maven-wrapper.properties"

case "${distributionUrl##*/}" in
maven-mvnd-*bin.*)
  MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/
  case "${PROCESSOR_ARCHITECTURE-}${PROCESSOR_ARCHITEW6432-}:$(uname -a)" in
  *AMD64:CYGWIN* | *AMD64:MINGW*) distributionPlatform=windows-amd64 ;;
  :Darwin*x86_64) distributionPlatform=darwin-amd64 ;;
  :Darwin*arm64) distributionPlatform=darwin-aarch64 ;;
  :Linux*x86_64*) distributionPlatform=linux-amd64 ;;
  *)
    echo "Cannot detect native platform for mvnd on $(uname)-$(uname -m), use pure java version" >&2
    distributionPlatform=linux-amd64
    ;;
  esac
  distributionUrl="${distributionUrl%-bin.*}-$distributionPlatform.zip"
  ;;
maven-mvnd-*) MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/ ;;
*) MVN_CMD="mvn${0##*/mvnw}" _MVNW_REPO_PATTERN=/org/apache/maven/ ;;
esac

# apply MVNW_REPOURL and calculate MAVEN_HOME
# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
[ -z "${MVNW_REPOURL-}" ] || distributionUrl="$MVNW_REPOURL$_MVNW_REPO_PATTERN${distributionUrl#*"$_MVNW_REPO_PATTERN"}"
distributionUrlName="${distributionUrl##*/}"
distributionUrlNameMain="${distributionUrlName%.*}"
distributionUrlNameMain="${distributionUrlNameMain%-bin}"
MAVEN_USER_HOME="${MAVEN_USER_HOME:-${HOME}/.m2}"
MAVEN_HOME="${MAVEN_USER_HOME}/wrapper/dists/${distributionUrlNameMain-}/$(hash_string "$distributionUrl")"

exec_maven() {
  unset MVNW_VERBOSE MVNW_USERNAME MVNW_PASSWORD MVNW_REPOURL || :
  exec "$MAVEN_HOME/bin/$MVN_CMD" "$@" || die "cannot exec $MAVEN_HOME/bin/$MVN_CMD"
}

if [ -d "$MAVEN_HOME" ]; then
  verbose "found existing MAVEN_HOME at $MAVEN_HOME"
  exec_maven "$@"
fi

case "${distributionUrl-}" in
*?-bin.zip | *?maven-mvnd-?*-?*.zip) ;;
*) die "distributionUrl is not valid, must match *-bin.zip or maven-mvnd-*.zip, but found '${distributionUrl-}'" ;;
esac

# prepare tmp dir
if TMP_DOWNLOAD_DIR="$(mktemp -d)" && [ -d "$TMP_DOWNLOAD_DIR" ]; then
  clean() { rm -rf -- "$TMP_DOWNLOAD_DIR"; }
  trap clean HUP INT TERM EXIT
else
  die "cannot create temp dir"
fi

mkdir -p -- "${MAVEN_HOME%/*}"

# Download and Install Apache Maven
verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."
verbose "Downloading from: $distributionUrl"
verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"

# select .zip or .tar.gz
if ! command -v unzip >/dev/null; then
  distributionUrl="${distributionUrl%.zip}.tar.gz"
  distributionUrlName="${distributionUrl##*/}"
fi

# verbose opt
__MVNW_QUIET_WGET=--quiet __MVNW_QUIET_CURL=--silent __MVNW_QUIET_UNZIP=-q __MVNW_QUIET_TAR=''
[ "${MVNW_VERBOSE-}" != true ] || __MVNW_QUIET_WGET='' __MVNW_QUIET_CURL='' __MVNW_QUIET_UNZIP='' __MVNW_QUIET_TAR=v

# normalize http auth
case "${MVNW_PASSWORD:+has-password}" in
'') MVNW_USERNAME='' MVNW_PASSWORD='' ;;
has-password) [ -n "${MVNW_USERNAME-}" ] || MVNW_USERNAME='' MVNW_PASSWORD='' ;;
esac

if [ -z "${MVNW_USERNAME-}" ] && command -v wget >/dev/null; then
  verbose "Found wget ... using wget"
  wget ${__MVNW_QUIET_WGET:+"$__MVNW_QUIET_WGET"} "$distributionUrl" -O "$TMP_DOWNLOAD_DIR/$distributionUrlName" || die "wget: Failed to fetch $distributionUrl"
elif [ -z "${MVNW_USERNAME-}" ] && command -v curl >/dev/null; then
  verbose "Found curl ... using curl"
  curl ${__MVNW_QUIET_CURL:+"$__MVNW_QUIET_CURL"} -f -L -o "$TMP_DOWNLOAD_DIR/$distributionUrlName" "$distributionUrl" || die "curl: Failed to fetch $distributionUrl"
elif set_java_home; then
  verbose "Falling back to use Java to download"
  javaSource="$TMP_DOWNLOAD_DIR/Downloader.java"
  targetZip="$TMP_DOWNLOAD_DIR/$distributionUrlName"
  cat >"$javaSource" <<-END
	public class Downloader extends java.net.Authenticator
	{
	  protected java.net.PasswordAuthentication getPasswordAuthentication()
	  {
	    return new java.net.PasswordAuthentication( System.getenv( "MVNW_USERNAME" ), System.getenv( "MVNW_PASSWORD" ).toCharArray() );
	  }
	  public static void main( String[] args ) throws Exception
	  {
	    setDefault( new Downloader() );
	    java.nio.file.Files.copy( java.net.URI.create( args[0] ).toURL().openStream(), java.nio.file.Paths.get( args[1] ).toAbsolutePath().normalize() );
	  }
	}
	END
  # For Cygwin/MinGW, switch paths to Windows format before running javac and java
  verbose " - Compiling Downloader.java ..."
  "$(native_path "$JAVACCMD")" "$(native_path "$javaSource")" || die "Failed to compile Downloader.java"
  verbose " - Running Downloader.java ..."
  "$(native_path "$JAVACMD")" -cp "$(native_path "$TMP_DOWNLOAD_DIR")" Downloader "$distributionUrl" "$(native_path "$targetZip")"
fi

# If specified, validate the SHA-256 sum of the Maven distribution zip file
if [ -n "${distributionSha256Sum-}" ]; then
  distributionSha256Result=false
  if [ "$MVN_CMD" = mvnd.sh ]; then
    echo "Checksum validation is not supported for maven-mvnd." >&2
    echo "Please disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2
    exit 1
  elif command -v sha256sum >/dev/null; then
    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | sha256sum -c >/dev/null 2>&1; then
      distributionSha256Result=true
    fi
  elif command -v shasum >/dev/null; then
    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | shasum -a 256 -c >/dev/null 2>&1; then
      distributionSha256Result=true
    fi
  else
    echo "Checksum validation was requested but neither 'sha256sum' or 'shasum' are available." >&2
    echo "Please install either command, or disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2
    exit 1
  fi
  if [ $distributionSha256Result = false ]; then
    echo "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised." >&2
    echo "If you updated your Maven version, you need to update the specified distributionSha256Sum property." >&2
    exit 1
  fi
fi

# unzip and move
if command -v unzip >/dev/null; then
  unzip ${__MVNW_QUIET_UNZIP:+"$__MVNW_QUIET_UNZIP"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -d "$TMP_DOWNLOAD_DIR" || die "failed to unzip"
else
  tar xzf${__MVNW_QUIET_TAR:+"$__MVNW_QUIET_TAR"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -C "$TMP_DOWNLOAD_DIR" || die "failed to untar"
fi
printf %s\\n "$distributionUrl" >"$TMP_DOWNLOAD_DIR/$distributionUrlNameMain/mvnw.url"
mv -- "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" "$MAVEN_HOME" || [ -d "$MAVEN_HOME" ] || die "fail to move MAVEN_HOME"

clean || :
exec_maven "$@"
</file>

<file path="auth-module/mvnw.cmd">
<# : batch portion
@REM ----------------------------------------------------------------------------
@REM Licensed to the Apache Software Foundation (ASF) under one
@REM or more contributor license agreements.  See the NOTICE file
@REM distributed with this work for additional information
@REM regarding copyright ownership.  The ASF licenses this file
@REM to you under the Apache License, Version 2.0 (the
@REM "License"); you may not use this file except in compliance
@REM with the License.  You may obtain a copy of the License at
@REM
@REM    http://www.apache.org/licenses/LICENSE-2.0
@REM
@REM Unless required by applicable law or agreed to in writing,
@REM software distributed under the License is distributed on an
@REM "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
@REM KIND, either express or implied.  See the License for the
@REM specific language governing permissions and limitations
@REM under the License.
@REM ----------------------------------------------------------------------------

@REM ----------------------------------------------------------------------------
@REM Apache Maven Wrapper startup batch script, version 3.3.2
@REM
@REM Optional ENV vars
@REM   MVNW_REPOURL - repo url base for downloading maven distribution
@REM   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
@REM   MVNW_VERBOSE - true: enable verbose log; others: silence the output
@REM ----------------------------------------------------------------------------

@IF "%__MVNW_ARG0_NAME__%"=="" (SET __MVNW_ARG0_NAME__=%~nx0)
@SET __MVNW_CMD__=
@SET __MVNW_ERROR__=
@SET __MVNW_PSMODULEP_SAVE=%PSModulePath%
@SET PSModulePath=
@FOR /F "usebackq tokens=1* delims==" %%A IN (`powershell -noprofile "& {$scriptDir='%~dp0'; $script='%__MVNW_ARG0_NAME__%'; icm -ScriptBlock ([Scriptblock]::Create((Get-Content -Raw '%~f0'))) -NoNewScope}"`) DO @(
  IF "%%A"=="MVN_CMD" (set __MVNW_CMD__=%%B) ELSE IF "%%B"=="" (echo %%A) ELSE (echo %%A=%%B)
)
@SET PSModulePath=%__MVNW_PSMODULEP_SAVE%
@SET __MVNW_PSMODULEP_SAVE=
@SET __MVNW_ARG0_NAME__=
@SET MVNW_USERNAME=
@SET MVNW_PASSWORD=
@IF NOT "%__MVNW_CMD__%"=="" (%__MVNW_CMD__% %*)
@echo Cannot start maven from wrapper >&2 && exit /b 1
@GOTO :EOF
: end batch / begin powershell #>

$ErrorActionPreference = "Stop"
if ($env:MVNW_VERBOSE -eq "true") {
  $VerbosePreference = "Continue"
}

# calculate distributionUrl, requires .mvn/wrapper/maven-wrapper.properties
$distributionUrl = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionUrl
if (!$distributionUrl) {
  Write-Error "cannot read distributionUrl property in $scriptDir/.mvn/wrapper/maven-wrapper.properties"
}

switch -wildcard -casesensitive ( $($distributionUrl -replace '^.*/','') ) {
  "maven-mvnd-*" {
    $USE_MVND = $true
    $distributionUrl = $distributionUrl -replace '-bin\.[^.]*$',"-windows-amd64.zip"
    $MVN_CMD = "mvnd.cmd"
    break
  }
  default {
    $USE_MVND = $false
    $MVN_CMD = $script -replace '^mvnw','mvn'
    break
  }
}

# apply MVNW_REPOURL and calculate MAVEN_HOME
# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
if ($env:MVNW_REPOURL) {
  $MVNW_REPO_PATTERN = if ($USE_MVND) { "/org/apache/maven/" } else { "/maven/mvnd/" }
  $distributionUrl = "$env:MVNW_REPOURL$MVNW_REPO_PATTERN$($distributionUrl -replace '^.*'+$MVNW_REPO_PATTERN,'')"
}
$distributionUrlName = $distributionUrl -replace '^.*/',''
$distributionUrlNameMain = $distributionUrlName -replace '\.[^.]*$','' -replace '-bin$',''
$MAVEN_HOME_PARENT = "$HOME/.m2/wrapper/dists/$distributionUrlNameMain"
if ($env:MAVEN_USER_HOME) {
  $MAVEN_HOME_PARENT = "$env:MAVEN_USER_HOME/wrapper/dists/$distributionUrlNameMain"
}
$MAVEN_HOME_NAME = ([System.Security.Cryptography.MD5]::Create().ComputeHash([byte[]][char[]]$distributionUrl) | ForEach-Object {$_.ToString("x2")}) -join ''
$MAVEN_HOME = "$MAVEN_HOME_PARENT/$MAVEN_HOME_NAME"

if (Test-Path -Path "$MAVEN_HOME" -PathType Container) {
  Write-Verbose "found existing MAVEN_HOME at $MAVEN_HOME"
  Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"
  exit $?
}

if (! $distributionUrlNameMain -or ($distributionUrlName -eq $distributionUrlNameMain)) {
  Write-Error "distributionUrl is not valid, must end with *-bin.zip, but found $distributionUrl"
}

# prepare tmp dir
$TMP_DOWNLOAD_DIR_HOLDER = New-TemporaryFile
$TMP_DOWNLOAD_DIR = New-Item -Itemtype Directory -Path "$TMP_DOWNLOAD_DIR_HOLDER.dir"
$TMP_DOWNLOAD_DIR_HOLDER.Delete() | Out-Null
trap {
  if ($TMP_DOWNLOAD_DIR.Exists) {
    try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
    catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }
  }
}

New-Item -Itemtype Directory -Path "$MAVEN_HOME_PARENT" -Force | Out-Null

# Download and Install Apache Maven
Write-Verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."
Write-Verbose "Downloading from: $distributionUrl"
Write-Verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"

$webclient = New-Object System.Net.WebClient
if ($env:MVNW_USERNAME -and $env:MVNW_PASSWORD) {
  $webclient.Credentials = New-Object System.Net.NetworkCredential($env:MVNW_USERNAME, $env:MVNW_PASSWORD)
}
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
$webclient.DownloadFile($distributionUrl, "$TMP_DOWNLOAD_DIR/$distributionUrlName") | Out-Null

# If specified, validate the SHA-256 sum of the Maven distribution zip file
$distributionSha256Sum = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionSha256Sum
if ($distributionSha256Sum) {
  if ($USE_MVND) {
    Write-Error "Checksum validation is not supported for maven-mvnd. `nPlease disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties."
  }
  Import-Module $PSHOME\Modules\Microsoft.PowerShell.Utility -Function Get-FileHash
  if ((Get-FileHash "$TMP_DOWNLOAD_DIR/$distributionUrlName" -Algorithm SHA256).Hash.ToLower() -ne $distributionSha256Sum) {
    Write-Error "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised. If you updated your Maven version, you need to update the specified distributionSha256Sum property."
  }
}

# unzip and move
Expand-Archive "$TMP_DOWNLOAD_DIR/$distributionUrlName" -DestinationPath "$TMP_DOWNLOAD_DIR" | Out-Null
Rename-Item -Path "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" -NewName $MAVEN_HOME_NAME | Out-Null
try {
  Move-Item -Path "$TMP_DOWNLOAD_DIR/$MAVEN_HOME_NAME" -Destination $MAVEN_HOME_PARENT | Out-Null
} catch {
  if (! (Test-Path -Path "$MAVEN_HOME" -PathType Container)) {
    Write-Error "fail to move MAVEN_HOME"
  }
} finally {
  try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
  catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }
}

Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"
</file>

<file path="auth-module/pom.xml">
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>pe.edu.certus</groupId>
        <artifactId>cm-backend</artifactId>
        <version>0.0.1-SNAPSHOT</version>
    </parent>
    <artifactId>auth-module</artifactId>
    <name>auth-module</name>
    <description>Módulo de Autenticación y Autorización</description>

    <properties>
        <java.version>17</java.version>
        <lombok.version>1.18.32</lombok.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>

        <dependency>
            <groupId>com.nimbusds</groupId>
            <artifactId>nimbus-jose-jwt</artifactId>
            <version>10.3</version>
        </dependency>

        <dependency>
            <groupId>com.google.api-client</groupId>
            <artifactId>google-api-client</artifactId>
            <version>2.8.0</version>
        </dependency>

        <dependency>
            <groupId>com.google.http-client</groupId>
            <artifactId>google-http-client-jackson2</artifactId>
            <version>1.47.0</version>
        </dependency>

        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>${lombok.version}</version>
            <optional>true</optional>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <annotationProcessorPaths>
                        <path>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                            <version>${lombok.version}</version>
                        </path>
                    </annotationProcessorPaths>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>
</file>

<file path="auth-module/src/main/java/pe/edu/certus/authmodule/AuthModuleApplication.java">
package pe.edu.certus.authmodule;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class AuthModuleApplication {

    public static void main( String[] args ) {
        SpringApplication.run( AuthModuleApplication.class, args );
    }

}
</file>

<file path="auth-module/src/main/java/pe/edu/certus/authmodule/configuration/annotations/AuthComponentScanConfig.java">
package pe.edu.certus.authmodule.configuration.annotations;

import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;

@Configuration
@ComponentScan(basePackages = "pe.edu.certus.authmodule")
public class AuthComponentScanConfig {}
</file>

<file path="auth-module/src/main/java/pe/edu/certus/authmodule/configuration/annotations/AuthEntityScanConfig.java">
package pe.edu.certus.authmodule.configuration.annotations;

import org.springframework.boot.autoconfigure.domain.EntityScan;
import org.springframework.context.annotation.Configuration;

@Configuration
@EntityScan(basePackages = "pe.edu.certus.authmodule.repository.entity")
public class AuthEntityScanConfig {}
</file>

<file path="auth-module/src/main/java/pe/edu/certus/authmodule/configuration/annotations/AuthPersistenceConfig.java">
package pe.edu.certus.authmodule.configuration.annotations;

import org.springframework.context.annotation.Configuration;
import org.springframework.data.jpa.repository.config.EnableJpaRepositories;

@Configuration
@EnableJpaRepositories(basePackages = "pe.edu.certus.authmodule.repository")
public class AuthPersistenceConfig {}
</file>

<file path="auth-module/src/main/java/pe/edu/certus/authmodule/configuration/policy/CorsConfig.java">
package pe.edu.certus.authmodule.configuration.policy;

import org.springframework.web.servlet.config.annotation.CorsRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

public class CorsConfig implements WebMvcConfigurer {
    @Override
    public void addCorsMappings( CorsRegistry registry) {
        registry.addMapping("/**")
                .allowedOrigins("http://localhost:8080")
                .allowedMethods("GET", "POST", "PUT", "DELETE", "OPTIONS")
                .allowedHeaders("Origin", "Content-Type", "Accept", "Authorization")
                .allowCredentials(true)
                .maxAge(3600);
    }
}
</file>

<file path="auth-module/src/main/java/pe/edu/certus/authmodule/configuration/policy/JwtAuthorizationFilterConfig.java">
package pe.edu.certus.authmodule.configuration.policy;

import com.nimbusds.jose.JOSEException;
import com.nimbusds.jwt.JWTClaimsSet;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.lang.NonNull;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.filter.OncePerRequestFilter;
import pe.edu.certus.authmodule.jwt.adapters.JwtManager;
import pe.edu.certus.authmodule.repository.entity.AuthEntity;
import pe.edu.certus.authmodule.repository.ports.driver.ForQueryingAuth;

import java.io.IOException;
import java.text.ParseException;
import java.util.Collection;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class JwtAuthorizationFilterConfig extends OncePerRequestFilter {

    private final JwtManager jwtManager;
    private final ForQueryingAuth forQueryingAuth;

    public JwtAuthorizationFilterConfig(JwtManager jwtManager, ForQueryingAuth forQueryingAuth) {
        this.jwtManager = jwtManager;
        this.forQueryingAuth = forQueryingAuth;
    }

    @Override
    protected void doFilterInternal(@NonNull HttpServletRequest request,
                                    @NonNull HttpServletResponse response,
                                    @NonNull FilterChain filterChain) throws ServletException, IOException {
        String header = request.getHeader("Authorization");

        if (header == null || !header.startsWith("Bearer ")) {
            filterChain.doFilter(request, response);
            return;
        }

        String token = header.substring(7);

        try {
            JWTClaimsSet claims = jwtManager.parseJWT(token);
            String userId = claims.getSubject();

            Collection<? extends GrantedAuthority> authorities = forQueryingAuth.findById(Long.parseLong(userId))
                    .map(this::getAuthoritiesForUser)
                    .orElse(Collections.emptyList());

            UsernamePasswordAuthenticationToken authenticationToken =
                    new UsernamePasswordAuthenticationToken(userId, null, authorities);

            SecurityContextHolder.getContext().setAuthentication(authenticationToken);

        } catch (JOSEException | ParseException | NumberFormatException e) {
            SecurityContextHolder.clearContext();
            response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
            return;
        }

        filterChain.doFilter(request, response);
    }

    private Collection<? extends GrantedAuthority> getAuthoritiesForUser(AuthEntity user) {
        Long roleId = user.getIdRole();
        String roleName = "USER";

        if (roleId == 1L) {
            roleName = "Administrator";
        } else if (roleId == 2L) {
            roleName = "Seller";
        } else if (roleId == 3L) {
            roleName = "Buyer";
        }

        return Stream.of(roleName)
                .map(SimpleGrantedAuthority::new)
                .collect(Collectors.toList());
    }
}
</file>

<file path="auth-module/src/main/java/pe/edu/certus/authmodule/configuration/policy/SecurityConfig.java">
package pe.edu.certus.authmodule.configuration.policy;

import jakarta.servlet.http.HttpServletResponse;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.annotation.Order;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import org.springframework.security.web.util.matcher.AntPathRequestMatcher;
import pe.edu.certus.authmodule.jwt.adapters.JwtManager;
import pe.edu.certus.authmodule.jwt.ports.ForJwt;
import pe.edu.certus.authmodule.repository.ports.driver.ForQueryingAuth;

@Configuration
@EnableWebSecurity
@EnableMethodSecurity(securedEnabled = true)
public class SecurityConfig {

    private final JwtManager jwtManager;
    private final ForQueryingAuth forQueryingAuth;
    private final ForJwt forJwt;

    public SecurityConfig(JwtManager jwtManager, ForQueryingAuth forQueryingAuth, ForJwt forJwt) {
        this.jwtManager = jwtManager;
        this.forQueryingAuth = forQueryingAuth;
        this.forJwt = forJwt;
    }

    @Bean
    @Order(1)
    public SecurityFilterChain authFilterChain(HttpSecurity http) throws Exception {
        http
                .securityMatcher(new AntPathRequestMatcher("/api/v1/auth/**"))
                .csrf(csrf -> csrf.disable())
                .authorizeHttpRequests(auth -> auth.anyRequest().permitAll())
                .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS));

        return http.build();
    }

    @Bean
    @Order(2)
    public SecurityFilterChain apiFilterChain(HttpSecurity http) throws Exception {
        http
                .csrf(csrf -> csrf.disable())
                .authorizeHttpRequests(auth -> auth.anyRequest().authenticated())
                .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
                .addFilterBefore(new JwtAuthorizationFilterConfig(jwtManager, forQueryingAuth), UsernamePasswordAuthenticationFilter.class)
                .exceptionHandling(exception ->
                        exception.authenticationEntryPoint((request, response, authException) ->
                                response.sendError(HttpServletResponse.SC_UNAUTHORIZED, "Unauthorized")));

        return http.build();
    }

    @Bean
    @Order(3)
    public SecurityFilterChain securityFilterChain( HttpSecurity http) throws Exception {
        return http
                .csrf(csrf ->
                        csrf.disable())
                .authorizeHttpRequests(authRequest ->
                        authRequest
                                .requestMatchers("/api/v1/auth/**").permitAll()

                                .requestMatchers("/api/v1/people/**").permitAll()

                                .requestMatchers("/api/v1/works/**").permitAll()

                                .requestMatchers("/api/v1/ratings/**").permitAll()

                                .requestMatchers("/api/v1/users/**" ).permitAll()

                                .requestMatchers("/api/v1/paypal/**" ).permitAll()

                                .anyRequest().permitAll()
                )
                .sessionManagement(sessionManager ->
                        sessionManager
                                .sessionCreationPolicy( SessionCreationPolicy.STATELESS))
                .addFilterBefore(new JwtAuthorizationFilterConfig(( JwtManager ) forJwt), UsernamePasswordAuthenticationFilter.class)
                .exceptionHandling(exceptionHandling ->
                        exceptionHandling
                                .authenticationEntryPoint((request, response, authException) -> {
                                    response.sendError( HttpServletResponse.SC_UNAUTHORIZED, "Unauthorized");
                                }))
                .build();
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }
}
</file>

<file path="auth-module/src/main/java/pe/edu/certus/authmodule/jwt/ports/ForJwt.java">
package pe.edu.certus.authmodule.jwt.ports;

import com.nimbusds.jose.JOSEException;
import com.nimbusds.jwt.JWTClaimsSet;

import java.io.IOException;
import java.security.NoSuchAlgorithmException;
import java.security.spec.InvalidKeySpecException;
import java.text.ParseException;

public interface ForJwt {
    String generateJWT(Long subject) throws JOSEException, IOException, NoSuchAlgorithmException, InvalidKeySpecException;

    JWTClaimsSet parseJWT(String jwt) throws ParseException, JOSEException, IOException;
}
</file>

<file path="auth-module/src/main/java/pe/edu/certus/authmodule/logic/adapters/driven/AuthManager.java">
package pe.edu.certus.authmodule.logic.adapters.driven;

import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import pe.edu.certus.authmodule.jwt.adapters.JwtManager;
import pe.edu.certus.authmodule.logic.adapters.driver.ResponseWebModel;
import pe.edu.certus.authmodule.logic.model.LoginModel;
import pe.edu.certus.authmodule.logic.ports.driver.ForAuth;
import pe.edu.certus.authmodule.repository.entity.AuthEntity;
import pe.edu.certus.authmodule.repository.ports.driver.ForQueryingAuth;

import java.util.HashMap;
import java.util.Optional;

@Service
public class AuthManager implements ForAuth {

    private final ForQueryingAuth forQueryingAuth;
    private final JwtManager jwtManager;
    private final PasswordEncoder passwordEncoder;

    public AuthManager(ForQueryingAuth forQueryingAuth, JwtManager jwtManager, PasswordEncoder passwordEncoder) {
        this.forQueryingAuth = forQueryingAuth;
        this.jwtManager = jwtManager;
        this.passwordEncoder = passwordEncoder;
    }

    @Override
    public HashMap<String, String> login(LoginModel loginRequest) throws Exception {
        HashMap<String, String> response = new HashMap<>();
        Optional<AuthEntity> userOptional = forQueryingAuth.findByUserEmail(loginRequest.getUserEmail());

        if (userOptional.isEmpty()) {
            response.put("error", "User not registered!");
            return response;
        }

        AuthEntity user = userOptional.get();
        if (passwordEncoder.matches(loginRequest.getPassword(), user.getUserPassword())) {
            response.put("jwt", jwtManager.generateJWT(user.getId()));
        } else {
            response.put("error", "Authentication failed");
        }
        return response;
    }

    @Override
    public ResponseWebModel register(AuthEntity user) throws Exception {
        ResponseWebModel response = new ResponseWebModel();
        Optional<AuthEntity> existingUser = forQueryingAuth.findByUserEmail(user.getUserEmail());
        if (existingUser.isPresent()) {
            response.setNumOfErrors(1);
            response.setMessage("User with this email already exists!");
            return response;
        }

        user.setUserPassword(passwordEncoder.encode(user.getUserPassword()));
        forQueryingAuth.save(user);
        response.setMessage("User created successfully!");
        return response;
    }
}
</file>

<file path="auth-module/src/main/java/pe/edu/certus/authmodule/logic/adapters/driven/GoogleAuthManager.java">
package pe.edu.certus.authmodule.logic.adapters.driven;

import com.google.api.client.googleapis.auth.oauth2.GoogleIdToken;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import pe.edu.certus.authmodule.jwt.adapters.JwtManager;
import pe.edu.certus.authmodule.logic.ports.driven.ForVerifyingGoogleToken;
import pe.edu.certus.authmodule.logic.ports.driver.ForGoogleAuth;
import pe.edu.certus.authmodule.repository.entity.AuthEntity;
import pe.edu.certus.authmodule.repository.ports.driver.ForQueryingAuth;

import java.util.HashMap;
import java.util.Optional;

@Service
public class GoogleAuthManager implements ForGoogleAuth {

    private final ForVerifyingGoogleToken forVerifyingGoogleToken;
    private final ForQueryingAuth forQueryingAuth;
    private final JwtManager jwtManager;
    private final BCryptPasswordEncoder passwordEncoder;

    public GoogleAuthManager(ForVerifyingGoogleToken forVerifyingGoogleToken,
                             ForQueryingAuth forQueryingAuth,
                             JwtManager jwtManager,
                             PasswordEncoder passwordEncoder) {
        this.forVerifyingGoogleToken = forVerifyingGoogleToken;
        this.forQueryingAuth = forQueryingAuth;
        this.jwtManager = jwtManager;
        this.passwordEncoder = (BCryptPasswordEncoder) passwordEncoder;
    }

    @Override
    public HashMap<String, String> loginWithGoogle(String idTokenString) throws Exception {
        try {
            GoogleIdToken.Payload payload = forVerifyingGoogleToken.verifyGoogleToken(idTokenString);
            String email = payload.getEmail();
            Optional<AuthEntity> userOptional = forQueryingAuth.findByUserEmail(email);

            AuthEntity user;
            if (userOptional.isPresent()) {
                user = userOptional.get();
            } else {
                user = new AuthEntity();
                user.setUserEmail(email);
                user.setUserPassword(passwordEncoder.encode(java.util.UUID.randomUUID().toString()));
                user.setIdRole(3L);
                user = forQueryingAuth.save(user);
            }

            HashMap<String, String> jwt = new HashMap<>();
            jwt.put("jwt", jwtManager.generateJWT(user.getId()));
            return jwt;
        } catch (Exception e) {
            System.err.println("Error processing Google login: " + e.getMessage());
            HashMap<String, String> error = new HashMap<>();
            error.put("error", "Invalid Google Token or server error.");
            return error;
        }
    }
}
</file>

<file path="auth-module/src/main/java/pe/edu/certus/authmodule/logic/adapters/driver/AuthAdapter.java">
package pe.edu.certus.authmodule.logic.adapters.driver;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import pe.edu.certus.authmodule.logic.model.GoogleLoginModel;
import pe.edu.certus.authmodule.logic.model.LoginModel;
import pe.edu.certus.authmodule.logic.ports.driver.ForAuth;
import pe.edu.certus.authmodule.logic.ports.driver.ForGoogleAuth;
import pe.edu.certus.authmodule.repository.entity.AuthEntity;

import java.util.HashMap;

@RestController
@RequestMapping("/auth")
public class AuthAdapter {

    private final ForAuth forAuth;
    private final ForGoogleAuth forGoogleAuth;

    public AuthAdapter(ForAuth forAuth, ForGoogleAuth forGoogleAuth) {
        this.forAuth = forAuth;
        this.forGoogleAuth = forGoogleAuth;
    }

    @PostMapping("/register")
    public ResponseEntity<ResponseWebModel> register(@RequestBody AuthEntity user) throws Exception {
        ResponseWebModel response = forAuth.register(user);
        if (response.getNumOfErrors() > 0) {
            return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST);
        }
        return new ResponseEntity<>(response, HttpStatus.CREATED);
    }

    @PostMapping("/login")
    public ResponseEntity<HashMap<String, String>> login(@RequestBody LoginModel loginRequest) throws Exception {
        HashMap<String, String> login = forAuth.login(loginRequest);
        if (login.containsKey("jwt")) {
            return new ResponseEntity<>(login, HttpStatus.OK);
        } else {
            return new ResponseEntity<>(login, HttpStatus.UNAUTHORIZED);
        }
    }

    @PostMapping("/google-login")
    public ResponseEntity<HashMap<String, String>> googleLogin(@RequestBody GoogleLoginModel request) throws Exception {
        if (request.getIdToken() == null || request.getIdToken().isEmpty()) {
            return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
        }

        HashMap<String, String> response = forGoogleAuth.loginWithGoogle(request.getIdToken());

        if (response.containsKey("jwt")) {
            return new ResponseEntity<>(response, HttpStatus.OK);
        } else {
            return new ResponseEntity<>(response, HttpStatus.UNAUTHORIZED);
        }
    }
}
</file>

<file path="auth-module/src/main/java/pe/edu/certus/authmodule/logic/adapters/driver/ResponseWebModel.java">
package pe.edu.certus.authmodule.logic.adapters.driver;

import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
public class ResponseWebModel {
    private int numOfErrors;
    private String message;
}
</file>

<file path="auth-module/src/main/java/pe/edu/certus/authmodule/logic/model/GoogleLoginModel.java">
package pe.edu.certus.authmodule.logic.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
public class GoogleLoginModel {
    @JsonProperty("id_token")
    private String idToken;
}
</file>

<file path="auth-module/src/main/java/pe/edu/certus/authmodule/logic/model/LoginModel.java">
package pe.edu.certus.authmodule.logic.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
public class LoginModel {
    @JsonProperty("userEmail")
    private String userEmail;
    @JsonProperty("userPassword")
    private String password;
}
</file>

<file path="auth-module/src/main/java/pe/edu/certus/authmodule/logic/ports/driven/ForVerifyingGoogleToken.java">
package pe.edu.certus.authmodule.logic.ports.driven;

import com.google.api.client.googleapis.auth.oauth2.GoogleIdToken;

import java.io.IOException;
import java.security.GeneralSecurityException;

public interface ForVerifyingGoogleToken {
    GoogleIdToken.Payload verifyGoogleToken(String idTokenString) throws GeneralSecurityException, IOException;
}
</file>

<file path="auth-module/src/main/java/pe/edu/certus/authmodule/logic/ports/driver/ForAuth.java">
package pe.edu.certus.authmodule.logic.ports.driver;

import pe.edu.certus.authmodule.logic.adapters.driver.ResponseWebModel;
import pe.edu.certus.authmodule.logic.model.LoginModel;
import pe.edu.certus.authmodule.repository.entity.AuthEntity;

import java.util.HashMap;

public interface ForAuth {
    HashMap<String, String> login(LoginModel loginRequest) throws Exception;
    ResponseWebModel register(AuthEntity user) throws Exception;
}
</file>

<file path="auth-module/src/main/java/pe/edu/certus/authmodule/logic/ports/driver/ForGoogleAuth.java">
package pe.edu.certus.authmodule.logic.ports.driver;

import java.util.HashMap;

public interface ForGoogleAuth {
    HashMap<String, String> loginWithGoogle(String idToken) throws Exception;
}
</file>

<file path="auth-module/src/main/java/pe/edu/certus/authmodule/repository/adapters/driver/GoogleTokenVerifierProxy.java">
package pe.edu.certus.authmodule.repository.adapters.driver;

import com.google.api.client.googleapis.auth.oauth2.GoogleIdToken;
import com.google.api.client.googleapis.auth.oauth2.GoogleIdTokenVerifier;
import com.google.api.client.http.javanet.NetHttpTransport;
import com.google.api.client.json.gson.GsonFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import pe.edu.certus.authmodule.logic.ports.driven.ForVerifyingGoogleToken;

import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Collections;

@Component
public class GoogleTokenVerifierProxy implements ForVerifyingGoogleToken {

    private final GoogleIdTokenVerifier verifier;


    public GoogleTokenVerifierProxy(@Value("${google.client-id}") String clientId) {
        this.verifier = new GoogleIdTokenVerifier.Builder(new NetHttpTransport(), GsonFactory.getDefaultInstance())
                .setAudience(Collections.singletonList(clientId))
                .build();
    }

    @Override
    public GoogleIdToken.Payload verifyGoogleToken(String idTokenString) throws GeneralSecurityException, IOException {
        GoogleIdToken idToken = verifier.verify(idTokenString);
        if (idToken != null) {
            return idToken.getPayload();
        } else {
            throw new IllegalArgumentException("Invalid Google ID token.");
        }
    }
}
</file>

<file path="auth-module/src/main/java/pe/edu/certus/authmodule/repository/entity/AuthEntity.java">
package pe.edu.certus.authmodule.repository.entity;

import jakarta.persistence.*;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Entity
@Table(name = "users")
@NoArgsConstructor
@Getter
@Setter
public class AuthEntity {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "user_id")
    private Long id;

    @Column(name = "user_email", unique = true, nullable = false)
    private String userEmail;
    
    @Column(name = "user_password", nullable = false)
    private String userPassword;

    @Column(name = "id_role")
    private Long idRole;

}
</file>

<file path="auth-module/src/main/java/pe/edu/certus/authmodule/repository/ports/driver/ForQueryingAuth.java">
package pe.edu.certus.authmodule.repository.ports.driver;

import org.springframework.data.jpa.repository.JpaRepository;
import pe.edu.certus.authmodule.repository.entity.AuthEntity;

import java.util.Optional;

public interface ForQueryingAuth extends JpaRepository<AuthEntity, Long> {
    Optional<AuthEntity> findByUserEmail(String userEmail);
}
</file>

<file path="auth-module/src/main/resources/jwt-keys/public-key.pem">
-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAmfeSc0NQPq5wUobTRcME
jRHlOVKl/NtUAgdPI9RruQJ4RBC12YFx2C9lS713M73AZRbUF1M5K/sGF8qSbo0E
eaJs3DeT43CkM0Of+CU09v0OF0d5675yc55vwlN9Sqgus2Uq6QqNUIS1F9ZXR3j3
iBl/1y5Q7jHp7cOFe6rWGeTA1oSsVPLGCvM9XZz+em0y19Hvm0rEmUYa6uq8L4cQ
XQuevV3mgl6DgIU9Rcf1APeQUVN/qez1uOfFwDqHKHvsAgVe/T+Gm7DDPIse/4yP
8mUU7kig5vME2YcPc8iCwKGqLE3yYOLQZYFWzj3xbg4xq0otA3UrWvYOV2pm6mMd
/QIDAQAB
-----END PUBLIC KEY-----
</file>

<file path="bootloader/src/main/java/pe/edu/certus/bootloader/config/BootComponentScan.java">
package pe.edu.certus.bootloader.config;

import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;

@Configuration
@ComponentScan(basePackages = {
        "pe.edu.certus.authmodule",
        "pe.edu.certus.peoplemodule",
        "pe.edu.certus.ratingsmodule",
        "pe.edu.certus.usersmodule",
        "pe.edu.certus.worksmodule",
        "pe.edu.certus.paypalmodule"})
public class BootComponentScan {
}
</file>

<file path="paypal-module/.gitattributes">
/mvnw text eol=lf
*.cmd text eol=crlf
</file>

<file path="paypal-module/.gitignore">
HELP.md
target/
.mvn/wrapper/maven-wrapper.jar
!**/src/main/**/target/
!**/src/test/**/target/

### STS ###
.apt_generated
.classpath
.factorypath
.project
.settings
.springBeans
.sts4-cache

### IntelliJ IDEA ###
.idea
*.iws
*.iml
*.ipr

### NetBeans ###
/nbproject/private/
/nbbuild/
/dist/
/nbdist/
/.nb-gradle/
build/
!**/src/main/**/build/
!**/src/test/**/build/

### VS Code ###
.vscode/
</file>

<file path="paypal-module/.mvn/wrapper/maven-wrapper.properties">
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
wrapperVersion=3.3.2
distributionType=only-script
distributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.9.10/apache-maven-3.9.10-bin.zip
</file>

<file path="paypal-module/mvnw">
#!/bin/sh
# ----------------------------------------------------------------------------
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
# ----------------------------------------------------------------------------

# ----------------------------------------------------------------------------
# Apache Maven Wrapper startup batch script, version 3.3.2
#
# Optional ENV vars
# -----------------
#   JAVA_HOME - location of a JDK home dir, required when download maven via java source
#   MVNW_REPOURL - repo url base for downloading maven distribution
#   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
#   MVNW_VERBOSE - true: enable verbose log; debug: trace the mvnw script; others: silence the output
# ----------------------------------------------------------------------------

set -euf
[ "${MVNW_VERBOSE-}" != debug ] || set -x

# OS specific support.
native_path() { printf %s\\n "$1"; }
case "$(uname)" in
CYGWIN* | MINGW*)
  [ -z "${JAVA_HOME-}" ] || JAVA_HOME="$(cygpath --unix "$JAVA_HOME")"
  native_path() { cygpath --path --windows "$1"; }
  ;;
esac

# set JAVACMD and JAVACCMD
set_java_home() {
  # For Cygwin and MinGW, ensure paths are in Unix format before anything is touched
  if [ -n "${JAVA_HOME-}" ]; then
    if [ -x "$JAVA_HOME/jre/sh/java" ]; then
      # IBM's JDK on AIX uses strange locations for the executables
      JAVACMD="$JAVA_HOME/jre/sh/java"
      JAVACCMD="$JAVA_HOME/jre/sh/javac"
    else
      JAVACMD="$JAVA_HOME/bin/java"
      JAVACCMD="$JAVA_HOME/bin/javac"

      if [ ! -x "$JAVACMD" ] || [ ! -x "$JAVACCMD" ]; then
        echo "The JAVA_HOME environment variable is not defined correctly, so mvnw cannot run." >&2
        echo "JAVA_HOME is set to \"$JAVA_HOME\", but \"\$JAVA_HOME/bin/java\" or \"\$JAVA_HOME/bin/javac\" does not exist." >&2
        return 1
      fi
    fi
  else
    JAVACMD="$(
      'set' +e
      'unset' -f command 2>/dev/null
      'command' -v java
    )" || :
    JAVACCMD="$(
      'set' +e
      'unset' -f command 2>/dev/null
      'command' -v javac
    )" || :

    if [ ! -x "${JAVACMD-}" ] || [ ! -x "${JAVACCMD-}" ]; then
      echo "The java/javac command does not exist in PATH nor is JAVA_HOME set, so mvnw cannot run." >&2
      return 1
    fi
  fi
}

# hash string like Java String::hashCode
hash_string() {
  str="${1:-}" h=0
  while [ -n "$str" ]; do
    char="${str%"${str#?}"}"
    h=$(((h * 31 + $(LC_CTYPE=C printf %d "'$char")) % 4294967296))
    str="${str#?}"
  done
  printf %x\\n $h
}

verbose() { :; }
[ "${MVNW_VERBOSE-}" != true ] || verbose() { printf %s\\n "${1-}"; }

die() {
  printf %s\\n "$1" >&2
  exit 1
}

trim() {
  # MWRAPPER-139:
  #   Trims trailing and leading whitespace, carriage returns, tabs, and linefeeds.
  #   Needed for removing poorly interpreted newline sequences when running in more
  #   exotic environments such as mingw bash on Windows.
  printf "%s" "${1}" | tr -d '[:space:]'
}

# parse distributionUrl and optional distributionSha256Sum, requires .mvn/wrapper/maven-wrapper.properties
while IFS="=" read -r key value; do
  case "${key-}" in
  distributionUrl) distributionUrl=$(trim "${value-}") ;;
  distributionSha256Sum) distributionSha256Sum=$(trim "${value-}") ;;
  esac
done <"${0%/*}/.mvn/wrapper/maven-wrapper.properties"
[ -n "${distributionUrl-}" ] || die "cannot read distributionUrl property in ${0%/*}/.mvn/wrapper/maven-wrapper.properties"

case "${distributionUrl##*/}" in
maven-mvnd-*bin.*)
  MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/
  case "${PROCESSOR_ARCHITECTURE-}${PROCESSOR_ARCHITEW6432-}:$(uname -a)" in
  *AMD64:CYGWIN* | *AMD64:MINGW*) distributionPlatform=windows-amd64 ;;
  :Darwin*x86_64) distributionPlatform=darwin-amd64 ;;
  :Darwin*arm64) distributionPlatform=darwin-aarch64 ;;
  :Linux*x86_64*) distributionPlatform=linux-amd64 ;;
  *)
    echo "Cannot detect native platform for mvnd on $(uname)-$(uname -m), use pure java version" >&2
    distributionPlatform=linux-amd64
    ;;
  esac
  distributionUrl="${distributionUrl%-bin.*}-$distributionPlatform.zip"
  ;;
maven-mvnd-*) MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/ ;;
*) MVN_CMD="mvn${0##*/mvnw}" _MVNW_REPO_PATTERN=/org/apache/maven/ ;;
esac

# apply MVNW_REPOURL and calculate MAVEN_HOME
# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
[ -z "${MVNW_REPOURL-}" ] || distributionUrl="$MVNW_REPOURL$_MVNW_REPO_PATTERN${distributionUrl#*"$_MVNW_REPO_PATTERN"}"
distributionUrlName="${distributionUrl##*/}"
distributionUrlNameMain="${distributionUrlName%.*}"
distributionUrlNameMain="${distributionUrlNameMain%-bin}"
MAVEN_USER_HOME="${MAVEN_USER_HOME:-${HOME}/.m2}"
MAVEN_HOME="${MAVEN_USER_HOME}/wrapper/dists/${distributionUrlNameMain-}/$(hash_string "$distributionUrl")"

exec_maven() {
  unset MVNW_VERBOSE MVNW_USERNAME MVNW_PASSWORD MVNW_REPOURL || :
  exec "$MAVEN_HOME/bin/$MVN_CMD" "$@" || die "cannot exec $MAVEN_HOME/bin/$MVN_CMD"
}

if [ -d "$MAVEN_HOME" ]; then
  verbose "found existing MAVEN_HOME at $MAVEN_HOME"
  exec_maven "$@"
fi

case "${distributionUrl-}" in
*?-bin.zip | *?maven-mvnd-?*-?*.zip) ;;
*) die "distributionUrl is not valid, must match *-bin.zip or maven-mvnd-*.zip, but found '${distributionUrl-}'" ;;
esac

# prepare tmp dir
if TMP_DOWNLOAD_DIR="$(mktemp -d)" && [ -d "$TMP_DOWNLOAD_DIR" ]; then
  clean() { rm -rf -- "$TMP_DOWNLOAD_DIR"; }
  trap clean HUP INT TERM EXIT
else
  die "cannot create temp dir"
fi

mkdir -p -- "${MAVEN_HOME%/*}"

# Download and Install Apache Maven
verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."
verbose "Downloading from: $distributionUrl"
verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"

# select .zip or .tar.gz
if ! command -v unzip >/dev/null; then
  distributionUrl="${distributionUrl%.zip}.tar.gz"
  distributionUrlName="${distributionUrl##*/}"
fi

# verbose opt
__MVNW_QUIET_WGET=--quiet __MVNW_QUIET_CURL=--silent __MVNW_QUIET_UNZIP=-q __MVNW_QUIET_TAR=''
[ "${MVNW_VERBOSE-}" != true ] || __MVNW_QUIET_WGET='' __MVNW_QUIET_CURL='' __MVNW_QUIET_UNZIP='' __MVNW_QUIET_TAR=v

# normalize http auth
case "${MVNW_PASSWORD:+has-password}" in
'') MVNW_USERNAME='' MVNW_PASSWORD='' ;;
has-password) [ -n "${MVNW_USERNAME-}" ] || MVNW_USERNAME='' MVNW_PASSWORD='' ;;
esac

if [ -z "${MVNW_USERNAME-}" ] && command -v wget >/dev/null; then
  verbose "Found wget ... using wget"
  wget ${__MVNW_QUIET_WGET:+"$__MVNW_QUIET_WGET"} "$distributionUrl" -O "$TMP_DOWNLOAD_DIR/$distributionUrlName" || die "wget: Failed to fetch $distributionUrl"
elif [ -z "${MVNW_USERNAME-}" ] && command -v curl >/dev/null; then
  verbose "Found curl ... using curl"
  curl ${__MVNW_QUIET_CURL:+"$__MVNW_QUIET_CURL"} -f -L -o "$TMP_DOWNLOAD_DIR/$distributionUrlName" "$distributionUrl" || die "curl: Failed to fetch $distributionUrl"
elif set_java_home; then
  verbose "Falling back to use Java to download"
  javaSource="$TMP_DOWNLOAD_DIR/Downloader.java"
  targetZip="$TMP_DOWNLOAD_DIR/$distributionUrlName"
  cat >"$javaSource" <<-END
	public class Downloader extends java.net.Authenticator
	{
	  protected java.net.PasswordAuthentication getPasswordAuthentication()
	  {
	    return new java.net.PasswordAuthentication( System.getenv( "MVNW_USERNAME" ), System.getenv( "MVNW_PASSWORD" ).toCharArray() );
	  }
	  public static void main( String[] args ) throws Exception
	  {
	    setDefault( new Downloader() );
	    java.nio.file.Files.copy( java.net.URI.create( args[0] ).toURL().openStream(), java.nio.file.Paths.get( args[1] ).toAbsolutePath().normalize() );
	  }
	}
	END
  # For Cygwin/MinGW, switch paths to Windows format before running javac and java
  verbose " - Compiling Downloader.java ..."
  "$(native_path "$JAVACCMD")" "$(native_path "$javaSource")" || die "Failed to compile Downloader.java"
  verbose " - Running Downloader.java ..."
  "$(native_path "$JAVACMD")" -cp "$(native_path "$TMP_DOWNLOAD_DIR")" Downloader "$distributionUrl" "$(native_path "$targetZip")"
fi

# If specified, validate the SHA-256 sum of the Maven distribution zip file
if [ -n "${distributionSha256Sum-}" ]; then
  distributionSha256Result=false
  if [ "$MVN_CMD" = mvnd.sh ]; then
    echo "Checksum validation is not supported for maven-mvnd." >&2
    echo "Please disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2
    exit 1
  elif command -v sha256sum >/dev/null; then
    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | sha256sum -c >/dev/null 2>&1; then
      distributionSha256Result=true
    fi
  elif command -v shasum >/dev/null; then
    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | shasum -a 256 -c >/dev/null 2>&1; then
      distributionSha256Result=true
    fi
  else
    echo "Checksum validation was requested but neither 'sha256sum' or 'shasum' are available." >&2
    echo "Please install either command, or disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2
    exit 1
  fi
  if [ $distributionSha256Result = false ]; then
    echo "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised." >&2
    echo "If you updated your Maven version, you need to update the specified distributionSha256Sum property." >&2
    exit 1
  fi
fi

# unzip and move
if command -v unzip >/dev/null; then
  unzip ${__MVNW_QUIET_UNZIP:+"$__MVNW_QUIET_UNZIP"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -d "$TMP_DOWNLOAD_DIR" || die "failed to unzip"
else
  tar xzf${__MVNW_QUIET_TAR:+"$__MVNW_QUIET_TAR"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -C "$TMP_DOWNLOAD_DIR" || die "failed to untar"
fi
printf %s\\n "$distributionUrl" >"$TMP_DOWNLOAD_DIR/$distributionUrlNameMain/mvnw.url"
mv -- "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" "$MAVEN_HOME" || [ -d "$MAVEN_HOME" ] || die "fail to move MAVEN_HOME"

clean || :
exec_maven "$@"
</file>

<file path="paypal-module/mvnw.cmd">
<# : batch portion
@REM ----------------------------------------------------------------------------
@REM Licensed to the Apache Software Foundation (ASF) under one
@REM or more contributor license agreements.  See the NOTICE file
@REM distributed with this work for additional information
@REM regarding copyright ownership.  The ASF licenses this file
@REM to you under the Apache License, Version 2.0 (the
@REM "License"); you may not use this file except in compliance
@REM with the License.  You may obtain a copy of the License at
@REM
@REM    http://www.apache.org/licenses/LICENSE-2.0
@REM
@REM Unless required by applicable law or agreed to in writing,
@REM software distributed under the License is distributed on an
@REM "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
@REM KIND, either express or implied.  See the License for the
@REM specific language governing permissions and limitations
@REM under the License.
@REM ----------------------------------------------------------------------------

@REM ----------------------------------------------------------------------------
@REM Apache Maven Wrapper startup batch script, version 3.3.2
@REM
@REM Optional ENV vars
@REM   MVNW_REPOURL - repo url base for downloading maven distribution
@REM   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
@REM   MVNW_VERBOSE - true: enable verbose log; others: silence the output
@REM ----------------------------------------------------------------------------

@IF "%__MVNW_ARG0_NAME__%"=="" (SET __MVNW_ARG0_NAME__=%~nx0)
@SET __MVNW_CMD__=
@SET __MVNW_ERROR__=
@SET __MVNW_PSMODULEP_SAVE=%PSModulePath%
@SET PSModulePath=
@FOR /F "usebackq tokens=1* delims==" %%A IN (`powershell -noprofile "& {$scriptDir='%~dp0'; $script='%__MVNW_ARG0_NAME__%'; icm -ScriptBlock ([Scriptblock]::Create((Get-Content -Raw '%~f0'))) -NoNewScope}"`) DO @(
  IF "%%A"=="MVN_CMD" (set __MVNW_CMD__=%%B) ELSE IF "%%B"=="" (echo %%A) ELSE (echo %%A=%%B)
)
@SET PSModulePath=%__MVNW_PSMODULEP_SAVE%
@SET __MVNW_PSMODULEP_SAVE=
@SET __MVNW_ARG0_NAME__=
@SET MVNW_USERNAME=
@SET MVNW_PASSWORD=
@IF NOT "%__MVNW_CMD__%"=="" (%__MVNW_CMD__% %*)
@echo Cannot start maven from wrapper >&2 && exit /b 1
@GOTO :EOF
: end batch / begin powershell #>

$ErrorActionPreference = "Stop"
if ($env:MVNW_VERBOSE -eq "true") {
  $VerbosePreference = "Continue"
}

# calculate distributionUrl, requires .mvn/wrapper/maven-wrapper.properties
$distributionUrl = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionUrl
if (!$distributionUrl) {
  Write-Error "cannot read distributionUrl property in $scriptDir/.mvn/wrapper/maven-wrapper.properties"
}

switch -wildcard -casesensitive ( $($distributionUrl -replace '^.*/','') ) {
  "maven-mvnd-*" {
    $USE_MVND = $true
    $distributionUrl = $distributionUrl -replace '-bin\.[^.]*$',"-windows-amd64.zip"
    $MVN_CMD = "mvnd.cmd"
    break
  }
  default {
    $USE_MVND = $false
    $MVN_CMD = $script -replace '^mvnw','mvn'
    break
  }
}

# apply MVNW_REPOURL and calculate MAVEN_HOME
# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
if ($env:MVNW_REPOURL) {
  $MVNW_REPO_PATTERN = if ($USE_MVND) { "/org/apache/maven/" } else { "/maven/mvnd/" }
  $distributionUrl = "$env:MVNW_REPOURL$MVNW_REPO_PATTERN$($distributionUrl -replace '^.*'+$MVNW_REPO_PATTERN,'')"
}
$distributionUrlName = $distributionUrl -replace '^.*/',''
$distributionUrlNameMain = $distributionUrlName -replace '\.[^.]*$','' -replace '-bin$',''
$MAVEN_HOME_PARENT = "$HOME/.m2/wrapper/dists/$distributionUrlNameMain"
if ($env:MAVEN_USER_HOME) {
  $MAVEN_HOME_PARENT = "$env:MAVEN_USER_HOME/wrapper/dists/$distributionUrlNameMain"
}
$MAVEN_HOME_NAME = ([System.Security.Cryptography.MD5]::Create().ComputeHash([byte[]][char[]]$distributionUrl) | ForEach-Object {$_.ToString("x2")}) -join ''
$MAVEN_HOME = "$MAVEN_HOME_PARENT/$MAVEN_HOME_NAME"

if (Test-Path -Path "$MAVEN_HOME" -PathType Container) {
  Write-Verbose "found existing MAVEN_HOME at $MAVEN_HOME"
  Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"
  exit $?
}

if (! $distributionUrlNameMain -or ($distributionUrlName -eq $distributionUrlNameMain)) {
  Write-Error "distributionUrl is not valid, must end with *-bin.zip, but found $distributionUrl"
}

# prepare tmp dir
$TMP_DOWNLOAD_DIR_HOLDER = New-TemporaryFile
$TMP_DOWNLOAD_DIR = New-Item -Itemtype Directory -Path "$TMP_DOWNLOAD_DIR_HOLDER.dir"
$TMP_DOWNLOAD_DIR_HOLDER.Delete() | Out-Null
trap {
  if ($TMP_DOWNLOAD_DIR.Exists) {
    try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
    catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }
  }
}

New-Item -Itemtype Directory -Path "$MAVEN_HOME_PARENT" -Force | Out-Null

# Download and Install Apache Maven
Write-Verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."
Write-Verbose "Downloading from: $distributionUrl"
Write-Verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"

$webclient = New-Object System.Net.WebClient
if ($env:MVNW_USERNAME -and $env:MVNW_PASSWORD) {
  $webclient.Credentials = New-Object System.Net.NetworkCredential($env:MVNW_USERNAME, $env:MVNW_PASSWORD)
}
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
$webclient.DownloadFile($distributionUrl, "$TMP_DOWNLOAD_DIR/$distributionUrlName") | Out-Null

# If specified, validate the SHA-256 sum of the Maven distribution zip file
$distributionSha256Sum = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionSha256Sum
if ($distributionSha256Sum) {
  if ($USE_MVND) {
    Write-Error "Checksum validation is not supported for maven-mvnd. `nPlease disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties."
  }
  Import-Module $PSHOME\Modules\Microsoft.PowerShell.Utility -Function Get-FileHash
  if ((Get-FileHash "$TMP_DOWNLOAD_DIR/$distributionUrlName" -Algorithm SHA256).Hash.ToLower() -ne $distributionSha256Sum) {
    Write-Error "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised. If you updated your Maven version, you need to update the specified distributionSha256Sum property."
  }
}

# unzip and move
Expand-Archive "$TMP_DOWNLOAD_DIR/$distributionUrlName" -DestinationPath "$TMP_DOWNLOAD_DIR" | Out-Null
Rename-Item -Path "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" -NewName $MAVEN_HOME_NAME | Out-Null
try {
  Move-Item -Path "$TMP_DOWNLOAD_DIR/$MAVEN_HOME_NAME" -Destination $MAVEN_HOME_PARENT | Out-Null
} catch {
  if (! (Test-Path -Path "$MAVEN_HOME" -PathType Container)) {
    Write-Error "fail to move MAVEN_HOME"
  }
} finally {
  try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
  catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }
}

Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"
</file>

<file path="paypal-module/pom.xml">
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>pe.edu.certus</groupId>
        <artifactId>cm-backend</artifactId>
        <version>0.0.1-SNAPSHOT</version>
    </parent>

    <artifactId>paypal-module</artifactId>
    <name>paypal-module</name>
    <description>Módulo para la gestión de pagos con PayPal</description>
    <url/>

    <properties>
        <java.version>17</java.version>
        <lombok.version>1.18.32</lombok.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>com.paypal.sdk</groupId>
            <artifactId>checkout-sdk</artifactId>
            <version>2.0.0</version>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>

        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>${lombok.version}</version>
            <optional>true</optional>
        </dependency>

        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <annotationProcessorPaths>
                        <path>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                            <version>${lombok.version}</version>
                        </path>
                    </annotationProcessorPaths>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <excludes>
                        <exclude>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                        </exclude>
                    </excludes>
                </configuration>
            </plugin>
        </plugins>
    </build>


</project>
</file>

<file path="paypal-module/src/main/java/pe/edu/certus/paypalmodule/configuration/annotations/PaypalComponentScanConfig.java">
package pe.edu.certus.paypalmodule.configuration.annotations;

import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;

@Configuration
@ComponentScan(basePackages = "pe.edu.certus.paypalmodule")
public class PaypalComponentScanConfig {
}
</file>

<file path="paypal-module/src/main/java/pe/edu/certus/paypalmodule/configuration/annotations/PaypalEntityScanConfig.java">
package pe.edu.certus.paypalmodule.configuration.annotations;

import org.springframework.boot.autoconfigure.domain.EntityScan;
import org.springframework.context.annotation.Configuration;

@Configuration
@EntityScan(basePackages = "pe.edu.certus.paypalmodule.repository.entity")
public class PaypalEntityScanConfig {
}
</file>

<file path="paypal-module/src/main/java/pe/edu/certus/paypalmodule/configuration/annotations/PaypalPersistenceConfig.java">
package pe.edu.certus.paypalmodule.configuration.annotations;

import org.springframework.context.annotation.Configuration;
import org.springframework.data.jpa.repository.config.EnableJpaRepositories;

@Configuration
@EnableJpaRepositories(basePackages = "pe.edu.certus.paypalmodule.repository")
public class PaypalPersistenceConfig {
}
</file>

<file path="paypal-module/src/main/java/pe/edu/certus/paypalmodule/configuration/sdk/PaypalConfig.java">
package pe.edu.certus.paypalmodule.configuration.sdk;

import com.paypal.core.PayPalEnvironment;
import com.paypal.core.PayPalHttpClient;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class PaypalConfig {

    @Value("${paypal.client-id}")
    private String clientId;

    @Value("${paypal.client-secret}")
    private String clientSecret;

    @Bean
    public PayPalHttpClient payPalHttpClient() {
        PayPalEnvironment environment = new PayPalEnvironment.Sandbox(clientId, clientSecret);
        return new PayPalHttpClient(environment);
    }
}
</file>

<file path="paypal-module/src/main/java/pe/edu/certus/paypalmodule/logic/adapters/driven/PaypalManager.java">
// Archivo MODIFICADO: paypal-module/src/main/java/pe/edu/certus/paypalmodule/logic/adapters/driven/PaypalManager.java
package pe.edu.certus.paypalmodule.logic.adapters.driven;

import com.paypal.http.HttpResponse;
import com.paypal.orders.Order;
import com.paypal.orders.PurchaseUnit;
import org.springframework.stereotype.Service;
import pe.edu.certus.paypalmodule.logic.model.CreateOrderResponseModel;
import pe.edu.certus.paypalmodule.logic.model.PaymentDetailModel;
import pe.edu.certus.paypalmodule.logic.ports.driven.ForManagingPaypal;
import pe.edu.certus.paypalmodule.logic.ports.driven.ForPersistingPaypalPayment;
import pe.edu.certus.paypalmodule.logic.ports.driver.ForGettingWorkPrice;
import pe.edu.certus.paypalmodule.logic.ports.driver.ForPaypal;

import java.io.IOException;
import java.math.BigDecimal;
import java.util.Optional;

@Service
public class PaypalManager implements ForPaypal {

    private final ForManagingPaypal forManagingPaypal;
    private final ForPersistingPaypalPayment forPersistingPaypalPayment;
    private final ForGettingWorkPrice forGettingWorkPrice;

    private static final String CURRENCY_CODE = "USD";

    public PaypalManager(ForManagingPaypal forManagingPaypal,
                         ForPersistingPaypalPayment forPersistingPaypalPayment,
                         ForGettingWorkPrice forGettingWorkPrice) {
        this.forManagingPaypal = forManagingPaypal;
        this.forPersistingPaypalPayment = forPersistingPaypalPayment;
        this.forGettingWorkPrice = forGettingWorkPrice;
    }

    @Override
    public CreateOrderResponseModel createOrderFromWork(Long workId) throws IOException, IllegalArgumentException {
        // 4. Usa el puerto para obtener el precio
        Optional<BigDecimal> amountOptional = forGettingWorkPrice.findWorkPriceById(workId);

        if (amountOptional.isEmpty()) {
            throw new IllegalArgumentException("Work not found with ID: " + workId);
        }

        BigDecimal amount = amountOptional.get();
        if (amount == null || amount.compareTo(BigDecimal.ZERO) <= 0) {
            throw new IllegalArgumentException("Invalid price for work ID: " + workId);
        }

        HttpResponse<Order> response = forManagingPaypal.initiateOrder(amount, CURRENCY_CODE);
        Order order = response.result();

        return CreateOrderResponseModel.builder()
                .orderId(order.id())
                .status(order.status())
                .build();
    }

    @Override
    public PaymentDetailModel captureOrder(String orderId, Long workId, Long buyerUserId) throws IOException {
        // ... (El resto de este método no cambia, ya que no depende del precio del trabajo)
        HttpResponse<Order> response = forManagingPaypal.confirmOrder(orderId);
        Order order = response.result();

        if (order.status() != null && "COMPLETED".equals(order.status())) {
            PurchaseUnit purchaseUnit = order.purchaseUnits().get(0);
            String transactionId = purchaseUnit.payments().captures().get(0).id();
            BigDecimal capturedAmount = new BigDecimal(purchaseUnit.payments().captures().get(0).amount().value());
            String currency = purchaseUnit.payments().captures().get(0).amount().currencyCode();

            PaymentDetailModel paymentDetail = PaymentDetailModel.builder()
                    .orderId(order.id())
                    .transactionId(transactionId)
                    .status(order.status())
                    .amount(capturedAmount)
                    .currency(currency)
                    .payerEmail(order.payer().email())
                    .payerName(order.payer().name().givenName() + " " + order.payer().name().surname())
                    .build();

            return forPersistingPaypalPayment.createOrderAndSavePayment(paymentDetail, workId, buyerUserId);
        } else {
            throw new IOException("Failed to capture payment. Status: " + order.status());
        }
    }
}
</file>

<file path="paypal-module/src/main/java/pe/edu/certus/paypalmodule/logic/adapters/driver/PaypalAdapter.java">
package pe.edu.certus.paypalmodule.logic.adapters.driver;

import lombok.Getter;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.annotation.Secured;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import pe.edu.certus.paypalmodule.logic.model.CreateOrderResponseModel;
import pe.edu.certus.paypalmodule.logic.model.PaymentDetailModel;
import pe.edu.certus.paypalmodule.logic.ports.driver.ForPaypal;

import java.io.IOException;

@RestController
@RequestMapping("/paypal")
public class PaypalAdapter {

    private final ForPaypal forPaypal;

    public PaypalAdapter( ForPaypal forPaypal) {
        this.forPaypal = forPaypal;
    }

    @Secured("Buyer")
    @PostMapping("/create-order")
    public ResponseEntity<?> createOrder(@RequestBody CreateOrderRequest request) {
        try {
            CreateOrderResponseModel response = forPaypal.createOrderFromWork(request.getWorkId());
            return ResponseEntity.ok(response);
        } catch (IOException e) {
            e.printStackTrace();
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Error creating PayPal order: " + e.getMessage());
        } catch (IllegalArgumentException e) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(e.getMessage());
        }
    }

    @Secured("Buyer")
    @PostMapping("/capture-order")
    public ResponseEntity<?> captureOrder(@RequestBody CaptureOrderRequest request) {
        try {
            PaymentDetailModel paymentDetails = forPaypal.captureOrder(
                    request.getOrderId(),
                    request.getWorkId(),
                    request.getBuyerUserId()
            );
            return ResponseEntity.ok(paymentDetails);
        } catch (IOException e) {
            e.printStackTrace();
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Error capturing PayPal payment: " + e.getMessage());
        }
    }

    @Getter
    static class CreateOrderRequest {
        private Long workId;
    }

    @Getter
    static class CaptureOrderRequest {
        private String orderId;
        private Long workId;
        private Long buyerUserId;
    }
}
</file>

<file path="paypal-module/src/main/java/pe/edu/certus/paypalmodule/logic/model/CreateOrderResponseModel.java">
package pe.edu.certus.paypalmodule.logic.model;

import lombok.*;

@Getter
@Setter
@Builder
@AllArgsConstructor
@NoArgsConstructor
public class CreateOrderResponseModel {
    private String orderId;
    private String status;
}
</file>

<file path="paypal-module/src/main/java/pe/edu/certus/paypalmodule/logic/model/PaymentDetailModel.java">
package pe.edu.certus.paypalmodule.logic.model;

import lombok.Builder;
import lombok.Getter;
import lombok.Setter;

import java.math.BigDecimal;

@Getter
@Setter
@Builder
public class PaymentDetailModel {
    private String orderId;
    private String transactionId;
    private String status;
    private BigDecimal amount;
    private String currency;
    private String payerEmail;
    private String payerName;
}
</file>

<file path="paypal-module/src/main/java/pe/edu/certus/paypalmodule/logic/ports/driven/ForManagingPaypal.java">
package pe.edu.certus.paypalmodule.logic.ports.driven;

import com.paypal.http.HttpResponse;
import com.paypal.orders.Order;

import java.io.IOException;
import java.math.BigDecimal;

public interface ForManagingPaypal {
    HttpResponse<Order> initiateOrder(BigDecimal amount, String currency) throws IOException;
    HttpResponse<Order> confirmOrder(String orderId) throws IOException;
}
</file>

<file path="paypal-module/src/main/java/pe/edu/certus/paypalmodule/logic/ports/driven/ForPersistingPaypalPayment.java">
package pe.edu.certus.paypalmodule.logic.ports.driven;

import pe.edu.certus.paypalmodule.logic.model.PaymentDetailModel;

public interface ForPersistingPaypalPayment {
    PaymentDetailModel createOrderAndSavePayment(PaymentDetailModel paymentDetail, Long workId, Long buyerUserId);
}
</file>

<file path="paypal-module/src/main/java/pe/edu/certus/paypalmodule/logic/ports/driver/ForGettingWorkPrice.java">
package pe.edu.certus.paypalmodule.logic.ports.driver;

import java.math.BigDecimal;
import java.util.Optional;

public interface ForGettingWorkPrice {
    Optional< BigDecimal > findWorkPriceById( Long workId);

}
</file>

<file path="paypal-module/src/main/java/pe/edu/certus/paypalmodule/logic/ports/driver/ForPaypal.java">
package pe.edu.certus.paypalmodule.logic.ports.driver;

import pe.edu.certus.paypalmodule.logic.model.CreateOrderResponseModel;
import pe.edu.certus.paypalmodule.logic.model.PaymentDetailModel;

import java.io.IOException;

public interface ForPaypal {
    CreateOrderResponseModel createOrderFromWork(Long workId) throws IOException, IllegalArgumentException;
    PaymentDetailModel captureOrder(String orderId, Long workId, Long buyerUserId) throws IOException;
}
</file>

<file path="paypal-module/src/main/java/pe/edu/certus/paypalmodule/PaypalModuleApplication.java">
package pe.edu.certus.paypalmodule;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class PaypalModuleApplication {

    public static void main( String[] args ) {
        SpringApplication.run( PaypalModuleApplication.class, args );
    }

}
</file>

<file path="paypal-module/src/main/java/pe/edu/certus/paypalmodule/repository/adapters/driver/PaypalPersistenceProxy.java">
package pe.edu.certus.paypalmodule.repository.adapters.driver;

import jakarta.transaction.Transactional;
import org.springframework.stereotype.Service;
import pe.edu.certus.paypalmodule.logic.model.PaymentDetailModel;
import pe.edu.certus.paypalmodule.logic.ports.driven.ForPersistingPaypalPayment;
import pe.edu.certus.paypalmodule.repository.entity.OrderEntity;
import pe.edu.certus.paypalmodule.repository.entity.PaypalPaymentEntity;
import pe.edu.certus.paypalmodule.repository.ports.driver.ForQueryingOrders;
import pe.edu.certus.paypalmodule.repository.ports.driver.ForQueryingPaypalPayments;
import pe.edu.certus.paypalmodule.repository.ports.mapper.ForBridgingPaypalPayment;

@Service
public class PaypalPersistenceProxy implements ForPersistingPaypalPayment {

    private final ForQueryingOrders forQueryingOrders;
    private final ForQueryingPaypalPayments forQueryingPaypalPayments;
    private final ForBridgingPaypalPayment forBridgingPaypalPayment;

    public PaypalPersistenceProxy(ForQueryingOrders forQueryingOrders,
                                  ForQueryingPaypalPayments forQueryingPaypalPayments,
                                  ForBridgingPaypalPayment forBridgingPaypalPayment) {
        this.forQueryingOrders = forQueryingOrders;
        this.forQueryingPaypalPayments = forQueryingPaypalPayments;
        this.forBridgingPaypalPayment = forBridgingPaypalPayment;
    }

    @Override
    @Transactional
    public PaymentDetailModel createOrderAndSavePayment(PaymentDetailModel paymentDetail, Long workId, Long buyerUserId) {
        OrderEntity newOrder = OrderEntity.builder()
                .idUser(buyerUserId)
                .build();
        OrderEntity savedOrder = forQueryingOrders.save(newOrder);
        Long internalOrderId = savedOrder.getOrderId();

        System.out.println("Orden interna creada con ID: " + internalOrderId);

        PaypalPaymentEntity paymentEntity = forBridgingPaypalPayment.toPersistence(paymentDetail, internalOrderId, "Sale");
        forQueryingPaypalPayments.save(paymentEntity);

        System.out.println("Pago de PayPal con transaction ID " + paymentEntity.getPaypalPaymentTransactionId() + " guardado para la orden " + internalOrderId);

        return paymentDetail;
    }
}
</file>

<file path="paypal-module/src/main/java/pe/edu/certus/paypalmodule/repository/adapters/driver/PaypalServiceProxy.java">
package pe.edu.certus.paypalmodule.repository.adapters.driver;

import com.paypal.core.PayPalHttpClient;
import com.paypal.http.HttpResponse;
import com.paypal.orders.*;
import org.springframework.stereotype.Service;
import pe.edu.certus.paypalmodule.logic.ports.driven.ForManagingPaypal;

import java.io.IOException;
import java.math.BigDecimal;
import java.util.List;
import java.util.Optional;

@Service
public class PaypalServiceProxy implements ForManagingPaypal {

    private final PayPalHttpClient client;

    public PaypalServiceProxy(PayPalHttpClient client) {
        this.client = client;
    }

    @Override
    public HttpResponse<Order> initiateOrder(BigDecimal amount, String currency) throws IOException {
        OrdersCreateRequest request = new OrdersCreateRequest();
        request.prefer("return=representation");
        request.requestBody(buildRequestBody(amount, currency));

        HttpResponse<Order> response = client.execute(request);

        Order order = response.result();
        Optional<LinkDescription> approveLink = order.links().stream()
                .filter(link -> "approve".equals(link.rel()))
                .findFirst();

        if (approveLink.isPresent()) {
            System.out.println("========================================================================");
            System.out.println("ENLACE DE APROBACIÓN DE PAYPAL (PEGAR EN EL NAVEGADOR):");
            System.out.println(approveLink.get().href());
            System.out.println("========================================================================");
        } else {
            System.out.println("ADVERTENCIA: No se encontró el enlace de aprobación en la respuesta de PayPal.");
        }

        return response;
    }

    @Override
    public HttpResponse<Order> confirmOrder(String orderId) throws IOException {
        OrdersCaptureRequest request = new OrdersCaptureRequest(orderId);
        request.requestBody(new OrderRequest());
        return client.execute(request);
    }

    private OrderRequest buildRequestBody(BigDecimal amount, String currency) {
        OrderRequest orderRequest = new OrderRequest();
        orderRequest.checkoutPaymentIntent("CAPTURE");

        AmountWithBreakdown amountWithBreakdown = new AmountWithBreakdown()
                .currencyCode(currency)
                .value(amount.toPlainString());

        PurchaseUnitRequest purchaseUnitRequest = new PurchaseUnitRequest()
                .amountWithBreakdown(amountWithBreakdown);

        orderRequest.purchaseUnits(List.of(purchaseUnitRequest));

        ApplicationContext applicationContext = new ApplicationContext()
                .brandName("CertUs Marketplace")
                .returnUrl("https://example.com/payment/success")
                .cancelUrl("https://example.com/payment/cancel");
        orderRequest.applicationContext(applicationContext);

        return orderRequest;
    }
}
</file>

<file path="paypal-module/src/main/java/pe/edu/certus/paypalmodule/repository/adapters/driver/WorkPriceManager.java">
package pe.edu.certus.paypalmodule.repository.adapters.driver;

import org.springframework.stereotype.Service;
import pe.edu.certus.paypalmodule.logic.ports.driver.ForGettingWorkPrice;
import pe.edu.certus.paypalmodule.repository.entity.WorkPriceEntity;
import pe.edu.certus.paypalmodule.repository.ports.driver.ForQueryingWorkInPaypal;

import java.math.BigDecimal;
import java.util.Optional;

@Service
public class WorkPriceManager implements ForGettingWorkPrice {

    private final ForQueryingWorkInPaypal forQueryingWorkPrice;

    public WorkPriceManager(ForQueryingWorkInPaypal forQueryingWorkPrice) {
        this.forQueryingWorkPrice = forQueryingWorkPrice;
    }

    @Override
    public Optional<BigDecimal> findWorkPriceById(Long workId) {
        return forQueryingWorkPrice.findById(workId)
                .map(WorkPriceEntity::getWorkPrice);
    }
}
</file>

<file path="paypal-module/src/main/java/pe/edu/certus/paypalmodule/repository/adapters/mapper/PaypalPersistenceMapper.java">
package pe.edu.certus.paypalmodule.repository.adapters.mapper;

import org.springframework.stereotype.Component;
import pe.edu.certus.paypalmodule.logic.model.PaymentDetailModel;
import pe.edu.certus.paypalmodule.repository.entity.PaypalPaymentEntity;
import pe.edu.certus.paypalmodule.repository.ports.mapper.ForBridgingPaypalPayment;

@Component
public class PaypalPersistenceMapper implements ForBridgingPaypalPayment {

    @Override
    public PaypalPaymentEntity toPersistence(PaymentDetailModel paymentDetailModel, Long internalOrderId, String transactionType) {
        return PaypalPaymentEntity.builder()
                .idInternalOrder(internalOrderId)
                .paypalPaymentPayerEmail(paymentDetailModel.getPayerEmail())
                .paypalPaymentStatus(paymentDetailModel.getStatus())
                .paypalPaymentTransactionId(paymentDetailModel.getTransactionId())
                .paypalPaymentAmount(paymentDetailModel.getAmount())
                .paypalPaymentCurrency(paymentDetailModel.getCurrency())
                .paypalPaymentTransactionType(transactionType)
                .build();
    }
}
</file>

<file path="paypal-module/src/main/java/pe/edu/certus/paypalmodule/repository/entity/OrderEntity.java">
package pe.edu.certus.paypalmodule.repository.entity;

import jakarta.persistence.*;
import lombok.*;

import java.time.LocalDateTime;

@Entity
@Table(name = "orders")
@Getter
@Setter
@Builder
@AllArgsConstructor
@NoArgsConstructor
public class OrderEntity {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "order_id")
    private Long orderId;

    @Column(name = "id_user", nullable = false)
    private Long idUser;

    @Column(name = "order_date")
    private LocalDateTime orderDate;

    @PrePersist
    protected void onCreate() {
        orderDate = LocalDateTime.now();
    }
}
</file>

<file path="paypal-module/src/main/java/pe/edu/certus/paypalmodule/repository/entity/PaypalPaymentEntity.java">
package pe.edu.certus.paypalmodule.repository.entity;

import jakarta.persistence.*;
import lombok.*;

import java.math.BigDecimal;
import java.time.LocalDateTime;

@Entity
@Table(name = "paypal_payments")
@Getter
@Setter
@Builder
@AllArgsConstructor
@NoArgsConstructor
public class PaypalPaymentEntity {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "paypal_payment_id")
    private Long paypalPaymentId;

    @Column(name = "id_internal_order", nullable = false)
    private Long idInternalOrder;

    @Column(name = "paypal_payment_payer_email", length = 255)
    private String paypalPaymentPayerEmail;

    @Column(name = "paypal_payment_status", length = 50, nullable = false)
    private String paypalPaymentStatus;

    @Column(name = "paypal_payment_transaction_id", length = 255, unique = true)
    private String paypalPaymentTransactionId;

    @Column(name = "paypal_payment_amount", nullable = false, precision = 10, scale = 2)
    private BigDecimal paypalPaymentAmount;

    @Column(name = "paypal_payment_currency", length = 3, nullable = false)
    private String paypalPaymentCurrency;

    @Column(name = "paypal_payment_transaction_type", length = 50)
    private String paypalPaymentTransactionType;

    @Column(name = "paypal_payment_created_at", updatable = false)
    private LocalDateTime paypalPaymentCreatedAt;

    @Column(name = "paypal_payment_updated_at")
    private LocalDateTime paypalPaymentUpdatedAt;

    @PrePersist
    protected void onCreate() {
        paypalPaymentCreatedAt = LocalDateTime.now();
        paypalPaymentUpdatedAt = LocalDateTime.now();
    }

    @PreUpdate
    protected void onUpdate() {
        paypalPaymentUpdatedAt = LocalDateTime.now();
    }
}
</file>

<file path="paypal-module/src/main/java/pe/edu/certus/paypalmodule/repository/entity/WorkPriceEntity.java">
package pe.edu.certus.paypalmodule.repository.entity;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import lombok.Getter;
import org.hibernate.annotations.Immutable;

import java.math.BigDecimal;

@Entity
@Table(name = "works")
@Immutable
@Getter
public class WorkPriceEntity {

    @Id
    @Column(name = "work_id")
    private Long id;

    @Column(name = "work_price")
    private BigDecimal workPrice;

}
</file>

<file path="paypal-module/src/main/java/pe/edu/certus/paypalmodule/repository/ports/driver/ForQueryingOrders.java">
package pe.edu.certus.paypalmodule.repository.ports.driver;

import org.springframework.data.jpa.repository.JpaRepository;
import pe.edu.certus.paypalmodule.repository.entity.OrderEntity;

public interface ForQueryingOrders extends JpaRepository< OrderEntity, Long> {
}
</file>

<file path="paypal-module/src/main/java/pe/edu/certus/paypalmodule/repository/ports/driver/ForQueryingPaypalPayments.java">
package pe.edu.certus.paypalmodule.repository.ports.driver;

import org.springframework.data.jpa.repository.JpaRepository;
import pe.edu.certus.paypalmodule.repository.entity.PaypalPaymentEntity;

public interface ForQueryingPaypalPayments extends JpaRepository<PaypalPaymentEntity, Long> {}
</file>

<file path="paypal-module/src/main/java/pe/edu/certus/paypalmodule/repository/ports/driver/ForQueryingWorkInPaypal.java">
package pe.edu.certus.paypalmodule.repository.ports.driver;

import org.springframework.data.jpa.repository.JpaRepository;
import pe.edu.certus.paypalmodule.repository.entity.WorkPriceEntity;

public interface ForQueryingWorkInPaypal extends JpaRepository< WorkPriceEntity, Long> {
}
</file>

<file path="paypal-module/src/main/java/pe/edu/certus/paypalmodule/repository/ports/mapper/ForBridgingPaypalPayment.java">
package pe.edu.certus.paypalmodule.repository.ports.mapper;

import pe.edu.certus.paypalmodule.logic.model.PaymentDetailModel;
import pe.edu.certus.paypalmodule.repository.entity.PaypalPaymentEntity;

public interface ForBridgingPaypalPayment {
    PaypalPaymentEntity toPersistence(PaymentDetailModel paymentDetailModel, Long internalOrderId, String transactionType);
}
</file>

<file path=".gitattributes">
/mvnw text eol=lf
*.cmd text eol=crlf
</file>

<file path=".github/ISSUE_TEMPLATE/bug-report.yml">
name: "Reporte de Error 🐞"
description: "Reporta un error para ayudarnos a mejorar CertUs Marketplace."
labels: ["bug"]
body:
  - type: markdown
    attributes:
      value: |
        ¡Gracias por ayudarnos a mejorar CertUs! Por favor, completa las siguientes secciones para describir el error:

  - type: textarea
    id: descripcion
    attributes:
      label: "Descripción del Error"
      placeholder: "Al hacer clic aquí, ocurre lo siguiente..."
    validations:
      required: true

  - type: textarea
    id: pasos
    attributes:
      label: "Pasos para Reproducir el Error"
      placeholder: |
        1. Ir a la página X
        2. Hacer clic en el botón Y
        3. Observar el error
    validations:
      required: true

  - type: textarea
    id: esperado
    attributes:
      label: "Comportamiento Esperado"
      placeholder: "Esperaba que ocurriera..."

  - type: textarea
    id: capturas
    attributes:
      label: "Capturas de Pantalla/Video (Opcional)"
      placeholder: "Adjunta capturas de pantalla o videos para ilustrar el problema."

  - type: dropdown
    id: asignacion
    attributes:
      label: "¿Te gustaría trabajar en la solución de este error?"
      options:
        - "Sí, me gustaría ayudar."
        - "No, solo reporto el error."

  - type: markdown
    attributes:
      value: |
        ### Información del Dispositivo
        Por favor, proporciona la siguiente información sobre el dispositivo donde se produjo el error:

  - type: input
    id: so_escritorio
    attributes:
      label: "Sistema Operativo (Escritorio)"
      placeholder: "Ej: Windows 11, macOS Monterey"

  - type: input
    id: navegador_escritorio
    attributes:
      label: "Navegador (Escritorio)"
      placeholder: "Ej: Google Chrome, Mozilla Firefox, Safari"

  - type: input
    id: version_escritorio
    attributes:
      label: "Versión del Navegador (Escritorio)"
      placeholder: "Ej: 96.0.4664.110"

  - type: input
    id: so_movil
    attributes:
      label: "Sistema Operativo (Móvil)"
      placeholder: "Ej: iOS 15, Android 12"

  - type: input
    id: navegador_movil
    attributes:
      label: "Navegador (Móvil)"
      placeholder: "Ej: Safari, Chrome"

  - type: input
    id: version_movil
    attributes:
      label: "Versión del Navegador (Móvil)"
      placeholder: "Ej: 15.0"

  - type: textarea
    id: contexto
    attributes:
      label: "Contexto Adicional (Opcional)"
      placeholder: "Agrega cualquier información adicional que consideres relevante."

  - type: markdown
    attributes:
      value: |
        ¡Muchas gracias por tu reporte! Lo revisaremos a la brevedad.  
        El equipo de CertUs te agradece tu colaboración.
</file>

<file path=".github/ISSUE_TEMPLATE/feature_request.yml">
name: Solicitar nueva característica ✨
description: Sugiere o propone una nueva funcionalidad para mejorar CertUs Marketplace.
labels: ["enhancement"]
body:
  - type: markdown
    attributes:
      value: |
        ¡Gracias por tu interés en mejorar CertUs! Por favor, completa las siguientes secciones para describir la nueva característica que propones.

  - type: textarea
    id: descripcion
    attributes:
      label: "Descripción de la característica"
      placeholder: "Un botón en la pantalla X que permita hacer Y"
    validations:
      required: true

  - type: textarea
    id: motivacion
    attributes:
      label: "¿Por qué debería implementarse?"
      placeholder: "Permitirá hacer Y, lo cual es necesario para Z"

  - type: textarea
    id: contexto
    attributes:
      label: "Contexto adicional"
      placeholder: "Agrega cualquier otro contexto, ejemplos o capturas de pantalla que ayuden a entender mejor la propuesta."

  - type: dropdown
    id: asignacion
    attributes:
      label: "¿Te gustaría trabajar en esta propuesta?"
      options:
        - "Sí, me gustaría ayudar."
        - "No, solo propongo la idea."

  - type: markdown
    attributes:
      value: |
        ¡Gracias por tu sugerencia! Evaluaremos su viabilidad y utilidad junto al equipo de CertUs.
</file>

<file path=".mvn/wrapper/maven-wrapper.properties">
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
wrapperVersion=3.3.2
distributionType=only-script
distributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.9.9/apache-maven-3.9.9-bin.zip
</file>

<file path="bootloader/.gitattributes">
/mvnw text eol=lf
*.cmd text eol=crlf
</file>

<file path="bootloader/.gitignore">
HELP.md
target/
!.mvn/wrapper/maven-wrapper.jar
!**/src/main/**/target/
!**/src/test/**/target/

### STS ###
.apt_generated
.classpath
.factorypath
.project
.settings
.springBeans
.sts4-cache

### IntelliJ IDEA ###
.idea
*.iws
*.iml
*.ipr

### NetBeans ###
/nbproject/private/
/nbbuild/
/dist/
/nbdist/
/.nb-gradle/
build/
!**/src/main/**/build/
!**/src/test/**/build/

### VS Code ###
.vscode/
</file>

<file path="bootloader/.mvn/wrapper/maven-wrapper.properties">
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
wrapperVersion=3.3.2
distributionType=only-script
distributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.9.9/apache-maven-3.9.9-bin.zip
</file>

<file path="bootloader/mvnw">
#!/bin/sh
# ----------------------------------------------------------------------------
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
# ----------------------------------------------------------------------------

# ----------------------------------------------------------------------------
# Apache Maven Wrapper startup batch script, version 3.3.2
#
# Optional ENV vars
# -----------------
#   JAVA_HOME - location of a JDK home dir, required when download maven via java source
#   MVNW_REPOURL - repo url base for downloading maven distribution
#   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
#   MVNW_VERBOSE - true: enable verbose log; debug: trace the mvnw script; others: silence the output
# ----------------------------------------------------------------------------

set -euf
[ "${MVNW_VERBOSE-}" != debug ] || set -x

# OS specific support.
native_path() { printf %s\\n "$1"; }
case "$(uname)" in
CYGWIN* | MINGW*)
  [ -z "${JAVA_HOME-}" ] || JAVA_HOME="$(cygpath --unix "$JAVA_HOME")"
  native_path() { cygpath --path --windows "$1"; }
  ;;
esac

# set JAVACMD and JAVACCMD
set_java_home() {
  # For Cygwin and MinGW, ensure paths are in Unix format before anything is touched
  if [ -n "${JAVA_HOME-}" ]; then
    if [ -x "$JAVA_HOME/jre/sh/java" ]; then
      # IBM's JDK on AIX uses strange locations for the executables
      JAVACMD="$JAVA_HOME/jre/sh/java"
      JAVACCMD="$JAVA_HOME/jre/sh/javac"
    else
      JAVACMD="$JAVA_HOME/bin/java"
      JAVACCMD="$JAVA_HOME/bin/javac"

      if [ ! -x "$JAVACMD" ] || [ ! -x "$JAVACCMD" ]; then
        echo "The JAVA_HOME environment variable is not defined correctly, so mvnw cannot run." >&2
        echo "JAVA_HOME is set to \"$JAVA_HOME\", but \"\$JAVA_HOME/bin/java\" or \"\$JAVA_HOME/bin/javac\" does not exist." >&2
        return 1
      fi
    fi
  else
    JAVACMD="$(
      'set' +e
      'unset' -f command 2>/dev/null
      'command' -v java
    )" || :
    JAVACCMD="$(
      'set' +e
      'unset' -f command 2>/dev/null
      'command' -v javac
    )" || :

    if [ ! -x "${JAVACMD-}" ] || [ ! -x "${JAVACCMD-}" ]; then
      echo "The java/javac command does not exist in PATH nor is JAVA_HOME set, so mvnw cannot run." >&2
      return 1
    fi
  fi
}

# hash string like Java String::hashCode
hash_string() {
  str="${1:-}" h=0
  while [ -n "$str" ]; do
    char="${str%"${str#?}"}"
    h=$(((h * 31 + $(LC_CTYPE=C printf %d "'$char")) % 4294967296))
    str="${str#?}"
  done
  printf %x\\n $h
}

verbose() { :; }
[ "${MVNW_VERBOSE-}" != true ] || verbose() { printf %s\\n "${1-}"; }

die() {
  printf %s\\n "$1" >&2
  exit 1
}

trim() {
  # MWRAPPER-139:
  #   Trims trailing and leading whitespace, carriage returns, tabs, and linefeeds.
  #   Needed for removing poorly interpreted newline sequences when running in more
  #   exotic environments such as mingw bash on Windows.
  printf "%s" "${1}" | tr -d '[:space:]'
}

# parse distributionUrl and optional distributionSha256Sum, requires .mvn/wrapper/maven-wrapper.properties
while IFS="=" read -r key value; do
  case "${key-}" in
  distributionUrl) distributionUrl=$(trim "${value-}") ;;
  distributionSha256Sum) distributionSha256Sum=$(trim "${value-}") ;;
  esac
done <"${0%/*}/.mvn/wrapper/maven-wrapper.properties"
[ -n "${distributionUrl-}" ] || die "cannot read distributionUrl property in ${0%/*}/.mvn/wrapper/maven-wrapper.properties"

case "${distributionUrl##*/}" in
maven-mvnd-*bin.*)
  MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/
  case "${PROCESSOR_ARCHITECTURE-}${PROCESSOR_ARCHITEW6432-}:$(uname -a)" in
  *AMD64:CYGWIN* | *AMD64:MINGW*) distributionPlatform=windows-amd64 ;;
  :Darwin*x86_64) distributionPlatform=darwin-amd64 ;;
  :Darwin*arm64) distributionPlatform=darwin-aarch64 ;;
  :Linux*x86_64*) distributionPlatform=linux-amd64 ;;
  *)
    echo "Cannot detect native platform for mvnd on $(uname)-$(uname -m), use pure java version" >&2
    distributionPlatform=linux-amd64
    ;;
  esac
  distributionUrl="${distributionUrl%-bin.*}-$distributionPlatform.zip"
  ;;
maven-mvnd-*) MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/ ;;
*) MVN_CMD="mvn${0##*/mvnw}" _MVNW_REPO_PATTERN=/org/apache/maven/ ;;
esac

# apply MVNW_REPOURL and calculate MAVEN_HOME
# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
[ -z "${MVNW_REPOURL-}" ] || distributionUrl="$MVNW_REPOURL$_MVNW_REPO_PATTERN${distributionUrl#*"$_MVNW_REPO_PATTERN"}"
distributionUrlName="${distributionUrl##*/}"
distributionUrlNameMain="${distributionUrlName%.*}"
distributionUrlNameMain="${distributionUrlNameMain%-bin}"
MAVEN_USER_HOME="${MAVEN_USER_HOME:-${HOME}/.m2}"
MAVEN_HOME="${MAVEN_USER_HOME}/wrapper/dists/${distributionUrlNameMain-}/$(hash_string "$distributionUrl")"

exec_maven() {
  unset MVNW_VERBOSE MVNW_USERNAME MVNW_PASSWORD MVNW_REPOURL || :
  exec "$MAVEN_HOME/bin/$MVN_CMD" "$@" || die "cannot exec $MAVEN_HOME/bin/$MVN_CMD"
}

if [ -d "$MAVEN_HOME" ]; then
  verbose "found existing MAVEN_HOME at $MAVEN_HOME"
  exec_maven "$@"
fi

case "${distributionUrl-}" in
*?-bin.zip | *?maven-mvnd-?*-?*.zip) ;;
*) die "distributionUrl is not valid, must match *-bin.zip or maven-mvnd-*.zip, but found '${distributionUrl-}'" ;;
esac

# prepare tmp dir
if TMP_DOWNLOAD_DIR="$(mktemp -d)" && [ -d "$TMP_DOWNLOAD_DIR" ]; then
  clean() { rm -rf -- "$TMP_DOWNLOAD_DIR"; }
  trap clean HUP INT TERM EXIT
else
  die "cannot create temp dir"
fi

mkdir -p -- "${MAVEN_HOME%/*}"

# Download and Install Apache Maven
verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."
verbose "Downloading from: $distributionUrl"
verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"

# select .zip or .tar.gz
if ! command -v unzip >/dev/null; then
  distributionUrl="${distributionUrl%.zip}.tar.gz"
  distributionUrlName="${distributionUrl##*/}"
fi

# verbose opt
__MVNW_QUIET_WGET=--quiet __MVNW_QUIET_CURL=--silent __MVNW_QUIET_UNZIP=-q __MVNW_QUIET_TAR=''
[ "${MVNW_VERBOSE-}" != true ] || __MVNW_QUIET_WGET='' __MVNW_QUIET_CURL='' __MVNW_QUIET_UNZIP='' __MVNW_QUIET_TAR=v

# normalize http auth
case "${MVNW_PASSWORD:+has-password}" in
'') MVNW_USERNAME='' MVNW_PASSWORD='' ;;
has-password) [ -n "${MVNW_USERNAME-}" ] || MVNW_USERNAME='' MVNW_PASSWORD='' ;;
esac

if [ -z "${MVNW_USERNAME-}" ] && command -v wget >/dev/null; then
  verbose "Found wget ... using wget"
  wget ${__MVNW_QUIET_WGET:+"$__MVNW_QUIET_WGET"} "$distributionUrl" -O "$TMP_DOWNLOAD_DIR/$distributionUrlName" || die "wget: Failed to fetch $distributionUrl"
elif [ -z "${MVNW_USERNAME-}" ] && command -v curl >/dev/null; then
  verbose "Found curl ... using curl"
  curl ${__MVNW_QUIET_CURL:+"$__MVNW_QUIET_CURL"} -f -L -o "$TMP_DOWNLOAD_DIR/$distributionUrlName" "$distributionUrl" || die "curl: Failed to fetch $distributionUrl"
elif set_java_home; then
  verbose "Falling back to use Java to download"
  javaSource="$TMP_DOWNLOAD_DIR/Downloader.java"
  targetZip="$TMP_DOWNLOAD_DIR/$distributionUrlName"
  cat >"$javaSource" <<-END
	public class Downloader extends java.net.Authenticator
	{
	  protected java.net.PasswordAuthentication getPasswordAuthentication()
	  {
	    return new java.net.PasswordAuthentication( System.getenv( "MVNW_USERNAME" ), System.getenv( "MVNW_PASSWORD" ).toCharArray() );
	  }
	  public static void main( String[] args ) throws Exception
	  {
	    setDefault( new Downloader() );
	    java.nio.file.Files.copy( java.net.URI.create( args[0] ).toURL().openStream(), java.nio.file.Paths.get( args[1] ).toAbsolutePath().normalize() );
	  }
	}
	END
  # For Cygwin/MinGW, switch paths to Windows format before running javac and java
  verbose " - Compiling Downloader.java ..."
  "$(native_path "$JAVACCMD")" "$(native_path "$javaSource")" || die "Failed to compile Downloader.java"
  verbose " - Running Downloader.java ..."
  "$(native_path "$JAVACMD")" -cp "$(native_path "$TMP_DOWNLOAD_DIR")" Downloader "$distributionUrl" "$(native_path "$targetZip")"
fi

# If specified, validate the SHA-256 sum of the Maven distribution zip file
if [ -n "${distributionSha256Sum-}" ]; then
  distributionSha256Result=false
  if [ "$MVN_CMD" = mvnd.sh ]; then
    echo "Checksum validation is not supported for maven-mvnd." >&2
    echo "Please disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2
    exit 1
  elif command -v sha256sum >/dev/null; then
    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | sha256sum -c >/dev/null 2>&1; then
      distributionSha256Result=true
    fi
  elif command -v shasum >/dev/null; then
    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | shasum -a 256 -c >/dev/null 2>&1; then
      distributionSha256Result=true
    fi
  else
    echo "Checksum validation was requested but neither 'sha256sum' or 'shasum' are available." >&2
    echo "Please install either command, or disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2
    exit 1
  fi
  if [ $distributionSha256Result = false ]; then
    echo "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised." >&2
    echo "If you updated your Maven version, you need to update the specified distributionSha256Sum property." >&2
    exit 1
  fi
fi

# unzip and move
if command -v unzip >/dev/null; then
  unzip ${__MVNW_QUIET_UNZIP:+"$__MVNW_QUIET_UNZIP"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -d "$TMP_DOWNLOAD_DIR" || die "failed to unzip"
else
  tar xzf${__MVNW_QUIET_TAR:+"$__MVNW_QUIET_TAR"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -C "$TMP_DOWNLOAD_DIR" || die "failed to untar"
fi
printf %s\\n "$distributionUrl" >"$TMP_DOWNLOAD_DIR/$distributionUrlNameMain/mvnw.url"
mv -- "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" "$MAVEN_HOME" || [ -d "$MAVEN_HOME" ] || die "fail to move MAVEN_HOME"

clean || :
exec_maven "$@"
</file>

<file path="bootloader/mvnw.cmd">
<# : batch portion
@REM ----------------------------------------------------------------------------
@REM Licensed to the Apache Software Foundation (ASF) under one
@REM or more contributor license agreements.  See the NOTICE file
@REM distributed with this work for additional information
@REM regarding copyright ownership.  The ASF licenses this file
@REM to you under the Apache License, Version 2.0 (the
@REM "License"); you may not use this file except in compliance
@REM with the License.  You may obtain a copy of the License at
@REM
@REM    http://www.apache.org/licenses/LICENSE-2.0
@REM
@REM Unless required by applicable law or agreed to in writing,
@REM software distributed under the License is distributed on an
@REM "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
@REM KIND, either express or implied.  See the License for the
@REM specific language governing permissions and limitations
@REM under the License.
@REM ----------------------------------------------------------------------------

@REM ----------------------------------------------------------------------------
@REM Apache Maven Wrapper startup batch script, version 3.3.2
@REM
@REM Optional ENV vars
@REM   MVNW_REPOURL - repo url base for downloading maven distribution
@REM   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
@REM   MVNW_VERBOSE - true: enable verbose log; others: silence the output
@REM ----------------------------------------------------------------------------

@IF "%__MVNW_ARG0_NAME__%"=="" (SET __MVNW_ARG0_NAME__=%~nx0)
@SET __MVNW_CMD__=
@SET __MVNW_ERROR__=
@SET __MVNW_PSMODULEP_SAVE=%PSModulePath%
@SET PSModulePath=
@FOR /F "usebackq tokens=1* delims==" %%A IN (`powershell -noprofile "& {$scriptDir='%~dp0'; $script='%__MVNW_ARG0_NAME__%'; icm -ScriptBlock ([Scriptblock]::Create((Get-Content -Raw '%~f0'))) -NoNewScope}"`) DO @(
  IF "%%A"=="MVN_CMD" (set __MVNW_CMD__=%%B) ELSE IF "%%B"=="" (echo %%A) ELSE (echo %%A=%%B)
)
@SET PSModulePath=%__MVNW_PSMODULEP_SAVE%
@SET __MVNW_PSMODULEP_SAVE=
@SET __MVNW_ARG0_NAME__=
@SET MVNW_USERNAME=
@SET MVNW_PASSWORD=
@IF NOT "%__MVNW_CMD__%"=="" (%__MVNW_CMD__% %*)
@echo Cannot start maven from wrapper >&2 && exit /b 1
@GOTO :EOF
: end batch / begin powershell #>

$ErrorActionPreference = "Stop"
if ($env:MVNW_VERBOSE -eq "true") {
  $VerbosePreference = "Continue"
}

# calculate distributionUrl, requires .mvn/wrapper/maven-wrapper.properties
$distributionUrl = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionUrl
if (!$distributionUrl) {
  Write-Error "cannot read distributionUrl property in $scriptDir/.mvn/wrapper/maven-wrapper.properties"
}

switch -wildcard -casesensitive ( $($distributionUrl -replace '^.*/','') ) {
  "maven-mvnd-*" {
    $USE_MVND = $true
    $distributionUrl = $distributionUrl -replace '-bin\.[^.]*$',"-windows-amd64.zip"
    $MVN_CMD = "mvnd.cmd"
    break
  }
  default {
    $USE_MVND = $false
    $MVN_CMD = $script -replace '^mvnw','mvn'
    break
  }
}

# apply MVNW_REPOURL and calculate MAVEN_HOME
# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
if ($env:MVNW_REPOURL) {
  $MVNW_REPO_PATTERN = if ($USE_MVND) { "/org/apache/maven/" } else { "/maven/mvnd/" }
  $distributionUrl = "$env:MVNW_REPOURL$MVNW_REPO_PATTERN$($distributionUrl -replace '^.*'+$MVNW_REPO_PATTERN,'')"
}
$distributionUrlName = $distributionUrl -replace '^.*/',''
$distributionUrlNameMain = $distributionUrlName -replace '\.[^.]*$','' -replace '-bin$',''
$MAVEN_HOME_PARENT = "$HOME/.m2/wrapper/dists/$distributionUrlNameMain"
if ($env:MAVEN_USER_HOME) {
  $MAVEN_HOME_PARENT = "$env:MAVEN_USER_HOME/wrapper/dists/$distributionUrlNameMain"
}
$MAVEN_HOME_NAME = ([System.Security.Cryptography.MD5]::Create().ComputeHash([byte[]][char[]]$distributionUrl) | ForEach-Object {$_.ToString("x2")}) -join ''
$MAVEN_HOME = "$MAVEN_HOME_PARENT/$MAVEN_HOME_NAME"

if (Test-Path -Path "$MAVEN_HOME" -PathType Container) {
  Write-Verbose "found existing MAVEN_HOME at $MAVEN_HOME"
  Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"
  exit $?
}

if (! $distributionUrlNameMain -or ($distributionUrlName -eq $distributionUrlNameMain)) {
  Write-Error "distributionUrl is not valid, must end with *-bin.zip, but found $distributionUrl"
}

# prepare tmp dir
$TMP_DOWNLOAD_DIR_HOLDER = New-TemporaryFile
$TMP_DOWNLOAD_DIR = New-Item -Itemtype Directory -Path "$TMP_DOWNLOAD_DIR_HOLDER.dir"
$TMP_DOWNLOAD_DIR_HOLDER.Delete() | Out-Null
trap {
  if ($TMP_DOWNLOAD_DIR.Exists) {
    try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
    catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }
  }
}

New-Item -Itemtype Directory -Path "$MAVEN_HOME_PARENT" -Force | Out-Null

# Download and Install Apache Maven
Write-Verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."
Write-Verbose "Downloading from: $distributionUrl"
Write-Verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"

$webclient = New-Object System.Net.WebClient
if ($env:MVNW_USERNAME -and $env:MVNW_PASSWORD) {
  $webclient.Credentials = New-Object System.Net.NetworkCredential($env:MVNW_USERNAME, $env:MVNW_PASSWORD)
}
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
$webclient.DownloadFile($distributionUrl, "$TMP_DOWNLOAD_DIR/$distributionUrlName") | Out-Null

# If specified, validate the SHA-256 sum of the Maven distribution zip file
$distributionSha256Sum = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionSha256Sum
if ($distributionSha256Sum) {
  if ($USE_MVND) {
    Write-Error "Checksum validation is not supported for maven-mvnd. `nPlease disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties."
  }
  Import-Module $PSHOME\Modules\Microsoft.PowerShell.Utility -Function Get-FileHash
  if ((Get-FileHash "$TMP_DOWNLOAD_DIR/$distributionUrlName" -Algorithm SHA256).Hash.ToLower() -ne $distributionSha256Sum) {
    Write-Error "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised. If you updated your Maven version, you need to update the specified distributionSha256Sum property."
  }
}

# unzip and move
Expand-Archive "$TMP_DOWNLOAD_DIR/$distributionUrlName" -DestinationPath "$TMP_DOWNLOAD_DIR" | Out-Null
Rename-Item -Path "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" -NewName $MAVEN_HOME_NAME | Out-Null
try {
  Move-Item -Path "$TMP_DOWNLOAD_DIR/$MAVEN_HOME_NAME" -Destination $MAVEN_HOME_PARENT | Out-Null
} catch {
  if (! (Test-Path -Path "$MAVEN_HOME" -PathType Container)) {
    Write-Error "fail to move MAVEN_HOME"
  }
} finally {
  try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
  catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }
}

Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"
</file>

<file path="bootloader/src/main/java/pe/edu/certus/bootloader/BootloaderApplication.java">
package pe.edu.certus.bootloader;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication( scanBasePackages = "pe.edu.certus")
public class BootloaderApplication {

    public static void main( String[] args ) {
        SpringApplication.run( BootloaderApplication.class, args );
    }

}
</file>

<file path="bootloader/src/main/java/pe/edu/certus/bootloader/Main.java">
package pe.edu.certus.bootloader;

public class Main {
	public static void main(String[] args) {
		System.out.println("Hello, World!");
	}
}
</file>

<file path="bootloader/src/main/resources/banner.txt">
________  _______   ________  _________  ___  ___  ________           ________  ________  ________  ___  __    _______   ________   ________
|\   ____\|\  ___ \ |\   __  \|\___   ___\\  \|\  \|\   ____\         |\   __  \|\   __  \|\   ____\|\  \|\  \ |\  ___ \ |\   ___  \|\   ___ \
\ \  \___|\ \   __/|\ \  \|\  \|___ \  \_\ \  \\\  \ \  \___|_        \ \  \|\ /\ \  \|\  \ \  \___|\ \  \/  /|\ \   __/|\ \  \\ \  \ \  \_|\ \
 \ \  \    \ \  \_|/_\ \   _  _\   \ \  \ \ \  \\\  \ \_____  \        \ \   __  \ \   __  \ \  \    \ \   ___  \ \  \_|/_\ \  \\ \  \ \  \ \\ \
  \ \  \____\ \  \_|\ \ \  \\  \|   \ \  \ \ \  \\\  \|____|\  \        \ \  \|\  \ \  \ \  \ \  \____\ \  \\ \  \ \  \_|\ \ \  \\ \  \ \  \_\\ \
   \ \_______\ \_______\ \__\\ _\    \ \__\ \ \_______\____\_\  \        \ \_______\ \__\ \__\ \_______\ \__\\ \__\ \_______\ \__\\ \__\ \_______\
    \|_______|\|_______|\|__|\|__|    \|__|  \|_______|\_________\        \|_______|\|__|\|__|\|_______|\|__| \|__|\|_______|\|__| \|__|\|_______|
                                                      \|_________|
</file>

<file path="bootloader/src/main/resources/database/data.sql">
-- [ROLES TABLE]
INSERT INTO roles (role_name, role_description) VALUES ('Administrator', 'Full access to platform management.');
INSERT INTO roles (role_name, role_description) VALUES ('Seller', 'User who can post and sell jobs.');
INSERT INTO roles (role_name, role_description) VALUES ('Buyer', 'User who can search for and buy jobs.');

-- [PERMISSIONS TABLE]
-- User Management
INSERT INTO permissions (permission_name, permission_description) VALUES ('user:view_list', 'View list of users');
INSERT INTO permissions (permission_name, permission_description) VALUES ('user:view_profile', 'View profile of a specific user');
INSERT INTO permissions (permission_name, permission_description) VALUES ('user:edit_profile_any', 'Edit any user''s profile');
INSERT INTO permissions (permission_name, permission_description) VALUES ('user:edit_profile_own', 'Edit their own profile');
INSERT INTO permissions (permission_name, permission_description) VALUES ('user:delete', 'Delete a user');
INSERT INTO permissions (permission_name, permission_description) VALUES ('user:ban', 'Suspend/Block a user');
INSERT INTO permissions (permission_name, permission_description) VALUES ('user:assign_role', 'Assign/Change roles to users');
INSERT INTO permissions (permission_name, permission_description) VALUES ('user:view_roles', 'View existing roles');
INSERT INTO permissions (permission_name, permission_description) VALUES ('user:manage_roles', 'Create, edit, delete roles');
INSERT INTO permissions (permission_name, permission_description) VALUES ('user:view_permissions', 'View existing permissions');

-- Order Management
INSERT INTO permissions (permission_name, permission_description) VALUES ('order:view_list_all', 'View list of all orders');
INSERT INTO permissions (permission_name, permission_description) VALUES ('order:view_list_own', 'View list of their own purchases - for buyers');
INSERT INTO permissions (permission_name, permission_description) VALUES ('order:view_list_seller', 'View list of orders for their own jobs - for sellers');
INSERT INTO permissions (permission_name, permission_description) VALUES ('order:view_details', 'View full details of a specific order - admin, support');
INSERT INTO permissions (permission_name, permission_description) VALUES ('order:update_status', 'Change the status of an order - admin, support');
INSERT INTO permissions (permission_name, permission_description) VALUES ('order:process_refund', 'Initiate or process a refund');
INSERT INTO permissions (permission_name, permission_description) VALUES ('order:view_payment_details', 'View details of the associated payment transaction');

-- Payment Management
INSERT INTO permissions (permission_name, permission_description) VALUES ('payment:view_transactions', 'View transaction history from PayPal/gateway');
INSERT INTO permissions (permission_name, permission_description) VALUES ('payout:request', 'Allow sellers to request payment for their earnings');
INSERT INTO permissions (permission_name, permission_description) VALUES ('payout:process', 'Process/Approve payments to sellers');
INSERT INTO permissions (permission_name, permission_description) VALUES ('payout:view_history_own', 'View their own received payment history - seller');
INSERT INTO permissions (permission_name, permission_description) VALUES ('payout:view_history_all', 'View all seller payment history - admin');
INSERT INTO permissions (permission_name, permission_description) VALUES ('commission:view_report', 'View platform commission reports');
INSERT INTO permissions (permission_name, permission_description) VALUES ('finance:view_summary', 'View general financial summaries');

-- Comment Management
INSERT INTO permissions (permission_name, permission_description) VALUES ('comment:create', 'Post a comment or reply on a job page');
INSERT INTO permissions (permission_name, permission_description) VALUES ('comment:edit_own', 'Edit their own comments');
INSERT INTO permissions (permission_name, permission_description) VALUES ('comment:delete_own', 'Delete their own comments');
INSERT INTO permissions (permission_name, permission_description) VALUES ('comment:moderate', 'Moderate comments: approve, edit, delete any - admin/support');

-- Rating Management
INSERT INTO permissions (permission_name, permission_description) VALUES ('rating:create', 'Leave a rating/review on a purchased job');
INSERT INTO permissions (permission_name, permission_description) VALUES ('rating:reply', 'Allow seller to respond to a received rating');
INSERT INTO permissions (permission_name, permission_description) VALUES ('rating:edit_own', 'Edit their own ratings - consider if allowed');
INSERT INTO permissions (permission_name, permission_description) VALUES ('rating:delete_own', 'Delete their own ratings - consider if allowed');
INSERT INTO permissions (permission_name, permission_description) VALUES ('rating:moderate', 'Moderate ratings: approve, edit, delete any - admin/support');


-- [ROLE PERMISSIONS TABLE]
-- Assign all permissions to the 'Administrator' role (role_id = 1)
INSERT INTO roles_permissions (id_role, id_permission) VALUES (1, 1); -- user:view_list (View list of users)
INSERT INTO roles_permissions (id_role, id_permission) VALUES (1, 2); -- user:view_profile (View profile of a specific user)
INSERT INTO roles_permissions (id_role, id_permission) VALUES (1, 3); -- user:edit_profile_any (Edit any user's profile)
INSERT INTO roles_permissions (id_role, id_permission) VALUES (1, 4); -- user:edit_profile_own (Edit their own profile)
INSERT INTO roles_permissions (id_role, id_permission) VALUES (1, 5); -- user:delete (Delete a user)
INSERT INTO roles_permissions (id_role, id_permission) VALUES (1, 6); -- user:ban (Suspend/Block a user)
INSERT INTO roles_permissions (id_role, id_permission) VALUES (1, 7); -- user:assign_role (Assign/Change roles to users)
INSERT INTO roles_permissions (id_role, id_permission) VALUES (1, 8); -- user:view_roles (View existing roles)
INSERT INTO roles_permissions (id_role, id_permission) VALUES (1, 9); -- user:manage_roles (Create, edit, delete roles)
INSERT INTO roles_permissions (id_role, id_permission) VALUES (1, 10); -- user:view_permissions (View existing permissions)
INSERT INTO roles_permissions (id_role, id_permission) VALUES (1, 11); -- order:view_list_all (View list of all orders)
INSERT INTO roles_permissions (id_role, id_permission) VALUES (1, 12); -- order:view_list_own (View list of their own purchases)
INSERT INTO roles_permissions (id_role, id_permission) VALUES (1, 13); -- order:view_list_seller (View list of orders for their own jobs)
INSERT INTO roles_permissions (id_role, id_permission) VALUES (1, 14); -- order:view_details (View full details of a specific order)
INSERT INTO roles_permissions (id_role, id_permission) VALUES (1, 15); -- order:update_status (Change the status of an order)
INSERT INTO roles_permissions (id_role, id_permission) VALUES (1, 16); -- order:process_refund (Initiate or process a refund)
INSERT INTO roles_permissions (id_role, id_permission) VALUES (1, 17); -- order:view_payment_details (View details of the associated payment transaction)
INSERT INTO roles_permissions (id_role, id_permission) VALUES (1, 18); -- payment:view_transactions (View transaction history)
INSERT INTO roles_permissions (id_role, id_permission) VALUES (1, 19); -- payout:request (Allow sellers to request payout)
INSERT INTO roles_permissions (id_role, id_permission) VALUES (1, 20); -- payout:process (Process/Approve payouts)
INSERT INTO roles_permissions (id_role, id_permission) VALUES (1, 21); -- payout:view_history_own (View own payout history)
INSERT INTO roles_permissions (id_role, id_permission) VALUES (1, 22); -- payout:view_history_all (View all seller payout history)
INSERT INTO roles_permissions (id_role, id_permission) VALUES (1, 23); -- commission:view_report (View commission reports)
INSERT INTO roles_permissions (id_role, id_permission) VALUES (1, 24); -- finance:view_summary (View financial summaries)
INSERT INTO roles_permissions (id_role, id_permission) VALUES (1, 25); -- comment:create (Post a comment)
INSERT INTO roles_permissions (id_role, id_permission) VALUES (1, 26); -- comment:edit_own (Edit own comments)
INSERT INTO roles_permissions (id_role, id_permission) VALUES (1, 27); -- comment:delete_own (Delete own comments)
INSERT INTO roles_permissions (id_role, id_permission) VALUES (1, 28); -- comment:moderate (Moderate comments)
INSERT INTO roles_permissions (id_role, id_permission) VALUES (1, 29); -- rating:create (Leave a rating/review)
INSERT INTO roles_permissions (id_role, id_permission) VALUES (1, 30); -- rating:reply (Allow seller to respond to rating)
INSERT INTO roles_permissions (id_role, id_permission) VALUES (1, 31); -- rating:edit_own (Edit own ratings)
INSERT INTO roles_permissions (id_role, id_permission) VALUES (1, 32); -- rating:delete_own (Delete own ratings)
INSERT INTO roles_permissions (id_role, id_permission) VALUES (1, 33); -- rating:moderate (Moderate ratings)

-- Assign permissions to the 'Seller' role (role_id = 2)
INSERT INTO roles_permissions (id_role, id_permission) VALUES (2, 4); -- user:edit_profile_own (Edit their own profile)
INSERT INTO roles_permissions (id_role, id_permission) VALUES (2, 13); -- order:view_list_seller (View list of orders for their own jobs)
INSERT INTO roles_permissions (id_role, id_permission) VALUES (2, 19); -- payout:request (Allow sellers to request payout)
INSERT INTO roles_permissions (id_role, id_permission) VALUES (2, 21); -- payout:view_history_own (View their own received payment history)
INSERT INTO roles_permissions (id_role, id_permission) VALUES (2, 25); -- comment:create (Post a comment)
INSERT INTO roles_permissions (id_role, id_permission) VALUES (2, 26); -- comment:edit_own (Edit their own comments)
INSERT INTO roles_permissions (id_role, id_permission) VALUES (2, 27); -- comment:delete_own (Delete their own comments)
INSERT INTO roles_permissions (id_role, id_permission) VALUES (2, 30); -- rating:reply (Allow seller to respond to a rating)
INSERT INTO roles_permissions (id_role, id_permission) VALUES (2, 31); -- rating:edit_own (Edit their own ratings - consider if allowed)
INSERT INTO roles_permissions (id_role, id_permission) VALUES (2, 32); -- rating:delete_own (Delete their own ratings - consider if allowed)


-- Assign permissions to the 'Buyer' role (role_id = 3)
INSERT INTO roles_permissions (id_role, id_permission) VALUES (3, 4); -- user:edit_profile_own (Edit their own profile)
INSERT INTO roles_permissions (id_role, id_permission) VALUES (3, 12); -- order:view_list_own (View list of their own purchases)
INSERT INTO roles_permissions (id_role, id_permission) VALUES (3, 25); -- comment:create (Post a comment)
INSERT INTO roles_permissions (id_role, id_permission) VALUES (3, 26); -- comment:edit_own (Edit their own comments)
INSERT INTO roles_permissions (id_role, id_permission) VALUES (3, 27); -- comment:delete_own (Delete their own comments)
INSERT INTO roles_permissions (id_role, id_permission) VALUES (3, 29); -- rating:create (Leave a rating/review)
INSERT INTO roles_permissions (id_role, id_permission) VALUES (3, 31); -- rating:edit_own (Edit their own ratings - consider if allowed)
INSERT INTO roles_permissions (id_role, id_permission) VALUES (3, 32); -- rating:delete_own (Delete their own ratings - consider if allowed)


-- [USERS TABLE]

-- Administrator (role_id = 1, must be @certus.edu.pe - DNI email)
INSERT INTO users (id_role, user_email, user_password, user_status) VALUES (1, '10203040@certus.edu.pe', '$2a$10$jK7yGgZpQvXwYcCbZaNc.eQfR0s1T2u3V4i5O6p7A8b9C0dE1fG2hI3j4k5L6m7N8o9P0qR', TRUE);

-- Sellers (role_id = 2, must be @certus.edu.pe - DNI email)
INSERT INTO users (id_role, user_email, user_password, user_status) VALUES (2, '45678901@certus.edu.pe', 'pbkdf2:sha256:150000$xyzABC123$e0c7d4a1b8f3c6e9d2a5b8c7d4e1f3a6b9c8d0e3f1a2b5c8d9e0f7g6h5i4j3k2', TRUE);
INSERT INTO users (id_role, user_email, user_password, user_status) VALUES (2, '78901234@certus.edu.pe', '$2b$12$hI8jKlMnO7pQrStUvWxYz.eDcEfGhIjKlMnOpQrStUvWxYzAbCdEfGhIjKlMnOpQrStUvWxYzA', TRUE);
INSERT INTO users (id_role, user_email, user_password, user_status) VALUES (2, '23456789@certus.edu.pe', 'pbkdf2:sha256:150000$UVW45678$9f8e7d6c5b4a3210fedcba9876543210abcdef0123456789abcdef0123456789ab', TRUE);
INSERT INTO users (id_role, user_email, user_password, user_status) VALUES (2, '56789012@certus.edu.pe', '$2a$10$AbCdEfGhIjKlMnO7pQrSt.uVwXyZ0aBcDeFgHiJkLmNoPqRsTuVwXyZ0aBcDeFgHiJkLmN', TRUE);
INSERT INTO users (id_role, user_email, user_password, user_status) VALUES (2, '89012345@certus.edu.pe', 'pbkdf2:sha256:150000$ZaYxWvUT$c8d9e0f7g6h5i4j3k210fedcba9876543210abcdef0123456789abcdef0123456789', TRUE);
INSERT INTO users (id_role, user_email, user_password, user_status) VALUES (2, '34567890@certus.edu.pe', '$2b$12$QvXwYcCbZaNcEeQfRgSh.iJkLlMnO7pQrStUvWxYzAbCdEfGhIjKlMnOpQrStUvWxYzAbC', TRUE);
INSERT INTO users (id_role, user_email, user_password, user_status) VALUES (2, '67890123@certus.edu.pe', 'pbkdf2:sha256:150000$NOP90123$10fedcba9876543210abcdef0123456789abcdef0123456789abcdef0123456789ab', TRUE);
INSERT INTO users (id_role, user_email, user_password, user_status) VALUES (2, '90123456@certus.edu.pe', '$2a$10$uVwXyZ0aBcDeFgHiJkLm.NoPqRsTuVwXyZ0aBcDeFgHiJkLmNoPqRsTuVwXyZ0aBcDeF', TRUE);
INSERT INTO users (id_role, user_email, user_password, user_status) VALUES (2, '11223344@certus.edu.pe', 'pbkdf2:sha256:150000$DEF67890$210abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789', TRUE);

-- Buyers (role_id = 3, must be @gmail, @hotmail, or @outlook - Real name email)
INSERT INTO users (id_role, user_email, user_password, user_status) VALUES (3, 'carlosgomez@gmail.com', '$2b$12$ZaNcEeQfRgShIjKlMnO.7pQrStUvWxYzAbCdEfGhIjKlMnOpQrStUvWxYzAbCdEfG', TRUE);
INSERT INTO users (id_role, user_email, user_password, user_status) VALUES (3, 'lauradiaz@hotmail.com', 'pbkdf2:sha256:150000$GHI12345$3210abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789', TRUE);
INSERT INTO users (id_role, user_email, user_password, user_status) VALUES (3, 'pedrolopez@outlook.com', '$2a$10$iJkLlMnO7pQrStUvWxYz.AbCdEfGhIjKlMnOpQrStUvWxYz0aBcDeFgHiJkLmNoPq', TRUE);
INSERT INTO users (id_role, user_email, user_password, user_status) VALUES (3, 'sofiafernandez@gmail.com', 'pbkdf2:sha256:150000$JKL67890$43210abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789', TRUE);
INSERT INTO users (id_role, user_email, user_password, user_status) VALUES (3, 'javierrios@gmail.com', '$2b$12$MnO7pQrStUvWxYzAbCdE.fGhIjKlMnOpQrStUvWxYz0aBcDeFgHiJkLmNoPqRsTuV', TRUE);
INSERT INTO users (id_role, user_email, user_password, user_status) VALUES (3, 'elenavargas@hotmail.com', 'pbkdf2:sha256:150000$MNO12345$543210abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789', TRUE);
INSERT INTO users (id_role, user_email, user_password, user_status) VALUES (3, 'mariapaz@gmail.com', '$2a$10$OpQrStUvWxYzAbCdEfGh.IjKlMnOpQrStUvWxYz0aBcDeFgHiJkLmNoPqRsTuVwXy', TRUE);
INSERT INTO users (id_role, user_email, user_password, user_status) VALUES (3, 'josesilva@outlook.com', 'pbkdf2:sha256:150000$PQR67890$6543210abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789', TRUE);
INSERT INTO users (id_role, user_email, user_password, user_status) VALUES (3, 'sofiadiaz@gmail.com', '$2b$12$StUvWxYzAbCdEfGhIjKl.MnOpQrStUvWxYz0aBcDeFgHiJkLmNoPqRsTuVwXyZ0aB', TRUE);
INSERT INTO users (id_role, user_email, user_password, user_status) VALUES (3, 'miguellopez@hotmail.com', 'pbkdf2:sha256:150000$STU12345$76543210abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789', TRUE);


-- [CAREER CATEGORIES TABLE]
INSERT INTO career_categories (career_category_name, career_category_description) VALUES ('Negocios', 'Carreras enfocadas en la administración, gestión y marketing.');
INSERT INTO career_categories (career_category_name, career_category_description) VALUES ('Finanzas', 'Carreras relacionadas con contabilidad, tributación y finanzas.');
INSERT INTO career_categories (career_category_name, career_category_description) VALUES ('Tecnología', 'Carreras en diseño, desarrollo y administración de sistemas.');
INSERT INTO career_categories (career_category_name, career_category_description) VALUES ('Creatividad', 'Carreras de diseño y comunicación visual.');


-- [CAREERS TABLE]
INSERT INTO careers (id_career_category, career_name, career_description) VALUES (1, 'Administración de empresas', 'Gestión integral de organizaciones.');
INSERT INTO careers (id_career_category, career_name, career_description) VALUES (1, 'Administración de negocios internacionales', 'Gestión de operaciones comerciales globales.');
INSERT INTO careers (id_career_category, career_name, career_description) VALUES (1, 'Marketing y medios digitales', 'Estrategias de mercado y comunicación digital.');
INSERT INTO careers (id_career_category, career_name, career_description) VALUES (1, 'Administración y gestión comercial', 'Enfoque en ventas y dirección comercial.');
INSERT INTO careers (id_career_category, career_name, career_description) VALUES (1, 'Administración y recursos humanos', 'Gestión del talento humano.');
INSERT INTO careers (id_career_category, career_name, career_description) VALUES (2, 'Contabilidad y tributación', 'Registro financiero y cumplimiento fiscal.');
INSERT INTO careers (id_career_category, career_name, career_description) VALUES (2, 'Administración bancaria y financiera', 'Gestión de productos y servicios financieros.');
INSERT INTO careers (id_career_category, career_name, career_description) VALUES (3, 'Diseño y desarrollo de software', 'Creación de aplicaciones y sistemas.');
INSERT INTO careers (id_career_category, career_name, career_description) VALUES (3, 'Administración de sistemas', 'Gestión y mantenimiento de infraestructuras tecnológicas.');
INSERT INTO careers (id_career_category, career_name, career_description) VALUES (4, 'Publicidad', 'Creación y gestión de campañas publicitarias.');
INSERT INTO careers (id_career_category, career_name, career_description) VALUES (4, 'Diseño gráfico', 'Creación de comunicación visual.');


-- [PEOPLE TABLE]
-- User 1 (Admin, Certus): DNI email in users table, complete Certus data in people
INSERT INTO people (id_user, id_career, person_name, person_lastname, person_dni, person_mobile_phone, person_gender, person_institute_location, person_institutional_email, person_institutional_cycle)
VALUES (1, 1, 'Juan', 'Pérez Rodríguez', '10203040', '987654321', 'M', 'Lima', '10203040@certus.edu.pe', 1); -- Assigned Career ID 1 (Negocios) and Cycle 1 for Admin

-- Users 2-10 (Sellers, Certus): DNI email in users table, complete Certus data
-- Careers based on the work types (Diseño Gráfico=11, Desarrollo Software=8, Admin Sistemas=9, Publicidad=10)
INSERT INTO people (id_user, id_career, person_name, person_lastname, person_dni, person_mobile_phone, person_gender, person_institute_location, person_institutional_email, person_institutional_cycle)
VALUES (2, 11, 'María', 'García Fernández', '45678901', '912345678', 'F', 'Lima', '45678901@certus.edu.pe', 5); -- Career: Diseño Gráfico (ID 11)

INSERT INTO people (id_user, id_career, person_name, person_lastname, person_dni, person_mobile_phone, person_gender, person_institute_location, person_institutional_email, person_institutional_cycle)
VALUES (3, 8, 'Juan', 'Martínez López', '78901234', '923456789', 'M', 'Arequipa', '78901234@certus.edu.pe', 6); -- Career: Diseño y desarrollo de software (ID 8)

INSERT INTO people (id_user, id_career, person_name, person_lastname, person_dni, person_mobile_phone, person_gender, person_institute_location, person_institutional_email, person_institutional_cycle)
VALUES (4, 11, 'Ana', 'Sánchez Ruiz', '23456789', '934567890', 'F', 'Lima', '23456789@certus.edu.pe', 4); -- Career: Diseño Gráfico (ID 11)

INSERT INTO people (id_user, id_career, person_name, person_lastname, person_dni, person_mobile_phone, person_gender, person_institute_location, person_institutional_email, person_institutional_cycle)
VALUES (5, 9, 'Luis', 'González Hernández', '56789012', '945678901', 'M', 'Lima', '56789012@certus.edu.pe', 5); -- Career: Administración de sistemas (ID 9)

INSERT INTO people (id_user, id_career, person_name, person_lastname, person_dni, person_mobile_phone, person_gender, person_institute_location, person_institutional_email, person_institutional_cycle)
VALUES (6, 8, 'Sofía', 'Jiménez Diaz', '89012345', '956789012', 'F', 'Arequipa', '89012345@certus.edu.pe', 6); -- Career: Diseño y desarrollo de software (ID 8)

INSERT INTO people (id_user, id_career, person_name, person_lastname, person_dni, person_mobile_phone, person_gender, person_institute_location, person_institutional_email, person_institutional_cycle)
VALUES (7, 10, 'Diego', 'Álvarez Moreno', '34567890', '967890123', 'M', 'Lima', '34567890@certus.edu.pe', 5); -- Career: Publicidad (ID 10)

INSERT INTO people (id_user, id_career, person_name, person_lastname, person_dni, person_mobile_phone, person_gender, person_institute_location, person_institutional_email, person_institutional_cycle)
VALUES (8, 11, 'Camila', 'Torres Navarro', '67890123', '978901234', 'F', 'Arequipa', '67890123@certus.edu.pe', 4); -- Career: Diseño Gráfico (ID 11)

INSERT INTO people (id_user, id_career, person_name, person_lastname, person_dni, person_mobile_phone, person_gender, person_institute_location, person_institutional_email, person_institutional_cycle)
VALUES (9, 8, 'Gabriel', 'Ríos Castillo', '90123456', '989012345', 'M', 'Lima', '90123456@certus.edu.pe', 6); -- Career: Diseño y desarrollo de software (ID 8)

INSERT INTO people (id_user, id_career, person_name, person_lastname, person_dni, person_mobile_phone, person_gender, person_institute_location, person_institutional_email, person_institutional_cycle)
VALUES (10, 9, 'Valeria', 'Vargas Medina', '11223344', '901234567', 'F', 'Arequipa', '11223344@certus.edu.pe', 5); -- Career: Administración de sistemas (ID 9)

-- Users 11-20 (Buyers, non-Certus): Public domain emails in users table, assigning placeholder/fictional data to institutional fields
INSERT INTO people (id_user, id_career, person_name, person_lastname, person_dni, person_mobile_phone, person_gender, person_institute_location, person_institutional_email, person_institutional_cycle)
VALUES (11, 1, 'Carlos', 'Gómez Silva', '99111111', '911111111', 'M', 'No Aplica', 'no.institucional.11@example.com', 0);

INSERT INTO people (id_user, id_career, person_name, person_lastname, person_dni, person_mobile_phone, person_gender, person_institute_location, person_institutional_email, person_institutional_cycle)
VALUES (12, 1, 'Laura', 'Díaz Torres', '99222222', '922222222', 'F', 'No Aplica', 'no.institucional.12@example.com', 0);

INSERT INTO people (id_user, id_career, person_name, person_lastname, person_dni, person_mobile_phone, person_gender, person_institute_location, person_institutional_email, person_institutional_cycle)
VALUES (13, 1, 'Pedro', 'López Navarro', '99333333', '933333333', 'M', 'No Aplica', 'no.institucional.13@example.com', 0);

INSERT INTO people (id_user, id_career, person_name, person_lastname, person_dni, person_mobile_phone, person_gender, person_institute_location, person_institutional_email, person_institutional_cycle)
VALUES (14, 1, 'Sofía', 'Fernández Castillo', '99444444', '944444444', 'F', 'No Aplica', 'no.institucional.14@example.com', 0);

INSERT INTO people (id_user, id_career, person_name, person_lastname, person_dni, person_mobile_phone, person_gender, person_institute_location, person_institutional_email, person_institutional_cycle)
VALUES (15, 1, 'Javier', 'Ríos Moreno', '99555555', '955555555', 'M', 'No Aplica', 'no.institucional.15@example.com', 0);

INSERT INTO people (id_user, id_career, person_name, person_lastname, person_dni, person_mobile_phone, person_gender, person_institute_location, person_institutional_email, person_institutional_cycle)
VALUES (16, 1, 'Elena', 'Vargas Ortiz', '99666666', '966666666', 'F', 'No Aplica', 'no.institucional.16@example.com', 0);

INSERT INTO people (id_user, id_career, person_name, person_lastname, person_dni, person_mobile_phone, person_gender, person_institute_location, person_institutional_email, person_institutional_cycle)
VALUES (17, 1, 'María', 'Paz Soto', '99777777', '977777777', 'F', 'No Aplica', 'no.institucional.17@example.com', 0);

INSERT INTO people (id_user, id_career, person_name, person_lastname, person_dni, person_mobile_phone, person_gender, person_institute_location, person_institutional_email, person_institutional_cycle)
VALUES (18, 1, 'José', 'Silva Mendoza', '99888888', '988888888', 'M', 'No Aplica', 'no.institucional.18@example.com', 0);

INSERT INTO people (id_user, id_career, person_name, person_lastname, person_dni, person_mobile_phone, person_gender, person_institute_location, person_institutional_email, person_institutional_cycle)
VALUES (19, 1, 'Sofía', 'Díaz Rojas', '99999999', '999999999', 'F', 'No Aplica', 'no.institucional.19@example.com', 0);

INSERT INTO people (id_user, id_career, person_name, person_lastname, person_dni, person_mobile_phone, person_gender, person_institute_location, person_institutional_email, person_institutional_cycle)
VALUES (20, 1, 'Miguel', 'López Cáceres', '99000000', '900000000', 'M', 'No Aplica', 'no.institucional.20@example.com', 0);

-- [WORK CATEGORIES TABLE]
INSERT INTO work_categories (work_category_name, work_category_description) VALUES ('Diseño', 'Servicios relacionados con diseño gráfico y visual.');
INSERT INTO work_categories (work_category_name, work_category_description) VALUES ('Ilustración', 'Servicios de creación de ilustraciones digitales o tradicionales.');
INSERT INTO work_categories (work_category_name, work_category_description) VALUES ('Desarrollo de Software', 'Servicios de programación y desarrollo de aplicaciones o sistemas.');

-- [WORKS TABLE]
INSERT INTO works (id_seller_user, id_work_category, work_title, work_description, work_category, work_price, work_is_deleted, work_image_url, work_status)
VALUES (2, 1, 'Diseño de Logo Profesional', 'Creación de identidad visual para tu marca, con archivos fuente.', 'Diseño', 80.00, FALSE, '/uploads/works/seller_2/logo_design.jpg', 'PUBLICADO');

INSERT INTO works (id_seller_user, id_work_category, work_title, work_description, work_category, work_price, work_is_deleted, work_image_url, work_status)
VALUES (3, 1, 'Packaging Design para Productos', 'Diseño atractivo y funcional para empaques y etiquetas.', 'Diseño', 150.50, FALSE, '/uploads/works/seller_3/packaging_mockup.png', 'PUBLICADO');

INSERT INTO works (id_seller_user, id_work_category, work_title, work_description, work_category, work_price, work_is_deleted, work_image_url, work_status)
VALUES (4, 1, 'Diseño de Interfaz de Usuario (UI)', 'Diseño de interfaces intuitivas y estéticas para apps/web.', 'Diseño', 200.00, FALSE, '/uploads/works/seller_4/ui_design.jpg', 'PUBLICADO');

INSERT INTO works (id_seller_user, id_work_category, work_title, work_description, work_category, work_price, work_is_deleted, work_image_url, work_status)
VALUES (5, 1, 'Diseño de Post para Redes Sociales', 'Diseños creativos para tus campañas en Instagram, Facebook, etc.', 'Diseño', 25.00, FALSE, '/uploads/works/seller_5/social_media_post.png', 'PUBLICADO');

INSERT INTO works (id_seller_user, id_work_category, work_title, work_description, work_category, work_price, work_is_deleted, work_image_url, work_status)
VALUES (6, 1, 'Brand Guide Completa', 'Creación de manual de marca detallado, incluyendo usos y aplicaciones.', 'Diseño', 300.00, FALSE, '/uploads/works/seller_6/brand_guide.pdf', 'EN REVISIÓN');

INSERT INTO works (id_seller_user, id_work_category, work_title, work_description, work_category, work_price, work_is_deleted, work_image_url, work_status)
VALUES (2, 1, 'Diseño de Brochure Corporativo', 'Material de marketing profesional en formato digital o para impresión.', 'Diseño', 120.00, FALSE, '/uploads/works/seller_2/brochure.jpg', 'PUBLICADO');

INSERT INTO works (id_seller_user, id_work_category, work_title, work_description, work_category, work_price, work_is_deleted, work_image_url, work_status)
VALUES (4, 1, 'Rediseño de Sitio Web (Visual)', 'Mejora estética y de usabilidad de un sitio web existente.', 'Diseño', 450.00, FALSE, '/uploads/works/seller_4/website_redesign.jpg', 'PUBLICADO');


-- Illustration Works (id_work_category = 2) - 7 works
INSERT INTO works (id_seller_user, id_work_category, work_title, work_description, work_category, work_price, work_is_deleted, work_image_url, work_status)
VALUES (7, 2, 'Ilustración Digital Personalizada', 'Arte digital a medida para cualquier propósito: banners, artículos, etc.', 'Ilustración', 90.00, FALSE, '/uploads/works/seller_7/digital_illustration.png', 'PUBLICADO');

INSERT INTO works (id_seller_user, id_work_category, work_title, work_description, work_category, work_price, work_is_deleted, work_image_url, work_status)
VALUES (8, 2, 'Character Design', 'Diseño de personajes únicos y expresivos para tu proyecto animado o juego.', 'Ilustración', 180.00, FALSE, '/uploads/works/seller_8/character_sheet.jpg', 'PUBLICADO');

INSERT INTO works (id_seller_user, id_work_category, work_title, work_description, work_category, work_price, work_is_deleted, work_image_url, work_status)
VALUES (9, 2, 'Ilustración para Libros Infantiles', 'Imágenes coloridas y atractivas que capturan la imaginación de los niños.', 'Ilustración', 250.00, FALSE, '/uploads/works/seller_9/kids_book_illustration.jpg', 'PUBLICADO');

INSERT INTO works (id_seller_user, id_work_category, work_title, work_description, work_category, work_price, work_is_deleted, work_image_url, work_status)
VALUES (10, 2, 'Retrato Ilustrado', 'Convierte tu foto en una hermosa ilustración digital o con estilo artístico.', 'Ilustración', 70.00, FALSE, '/uploads/works/seller_10/illustrated_portrait.png', 'PUBLICADO');

INSERT INTO works (id_seller_user, id_work_category, work_title, work_description, work_category, work_price, work_is_deleted, work_image_url, work_status)
VALUES (7, 2, 'Concept Art para Videojuegos', 'Creación visual de mundos, personajes y elementos para tu juego.', 'Ilustración', 350.00, FALSE, '/uploads/works/seller_7/concept_art.jpg', 'EN REVISIÓN');

INSERT INTO works (id_seller_user, id_work_category, work_title, work_description, work_category, work_price, work_is_deleted, work_image_url, work_status)
VALUES (3, 2, 'Ilustración Rechazada (Ejemplo)', 'Esta ilustración fue revisada pero no cumplió con los estándares.', 'Ilustración', 0.00, FALSE, '/uploads/works/seller_3/rejected_illustration.jpg', 'RECHAZADO'); -- Example rejected work

INSERT INTO works (id_seller_user, id_work_category, work_title, work_description, work_category, work_price, work_is_deleted, work_image_url, work_status)
VALUES (8, 2, 'Ilustración Editorial para Artículo', 'Ilustraciones temáticas para acompañar artículos de blog o revistas.', 'Ilustración', 110.00, FALSE, '/uploads/works/seller_8/editorial_illustration.jpg', 'PUBLICADO');


-- Software Development Works (id_work_category = 3) - 6 works
INSERT INTO works (id_seller_user, id_work_category, work_title, work_description, work_category, work_price, work_is_deleted, work_image_url, work_status)
VALUES (2, 3, 'Desarrollo Web Frontend Básico', 'Creación de landing page responsive o sitio web simple con HTML/CSS/JS.', 'Desarrollo de Software', 500.00, FALSE, '/uploads/works/seller_2/web_frontend.zip', 'PUBLICADO');

INSERT INTO works (id_seller_user, id_work_category, work_title, work_description, work_category, work_price, work_is_deleted, work_image_url, work_status)
VALUES (3, 3, 'Scripting de Automatización en Python', 'Pequeños scripts para automatizar tareas repetitivas.', 'Desarrollo de Software', 100.00, FALSE, '/uploads/works/seller_3/python_script.py', 'PUBLICADO');

INSERT INTO works (id_seller_user, id_work_category, work_title, work_description, work_category, work_price, work_is_deleted, work_image_url, work_status)
VALUES (4, 3, 'Plugin para WordPress Personalizado', 'Desarrollo de funcionalidades específicas y a medida para tu sitio WP.', 'Desarrollo de Software', 400.00, FALSE, '/uploads/works/seller_4/wp_plugin.zip', 'PUBLICADO');

INSERT INTO works (id_seller_user, id_work_category, work_title, work_description, work_category, work_price, work_is_deleted, work_image_url, work_status)
VALUES (5, 3, 'Desarrollo de API RESTful Simple', 'Creación de un servicio web básico para gestionar datos.', 'Desarrollo de Software', 600.00, FALSE, '/uploads/works/seller_5/api_rest.zip', 'PUBLICADO');

INSERT INTO works (id_seller_user, id_work_category, work_title, work_description, work_category, work_price, work_is_deleted, work_image_url, work_status)
VALUES (10, 3, 'Optimización de Base de Datos SQL', 'Mejora de rendimiento de consultas y estructura de base de datos.', 'Desarrollo de Software', 180.00, FALSE, '/uploads/works/seller_10/db_optimization.sql', 'EN REVISIÓN');

INSERT INTO works (id_seller_user, id_work_category, work_title, work_description, work_category, work_price, work_is_deleted, work_image_url, work_status)
VALUES (6, 3, 'Desarrollo de E-commerce Básico', 'Implementación de una tienda online sencilla con carrito y pagos.', 'Desarrollo de Software', 1200.00, FALSE, '/uploads/works/seller_6/ecommerce_basic.zip', 'PUBLICADO');


-- Example Deleted Work (status might be irrelevant if deleted)
INSERT INTO works (id_seller_user, id_work_category, work_title, work_description, work_category, work_price, work_is_deleted, work_image_url, work_status)
VALUES (5, 1, 'Diseño Eliminado (Ejemplo)', 'Este diseño fue marcado como eliminado y no está visible públicamente.', 'Diseño', 100.00, TRUE, '/uploads/works/seller_5/deleted_design.jpg', 'PUBLICADO');

-- [ORDERS TABLE]
INSERT INTO orders (id_user) VALUES (11); -- carlosgomez@gmail.com
INSERT INTO orders (id_user) VALUES (12); -- lauradiaz@hotmail.com
INSERT INTO orders (id_user) VALUES (13); -- pedrolopez@outlook.com
INSERT INTO orders (id_user) VALUES (14); -- sofiafernandez@gmail.com
INSERT INTO orders (id_user) VALUES (15); -- javierrios@gmail.com
INSERT INTO orders (id_user) VALUES (16); -- elenavargas@hotmail.com
INSERT INTO orders (id_user) VALUES (17); -- mariapaz@gmail.com
INSERT INTO orders (id_user) VALUES (18); -- josesilva@outlook.com
INSERT INTO orders (id_user) VALUES (19); -- sofiadiaz@gmail.com
INSERT INTO orders (id_user) VALUES (20); -- miguellopez@hotmail.com
INSERT INTO orders (id_user) VALUES (11); -- Another order by Carlos
INSERT INTO orders (id_user) VALUES (13); -- Another order by Pedro
INSERT INTO orders (id_user) VALUES (15); -- Another order by Javier
INSERT INTO orders (id_user) VALUES (17); -- Another order by Maria
INSERT INTO orders (id_user) VALUES (19); -- Another order by Sofia D.
INSERT INTO orders (id_user) VALUES (12); -- Another order by Laura
INSERT INTO orders (id_user) VALUES (14); -- Another order by Sofia F.
INSERT INTO orders (id_user) VALUES (16); -- Another order by Elena
INSERT INTO orders (id_user) VALUES (18); -- Another order by Jose
INSERT INTO orders (id_user) VALUES (20); -- Another order by Miguel


-- [PAYPAL PAYMENTS TABLE]
-- Order 1 -> User 11 (carlosgomez@gmail.com)
INSERT INTO paypal_payments (id_internal_order, paypal_payment_payer_email, paypal_payment_status, paypal_payment_transaction_id, paypal_payment_amount, paypal_payment_currency, paypal_payment_transaction_type)
VALUES (1, 'carlosgomez_paypal@example.com', 'COMPLETED', 'PAY-ABC1D2E3F4G5H6I7J8K9L0M1N2O3P4Q5', 80.00, 'PEN', 'Sale');

-- Order 2 -> User 12 (lauradiaz@hotmail.com)
INSERT INTO paypal_payments (id_internal_order, paypal_payment_payer_email, paypal_payment_status, paypal_payment_transaction_id, paypal_payment_amount, paypal_payment_currency, paypal_payment_transaction_type)
VALUES (2, 'lauradiaz_paypal@example.com', 'COMPLETED', 'PAY-RST6U7V8W9X0Y1Z2A3B4C5D6E7F8G9H0', 150.50, 'PEN', 'Sale');

-- Order 3 -> User 13 (pedrolopez@outlook.com)
INSERT INTO paypal_payments (id_internal_order, paypal_payment_payer_email, paypal_payment_status, paypal_payment_transaction_id, paypal_payment_amount, paypal_payment_currency, paypal_payment_transaction_type)
VALUES (3, 'pedrolopez_paypal@example.com', 'COMPLETED', 'PAY-JKL1M2N3O4P5Q6R7S8T9U0V1W2X3Y4Z5', 200.00, 'PEN', 'Sale');

-- Order 4 -> User 14 (sofiafernandez@gmail.com)
INSERT INTO paypal_payments (id_internal_order, paypal_payment_payer_email, paypal_payment_status, paypal_payment_transaction_id, paypal_payment_amount, paypal_payment_currency, paypal_payment_transaction_type)
VALUES (4, 'sofiaf_paypal@example.com', 'COMPLETED', 'PAY-ABCDE67890FGH01234IJKL567890MNO', 25.00, 'PEN', 'Sale');

-- Order 5 -> User 15 (javierrios@gmail.com)
INSERT INTO paypal_payments (id_internal_order, paypal_payment_payer_email, paypal_payment_status, paypal_payment_transaction_id, paypal_payment_amount, paypal_payment_currency, paypal_payment_transaction_type)
VALUES (5, 'javierrios_paypal@example.com', 'COMPLETED', 'PAY-PQRST12345UVWXY67890ZABCDE01234', 300.00, 'PEN', 'Sale');

-- Order 6 -> User 16 (elenavargas@hotmail.com)
INSERT INTO paypal_payments (id_internal_order, paypal_payment_payer_email, paypal_payment_status, paypal_payment_transaction_id, paypal_payment_amount, paypal_payment_currency, paypal_payment_transaction_type)
VALUES (6, 'elenav_paypal@example.com', 'COMPLETED', 'PAY-FGHJI56789KLMNO12345PQRST67890', 120.00, 'PEN', 'Sale');

-- Order 7 -> User 17 (mariapaz@gmail.com)
INSERT INTO paypal_payments (id_internal_order, paypal_payment_payer_email, paypal_payment_status, paypal_payment_transaction_id, paypal_payment_amount, paypal_payment_currency, paypal_payment_transaction_type)
VALUES (7, 'mariapaz_paypal@example.com', 'COMPLETED', 'PAY-UVWXY01234ZABCD56789EFGHI01234', 90.00, 'PEN', 'Sale');

-- Order 8 -> User 18 (josesilva@outlook.com)
INSERT INTO paypal_payments (id_internal_order, paypal_payment_payer_email, paypal_payment_status, paypal_payment_transaction_id, paypal_payment_amount, paypal_payment_currency, paypal_payment_transaction_type)
VALUES (8, 'josesilva_paypal@example.com', 'COMPLETED', 'PAY-JKLMN56789OPQRS01234TUVWZ56789', 180.00, 'PEN', 'Sale');

-- Order 9 -> User 19 (sofiadiaz@gmail.com)
INSERT INTO paypal_payments (id_internal_order, paypal_payment_payer_email, paypal_payment_status, paypal_payment_transaction_id, paypal_payment_amount, paypal_payment_currency, paypal_payment_transaction_type)
VALUES (9, 'sofiadiaz_paypal@example.com', 'COMPLETED', 'PAY-ABCDEFG12345HIJKL67890MNO P012', 250.00, 'PEN', 'Sale');

-- Order 10 -> User 20 (miguellopez@hotmail.com)
INSERT INTO paypal_payments (id_internal_order, paypal_payment_payer_email, paypal_payment_status, paypal_payment_transaction_id, paypal_payment_amount, paypal_payment_currency, paypal_payment_transaction_type)
VALUES (10, 'miguell_paypal@example.com', 'COMPLETED', 'PAY-QRSTUVW34567XYZAB89012CDEF45678', 70.00, 'PEN', 'Sale');

-- Order 11 -> User 11 (carlosgomez@gmail.com)
INSERT INTO paypal_payments (id_internal_order, paypal_payment_payer_email, paypal_payment_status, paypal_payment_transaction_id, paypal_payment_amount, paypal_payment_currency, paypal_payment_transaction_type)
VALUES (11, 'carlosgomez_paypal@example.com', 'COMPLETED', 'PAY-GHIJKL90123MNO P45678QRSTU9012', 450.00, 'PEN', 'Sale');

-- Order 12 -> User 13 (pedrolopez@outlook.com)
INSERT INTO paypal_payments (id_internal_order, paypal_payment_payer_email, paypal_payment_status, paypal_payment_transaction_id, paypal_payment_amount, paypal_payment_currency, paypal_payment_transaction_type)
VALUES (12, 'pedrolopez_paypal@example.com', 'PENDING', 'PAY-VWXYZ34567ABCDE89012FGHIJ34567', 110.00, 'PEN', 'Sale'); -- Example pending payment

-- Order 13 -> User 15 (javierrios@gmail.com)
INSERT INTO paypal_payments (id_internal_order, paypal_payment_payer_email, paypal_payment_status, paypal_payment_transaction_id, paypal_payment_amount, paypal_payment_currency, paypal_payment_transaction_type)
VALUES (13, 'javierrios_paypal@example.com', 'COMPLETED', 'PAY-KLMNO78901PQRST23456UVWXY78901', 500.00, 'PEN', 'Sale');

-- Order 14 -> User 17 (mariapaz@gmail.com)
INSERT INTO paypal_payments (id_internal_order, paypal_payment_payer_email, paypal_payment_status, paypal_payment_transaction_id, paypal_payment_amount, paypal_payment_currency, paypal_payment_transaction_type)
VALUES (14, 'mariapaz_paypal@example.com', 'COMPLETED', 'PAY-ZABCD23456EFGHI78901JKLMNOP234', 100.00, 'PEN', 'Sale');

-- Order 15 -> User 19 (sofiadiaz@gmail.com)
INSERT INTO paypal_payments (id_internal_order, paypal_payment_payer_email, paypal_payment_status, paypal_payment_transaction_id, paypal_payment_amount, paypal_payment_currency, paypal_payment_transaction_type)
VALUES (15, 'sofiadiaz_paypal@example.com', 'COMPLETED', 'PAY-QRSTU78901VWXYZ23456ABCDE78901', 400.00, 'PEN', 'Sale');

-- Order 16 -> User 12 (lauradiaz@hotmail.com)
INSERT INTO paypal_payments (id_internal_order, paypal_payment_payer_email, paypal_payment_status, paypal_payment_transaction_id, paypal_payment_amount, paypal_payment_currency, paypal_payment_transaction_type)
VALUES (16, 'lauradiaz_paypal@example.com', 'COMPLETED', 'PAY-FGHIJ23456KLMNO78901PQRST23456', 600.00, 'PEN', 'Sale');

-- Order 17 -> User 14 (sofiafernandez@gmail.com)
INSERT INTO paypal_payments (id_internal_order, paypal_payment_payer_email, paypal_payment_status, paypal_payment_transaction_id, paypal_payment_amount, paypal_payment_currency, paypal_payment_transaction_type)
VALUES (17, 'sofiaf_paypal@example.com', 'COMPLETED', 'PAY-UVWXY78901ZABCD23456EFGHI78901', 800.00, 'PEN', 'Sale');

-- Order 18 -> User 16 (elenavargas@hotmail.com)
INSERT INTO paypal_payments (id_internal_order, paypal_payment_payer_email, paypal_payment_status, paypal_payment_transaction_id, paypal_payment_amount, paypal_payment_currency, paypal_payment_transaction_type)
VALUES (18, 'elenav_paypal@example.com', 'COMPLETED', 'PAY-JKLMN23456OPQRS78901TUVWZ23456', 50.00, 'PEN', 'Sale');

-- Order 19 -> User 18 (josesilva@outlook.com)
INSERT INTO paypal_payments (id_internal_order, paypal_payment_payer_email, paypal_payment_status, paypal_payment_transaction_id, paypal_payment_amount, paypal_payment_currency, paypal_payment_transaction_type)
VALUES (19, 'josesilva_paypal@example.com', 'REFUNDED', 'PAY-ABCDE78901FGHJI23456KLMNO78901', 180.00, 'PEN', 'Sale'); -- Example order that was refunded
INSERT INTO paypal_payments (id_internal_order, paypal_payment_payer_email, paypal_payment_status, paypal_payment_transaction_id, paypal_payment_amount, paypal_payment_currency, paypal_payment_transaction_type)
VALUES (19, 'josesilva_paypal@example.com', 'COMPLETED', 'REF-PQRST23456UVWXY78901ZABCD23456', 180.00, 'PEN', 'Refund'); -- Corresponding refund transaction

-- Order 20 -> User 20 (miguellopez@hotmail.com)
INSERT INTO paypal_payments (id_internal_order, paypal_payment_payer_email, paypal_payment_status, paypal_payment_transaction_id, paypal_payment_amount, paypal_payment_currency, paypal_payment_transaction_type)
VALUES (20, 'miguell_paypal@example.com', 'COMPLETED', 'PAY-EFGHI78901JKLMN23456OPQRS78901', 1200.00, 'PEN', 'Sale');

-- One additional payment for Order 1 to reach 20 total payments, maybe a partial refund example?
-- Order 1 -> User 11 (carlosgomez@gmail.com)
INSERT INTO paypal_payments (id_internal_order, paypal_payment_payer_email, paypal_payment_status, paypal_payment_transaction_id, paypal_payment_amount, paypal_payment_currency, paypal_payment_transaction_type)
VALUES (1, 'carlosgomez_paypal@example.com', 'COMPLETED', 'REF-TUVWZ23456ABCDE78901FGHIJ23456', 20.00, 'PEN', 'Refund'); -- Example partial refund


-- [ORDERS DETAILS TABLE]
INSERT INTO order_details (id_order, id_work,  order_details_status,  order_details_quantity,  order_details_total_price,  order_details_access_granted)
VALUES (1, 1, 'COMPLETED', 1, 80.00, TRUE); -- Order 1, Work 1 (Logo Design, $80)

INSERT INTO order_details (id_order, id_work,  order_details_status,  order_details_quantity,  order_details_total_price,  order_details_access_granted)
VALUES (2, 3, 'COMPLETED', 1, 200.00, TRUE); -- Order 2, Work 3 (UI Design, $200)

INSERT INTO order_details (id_order, id_work,  order_details_status,  order_details_quantity,  order_details_total_price,  order_details_access_granted)
VALUES (3, 8, 'COMPLETED', 1, 180.00, TRUE); -- Order 3, Work 8 (Character Design, $180)

INSERT INTO order_details (id_order, id_work,  order_details_status,  order_details_quantity,  order_details_total_price,  order_details_access_granted)
VALUES (4, 10, 'COMPLETED', 2, 140.00, TRUE); -- Order 4, Work 10 (Illustrated Portrait, $70 * 2)

INSERT INTO order_details (id_order, id_work,  order_details_status,  order_details_quantity,  order_details_total_price,  order_details_access_granted)
VALUES (5, 13, 'COMPLETED', 1, 500.00, TRUE); -- Order 5, Work 13 (Frontend Basic, $500)

INSERT INTO order_details (id_order, id_work,  order_details_status,  order_details_quantity,  order_details_total_price,  order_details_access_granted)
VALUES (6, 15, 'COMPLETED', 1, 400.00, TRUE); -- Order 6, Work 15 (WP Plugin, $400)

INSERT INTO order_details (id_order, id_work,  order_details_status,  order_details_quantity,  order_details_total_price,  order_details_access_granted)
VALUES (7, 17, 'COMPLETED', 1, 800.00, TRUE); -- Order 7, Work 17 (Mobile App Prototype, $800)

INSERT INTO order_details (id_order, id_work,  order_details_status,  order_details_quantity,  order_details_total_price,  order_details_access_granted)
VALUES (8, 2, 'COMPLETED', 1, 150.50, TRUE); -- Order 8, Work 2 (Packaging Design, $150.50)

INSERT INTO order_details (id_order, id_work,  order_details_status,  order_details_quantity,  order_details_total_price,  order_details_access_granted)
VALUES (9, 4, 'COMPLETED', 5, 125.00, TRUE); -- Order 9, Work 4 (Social Media Post, $25 * 5)

INSERT INTO order_details (id_order, id_work,  order_details_status,  order_details_quantity,  order_details_total_price,  order_details_access_granted)
VALUES (10, 7, 'COMPLETED', 1, 450.00, TRUE); -- Order 10, Work 7 (Website Redesign, $450)

INSERT INTO order_details (id_order, id_work,  order_details_status,  order_details_quantity,  order_details_total_price,  order_details_access_granted)
VALUES (11, 12, 'COMPLETED', 1, 110.00, TRUE); -- Order 11, Work 12 (Editorial Illustration, $110)

INSERT INTO order_details (id_order, id_work,  order_details_status,  order_details_quantity,  order_details_total_price,  order_details_access_granted)
VALUES (12, 14, 'PENDING', 1, 100.00, FALSE); -- Order 12, Work 14 (Python Script, $100) - Payment was PENDING

INSERT INTO order_details (id_order, id_work,  order_details_status,  order_details_quantity,  order_details_total_price,  order_details_access_granted)
VALUES (13, 16, 'COMPLETED', 1, 600.00, TRUE); -- Order 13, Work 16 (API RESTful, $600)

INSERT INTO order_details (id_order, id_work,  order_details_status,  order_details_quantity,  order_details_total_price,  order_details_access_granted)
VALUES (14, 18, 'COMPLETED', 3, 150.00, TRUE); -- Order 14, Work 18 (Bug Fixing, $50 * 3)

INSERT INTO order_details (id_order, id_work,  order_details_status,  order_details_quantity,  order_details_total_price,  order_details_access_granted)
VALUES (15, 9, 'COMPLETED', 1, 250.00, TRUE); -- Order 15, Work 9 (Kids Book Illustration, $250)

INSERT INTO order_details (id_order, id_work,  order_details_status,  order_details_quantity,  order_details_total_price,  order_details_access_granted)
VALUES (16, 1, 'COMPLETED', 1, 80.00, TRUE); -- Order 16, Work 1 (Logo Design, $80) - Work 1 purchased again

INSERT INTO order_details (id_order, id_work,  order_details_status,  order_details_quantity,  order_details_total_price,  order_details_access_granted)
VALUES (17, 3, 'CANCELLED', 1, 200.00, FALSE); -- Order 17, Work 3 (UI Design, $200) - Example cancelled detail

INSERT INTO order_details (id_order, id_work,  order_details_status,  order_details_quantity,  order_details_total_price,  order_details_access_granted)
VALUES (18, 8, 'PENDING', 1, 180.00, FALSE); -- Order 18, Work 8 (Character Design, $180)

INSERT INTO order_details (id_order, id_work,  order_details_status,  order_details_quantity,  order_details_total_price,  order_details_access_granted)
VALUES (19, 19, 'REFUNDED', 1, 180.00, FALSE); -- Order 19, Work 19 (DB Optimization, $180) - Linked to the refunded payment

INSERT INTO order_details (id_order, id_work,  order_details_status,  order_details_quantity,  order_details_total_price,  order_details_access_granted)
VALUES (20, 20, 'COMPLETED', 1, 1200.00, TRUE); -- Order 20, Work 20 (Ecommerce Basic, $1200)


-- [ORDER DETAILS TABLE]
INSERT INTO order_details (id_order, id_work, order_details_status, order_details_quantity, order_details_total_price, order_details_access_granted)
VALUES (1, 1, 'COMPLETED', 1, 80.00, TRUE); -- Order 1, Work 1 (Logo Design, $80)

INSERT INTO order_details (id_order, id_work, order_details_status, order_details_quantity, order_details_total_price, order_details_access_granted)
VALUES (2, 3, 'COMPLETED', 1, 200.00, TRUE); -- Order 2, Work 3 (UI Design, $200)

INSERT INTO order_details (id_order, id_work, order_details_status, order_details_quantity, order_details_total_price, order_details_access_granted)
VALUES (3, 8, 'COMPLETED', 1, 180.00, TRUE); -- Order 3, Work 8 (Character Design, $180)

INSERT INTO order_details (id_order, id_work, order_details_status, order_details_quantity, order_details_total_price, order_details_access_granted)
VALUES (4, 10, 'COMPLETED', 2, 140.00, TRUE); -- Order 4, Work 10 (Illustrated Portrait, $70 * 2)

INSERT INTO order_details (id_order, id_work, order_details_status, order_details_quantity, order_details_total_price, order_details_access_granted)
VALUES (5, 13, 'COMPLETED', 1, 500.00, TRUE); -- Order 5, Work 13 (Frontend Basic, $500)

INSERT INTO order_details (id_order, id_work, order_details_status, order_details_quantity, order_details_total_price, order_details_access_granted)
VALUES (6, 15, 'COMPLETED', 1, 400.00, TRUE); -- Order 6, Work 15 (WP Plugin, $400)

INSERT INTO order_details (id_order, id_work, order_details_status, order_details_quantity, order_details_total_price, order_details_access_granted)
VALUES (7, 17, 'COMPLETED', 1, 800.00, TRUE); -- Order 7, Work 17 (Mobile App Prototype, $800)

INSERT INTO order_details (id_order, id_work, order_details_status, order_details_quantity, order_details_total_price, order_details_access_granted)
VALUES (8, 2, 'COMPLETED', 1, 150.50, TRUE); -- Order 8, Work 2 (Packaging Design, $150.50)

INSERT INTO order_details (id_order, id_work, order_details_status, order_details_quantity, order_details_total_price, order_details_access_granted)
VALUES (9, 4, 'COMPLETED', 5, 125.00, TRUE); -- Order 9, Work 4 (Social Media Post, $25 * 5)

INSERT INTO order_details (id_order, id_work, order_details_status, order_details_quantity, order_details_total_price, order_details_access_granted)
VALUES (10, 7, 'COMPLETED', 1, 450.00, TRUE); -- Order 10, Work 7 (Website Redesign, $450)

INSERT INTO order_details (id_order, id_work, order_details_status, order_details_quantity, order_details_total_price, order_details_access_granted)
VALUES (11, 12, 'COMPLETED', 1, 110.00, TRUE); -- Order 11, Work 12 (Editorial Illustration, $110)

INSERT INTO order_details (id_order, id_work, order_details_status, order_details_quantity, order_details_total_price, order_details_access_granted)
VALUES (12, 14, 'PENDING', 1, 100.00, FALSE); -- Order 12, Work 14 (Python Script, $100) - Payment was PENDING

INSERT INTO order_details (id_order, id_work, order_details_status, order_details_quantity, order_details_total_price, order_details_access_granted)
VALUES (13, 16, 'COMPLETED', 1, 600.00, TRUE); -- Order 13, Work 16 (API RESTful, $600)

INSERT INTO order_details (id_order, id_work, order_details_status, order_details_quantity, order_details_total_price, order_details_access_granted)
VALUES (14, 18, 'COMPLETED', 3, 150.00, TRUE); -- Order 14, Work 18 (Bug Fixing, $50 * 3)

INSERT INTO order_details (id_order, id_work, order_details_status, order_details_quantity, order_details_total_price, order_details_access_granted)
VALUES (15, 9, 'COMPLETED', 1, 250.00, TRUE); -- Order 15, Work 9 (Kids Book Illustration, $250)

INSERT INTO order_details (id_order, id_work, order_details_status, order_details_quantity, order_details_total_price, order_details_access_granted)
VALUES (16, 1, 'COMPLETED', 1, 80.00, TRUE); -- Order 16, Work 1 (Logo Design, $80) - Work 1 purchased again

INSERT INTO order_details (id_order, id_work, order_details_status, order_details_quantity, order_details_total_price, order_details_access_granted)
VALUES (17, 3, 'CANCELLED', 1, 200.00, FALSE); -- Order 17, Work 3 (UI Design, $200) - Example cancelled detail

INSERT INTO order_details (id_order, id_work, order_details_status, order_details_quantity, order_details_total_price, order_details_access_granted)
VALUES (18, 8, 'PENDING', 1, 180.00, FALSE); -- Order 18, Work 8 (Character Design, $180)

INSERT INTO order_details (id_order, id_work, order_details_status, order_details_quantity, order_details_total_price, order_details_access_granted)
VALUES (19, 19, 'REFUNDED', 1, 180.00, FALSE); -- Order 19, Work 19 (DB Optimization, $180) - Linked to the refunded payment

INSERT INTO order_details (id_order, id_work, order_details_status, order_details_quantity, order_details_total_price, order_details_access_granted)
VALUES (20, 20, 'COMPLETED', 1, 1200.00, TRUE); -- Order 20, Work 20 (Ecommerce Basic, $1200)


-- [SELLER PAYMENTS TABLE]
INSERT INTO seller_payments (seller_paypal_payment, seller_id, seller_amount_received, seller_payment_status)
VALUES (NULL, 2, 50.00, 'REQUESTED'); -- Payout requested by seller 2

INSERT INTO seller_payments (seller_paypal_payment, seller_id, seller_amount_received, seller_payment_status)
VALUES (NULL, 3, 120.50, 'PROCESSED'); -- Payout processed for seller 3

INSERT INTO seller_payments (seller_paypal_payment, seller_id, seller_amount_received, seller_payment_status)
VALUES (NULL, 4, 85.00, 'PROCESSED'); -- Payout processed for seller 4

INSERT INTO seller_payments (seller_paypal_payment, seller_id, seller_amount_received, seller_payment_status)
VALUES (NULL, 5, 30.00, 'REQUESTED'); -- Payout requested by seller 5

INSERT INTO seller_payments (seller_paypal_payment, seller_id, seller_amount_received, seller_payment_status)
VALUES (NULL, 6, 200.00, 'PROCESSING'); -- Payout processing for seller 6

INSERT INTO seller_payments (seller_paypal_payment, seller_id, seller_amount_received, seller_payment_status)
VALUES (NULL, 7, 75.00, 'PROCESSED'); -- Payout processed for seller 7

INSERT INTO seller_payments (seller_paypal_payment, seller_id, seller_amount_received, seller_payment_status)
VALUES (NULL, 8, 150.00, 'PROCESSED'); -- Payout processed for seller 8

INSERT INTO seller_payments (seller_paypal_payment, seller_id, seller_amount_received, seller_payment_status)
VALUES (NULL, 9, 210.00, 'REQUESTED'); -- Payout requested by seller 9

INSERT INTO seller_payments (seller_paypal_payment, seller_id, seller_amount_received, seller_payment_status)
VALUES (NULL, 10, 60.00, 'PROCESSED'); -- Payout processed for seller 10

INSERT INTO seller_payments (seller_paypal_payment, seller_id, seller_amount_received, seller_payment_status)
VALUES (NULL, 2, 90.00, 'PROCESSED'); -- Another payout for seller 2

INSERT INTO seller_payments (seller_paypal_payment, seller_id, seller_amount_received, seller_payment_status)
VALUES (NULL, 3, 180.00, 'PROCESSING'); -- Another payout processing for seller 3

INSERT INTO seller_payments (seller_paypal_payment, seller_id, seller_amount_received, seller_payment_status)
VALUES (NULL, 4, 110.00, 'PROCESSED'); -- Another payout for seller 4

INSERT INTO seller_payments (seller_paypal_payment, seller_id, seller_amount_received, seller_payment_status)
VALUES (NULL, 5, 45.00, 'PROCESSED'); -- Another payout for seller 5

INSERT INTO seller_payments (seller_paypal_payment, seller_id, seller_amount_received, seller_payment_status)
VALUES (NULL, 6, 250.00, 'PROCESSED'); -- Another payout for seller 6

INSERT INTO seller_payments (seller_paypal_payment, seller_id, seller_amount_received, seller_payment_status)
VALUES (NULL, 7, 100.00, 'REQUESTED'); -- Another payout requested by seller 7

INSERT INTO seller_payments (seller_paypal_payment, seller_id, seller_amount_received, seller_payment_status)
VALUES (NULL, 8, 130.00, 'PROCESSED'); -- Another payout for seller 8

INSERT INTO seller_payments (seller_paypal_payment, seller_id, seller_amount_received, seller_payment_status)
VALUES (NULL, 9, 170.00, 'PROCESSED'); -- Another payout for seller 9

INSERT INTO seller_payments (seller_paypal_payment, seller_id, seller_amount_received, seller_payment_status)
VALUES (NULL, 10, 80.00, 'REQUESTED'); -- Another payout requested by seller 10

INSERT INTO seller_payments (seller_paypal_payment, seller_id, seller_amount_received, seller_payment_status)
VALUES (NULL, 2, 150.00, 'PROCESSING'); -- Another payout processing for seller 2

INSERT INTO seller_payments (seller_paypal_payment, seller_id, seller_amount_received, seller_payment_status)
VALUES (NULL, 3, 65.00, 'PROCESSED'); -- Another payout for seller 3


-- [COMMENTS TABLE]
INSERT INTO comments (comment_work_id, comment_user_id, comment_parent_id, comment_body, comment_is_deleted, comment_status)
VALUES (1, 11, NULL, 'Excelente trabajo de diseño de logo, muy profesional.', FALSE, 'approved'); -- Comment on Work 1 by Buyer 11

INSERT INTO comments (comment_work_id, comment_user_id, comment_parent_id, comment_body, comment_is_deleted, comment_status)
VALUES (3, 12, NULL, 'La interfaz de usuario se ve genial, ¿es adaptable a móvil?', FALSE, 'approved'); -- Comment on Work 3 by Buyer 12

INSERT INTO comments (comment_work_id, comment_user_id, comment_parent_id, comment_body, comment_is_deleted, comment_status)
VALUES (8, 13, NULL, 'Me encanta el estilo de diseño de personajes.', FALSE, 'approved'); -- Comment on Work 8 by Buyer 13

INSERT INTO comments (comment_work_id, comment_user_id, comment_parent_id, comment_body, comment_is_deleted, comment_status)
VALUES (13, 14, NULL, 'Interesado en el desarrollo frontend. ¿Qué tecnologías usas?', FALSE, 'approved'); -- Comment on Work 13 by Buyer 14

INSERT INTO comments (comment_work_id, comment_user_id, comment_parent_id, comment_body, comment_is_deleted, comment_status)
VALUES (17, 15, NULL, 'El prototipo de app móvil se ve prometedor.', FALSE, 'approved'); -- Comment on Work 17 by Buyer 15

INSERT INTO comments (comment_work_id, comment_user_id, comment_parent_id, comment_body, comment_is_deleted, comment_status)
VALUES (20, 16, NULL, 'Excelente servicio de desarrollo e-commerce.', FALSE, 'approved'); -- Comment on Work 20 by Buyer 16

INSERT INTO comments (comment_work_id, comment_user_id, comment_parent_id, comment_body, comment_is_deleted, comment_status)
VALUES (2, 17, NULL, 'Buen packaging, ¿ofreces impresión también?', FALSE, 'approved'); -- Comment on Work 2 by Buyer 17

INSERT INTO comments (comment_work_id, comment_user_id, comment_parent_id, comment_body, comment_is_deleted, comment_status)
VALUES (4, 18, NULL, 'Diseños para redes sociales muy creativos.', FALSE, 'approved'); -- Comment on Work 4 by Buyer 18

INSERT INTO comments (comment_work_id, comment_user_id, comment_parent_id, comment_body, comment_is_deleted, comment_status)
VALUES (9, 19, NULL, 'Las ilustraciones infantiles son adorables.', FALSE, 'approved'); -- Comment on Work 9 by Buyer 19

INSERT INTO comments (comment_work_id, comment_user_id, comment_parent_id, comment_body, comment_is_deleted, comment_status)
VALUES (14, 20, NULL, 'Útil script de Python. ¿Tienes más ejemplos?', FALSE, 'approved'); -- Comment on Work 14 by Buyer 20

-- Replies to existing comments (comment_parent_id references a comment_id above)
-- Assuming comment_id increments from 1 for these inserts

INSERT INTO comments (comment_work_id, comment_user_id, comment_parent_id, comment_body, comment_is_deleted, comment_status)
VALUES (1, 2, 1, '¡Muchas gracias por tu comentario! Me alegra que te guste mi trabajo.', FALSE, 'approved'); -- Seller 2 replies to comment 1 on Work 1

INSERT INTO comments (comment_work_id, comment_user_id, comment_parent_id, comment_body, comment_is_deleted, comment_status)
VALUES (3, 4, 2, 'Sí, todos mis diseños UI son completamente responsive.', FALSE, 'approved'); -- Seller 4 replies to comment 2 on Work 3

INSERT INTO comments (comment_work_id, comment_user_id, comment_parent_id, comment_body, comment_is_deleted, comment_status)
VALUES (8, 8, 3, 'Gracias! Pongo mucho esfuerzo en el diseño de personajes.', FALSE, 'approved'); -- Seller 8 replies to comment 3 on Work 8

INSERT INTO comments (comment_work_id, comment_user_id, comment_parent_id, comment_body, comment_is_deleted, comment_status)
VALUES (13, 2, 4, 'Principalmente uso HTML, CSS, y JavaScript (React/Vue).', FALSE, 'approved'); -- Seller 2 replies to comment 4 on Work 13

INSERT INTO comments (comment_work_id, comment_user_id, comment_parent_id, comment_body, comment_is_deleted, comment_status)
VALUES (17, 7, 5, 'Estamos trabajando en la versión completa. ¡Mantente atento!', FALSE, 'approved'); -- Seller 7 replies to comment 5 on Work 17 (assuming seller 7 is owner of work 17)

INSERT INTO comments (comment_work_id, comment_user_id, comment_parent_id, comment_body, comment_is_deleted, comment_status)
VALUES (20, 6, 6, 'Gracias por tu feedback. La idea es ofrecer una solución completa.', FALSE, 'approved'); -- Seller 6 replies to comment 6 on Work 20

INSERT INTO comments (comment_work_id, comment_user_id, comment_parent_id, comment_body, comment_is_deleted, comment_status)
VALUES (2, 3, 7, 'No, solo ofrezco el diseño del arte final listo para imprimir.', FALSE, 'approved'); -- Seller 3 replies to comment 7 on Work 2

INSERT INTO comments (comment_work_id, comment_user_id, comment_parent_id, comment_body, comment_is_deleted, comment_status)
VALUES (4, 5, 8, '¡Gracias! Siempre busco ideas frescas para mis posts.', FALSE, 'approved'); -- Seller 5 replies to comment 8 on Work 4

-- Examples with different status or deleted
INSERT INTO comments (comment_work_id, comment_user_id, comment_parent_id, comment_body, comment_is_deleted, comment_status)
VALUES (1, 11, 1, 'Tengo otra pregunta sobre la entrega.', FALSE, 'pending'); -- Another comment on Work 1, Status Pending

INSERT INTO comments (comment_work_id, comment_user_id, comment_parent_id, comment_body, comment_is_deleted, comment_status)
VALUES (8, 1, NULL, 'Este comentario es spam. Debe ser eliminado.', TRUE, 'rejected'); -- Example deleted and rejected comment by Admin (user_id 1)


-- [RATINGS TABLE]
INSERT INTO ratings (work_id, user_id, order_id, rating_score, rating_comment)
VALUES (1, 11, 1, 5, 'Excelente diseño de logo, justo lo que necesitaba.'); -- Rating for Work 1 by User 11 (Order 1)

INSERT INTO ratings (work_id, user_id, order_id, rating_score, rating_comment)
VALUES (3, 12, 2, 4, 'La interfaz se ve muy bien, fácil de usar.'); -- Rating for Work 3 by User 12 (Order 2)

INSERT INTO ratings (work_id, user_id, order_id, rating_score, rating_comment)
VALUES (8, 13, 3, 5, 'Diseño de personaje fantástico, muy detallado.'); -- Rating for Work 8 by User 13 (Order 3)

INSERT INTO ratings (work_id, user_id, order_id, rating_score, rating_comment)
VALUES (10, 14, 4, 4, 'Retrato ilustrado muy bonito, buena calidad.'); -- Rating for Work 10 by User 14 (Order 4)

INSERT INTO ratings (work_id, user_id, order_id, rating_score, rating_comment)
VALUES (13, 15, 5, 5, 'Rápido y eficiente desarrollo frontend.'); -- Rating for Work 13 by User 15 (Order 5)

INSERT INTO ratings (work_id, user_id, order_id, rating_score, rating_comment)
VALUES (15, 16, 6, 4, 'Plugin de WordPress funcional, cumple lo prometido.'); -- Rating for Work 15 by User 16 (Order 6)

INSERT INTO ratings (work_id, user_id, order_id, rating_score, rating_comment)
VALUES (17, 17, 7, 3, 'El prototipo es básico, pero muestra la idea.'); -- Rating for Work 17 by User 17 (Order 7)

INSERT INTO ratings (work_id, user_id, order_id, rating_score, rating_comment)
VALUES (2, 18, 8, 5, 'Diseño de packaging muy creativo y original.'); -- Rating for Work 2 by User 18 (Order 8)

INSERT INTO ratings (work_id, user_id, order_id, rating_score, rating_comment)
VALUES (4, 19, 9, 5, 'Excelentes posts para redes, muy llamativos.'); -- Rating for Work 4 by User 19 (Order 9)

INSERT INTO ratings (work_id, user_id, order_id, rating_score, rating_comment)
VALUES (7, 20, 10, 4, 'Buen rediseño visual del sitio, aunque tomó tiempo.'); -- Rating for Work 7 by User 20 (Order 10)

INSERT INTO ratings (work_id, user_id, order_id, rating_score, rating_comment)
VALUES (12, 11, 11, 5, 'Ilustración editorial perfecta para mi artículo.'); -- Rating for Work 12 by User 11 (Order 11)

INSERT INTO ratings (work_id, user_id, order_id, rating_score, rating_comment)
VALUES (14, 13, 12, 2, 'El script de Python funcionó, pero necesité hacer ajustes.'); -- Rating for Work 14 by User 13 (Order 12)

INSERT INTO ratings (work_id, user_id, order_id, rating_score, rating_comment)
VALUES (16, 15, 13, 4, 'La API RESTful es simple, pero eficaz para mi necesidad.'); -- Rating for Work 16 by User 15 (Order 13)

INSERT INTO ratings (work_id, user_id, order_id, rating_score, rating_comment)
VALUES (18, 17, 14, 5, 'Corrección de bugs muy rápida y efectiva.'); -- Rating for Work 18 by User 17 (Order 14)

INSERT INTO ratings (work_id, user_id, order_id, rating_score, rating_comment)
VALUES (9, 19, 15, 5, 'Las ilustraciones infantiles son justo lo que quería, muy bonitas.'); -- Rating for Work 9 by User 19 (Order 15), comment not NULL

INSERT INTO ratings (work_id, user_id, order_id, rating_score, rating_comment)
VALUES (1, 18, 16, 4, NULL); -- Rating for Work 1 by User 18 (Order 16), no comment

INSERT INTO ratings (work_id, user_id, order_id, rating_score, rating_comment)
VALUES (3, 20, 17, 1, 'Cancelé el pedido, no puedo valorar el trabajo.'); -- Rating for Work 3 by User 20 (Order 17 was CANCELLED in order_details)

INSERT INTO ratings (work_id, user_id, order_id, rating_score, rating_comment)
VALUES (8, 11, 18, 3, 'El diseño está bien, pero la comunicación fue lenta.'); -- Rating for Work 8 by User 11 (Order 18 was PENDING)

INSERT INTO ratings (work_id, user_id, order_id, rating_score, rating_comment)
VALUES (19, 13, 19, 1, 'Hubo un problema con la optimización, tuve que pedir reembolso.'); -- Rating for Work 19 by User 13 (Order 19 was REFUNDED)

INSERT INTO ratings (work_id, user_id, order_id, rating_score, rating_comment)
VALUES (20, 15, 20, 5, 'La tienda online funciona perfecto, muy recomendado.'); -- Rating for Work 20 by User 15 (Order 20)


-- [SPLIT PAYMENTS TABLE]
INSERT INTO split_payments (id_seller, id_paypal_payment, split_amount, split_payment_status, commission_percentage)
VALUES (2, 1, 68.00, 'CALCULATED', 15.00); -- From PayPal 1 (Order 1, Work 1 by Seller 2)

INSERT INTO split_payments (id_seller, id_paypal_payment, split_amount, split_payment_status, commission_percentage)
VALUES (4, 2, 127.93, 'CALCULATED', 15.00); -- From PayPal 2 (Order 2, Work 3 by Seller 4)

INSERT INTO split_payments (id_seller, id_paypal_payment, split_amount, split_payment_status, commission_percentage)
VALUES (8, 3, 170.00, 'CALCULATED', 15.00); -- From PayPal 3 (Order 3, Work 8 by Seller 8)

INSERT INTO split_payments (id_seller, id_paypal_payment, split_amount, split_payment_status, commission_percentage)
VALUES (10, 4, 21.25, 'CALCULATED', 15.00); -- From PayPal 4 (Order 4, Work 10 by Seller 10)

INSERT INTO split_payments (id_seller, id_paypal_payment, split_amount, split_payment_status, commission_percentage)
VALUES (2, 5, 255.00, 'CALCULATED', 15.00); -- From PayPal 5 (Order 5, Work 13 by Seller 2)

INSERT INTO split_payments (id_seller, id_paypal_payment, split_amount, split_payment_status, commission_percentage)
VALUES (4, 6, 102.00, 'CALCULATED', 15.00); -- From PayPal 6 (Order 6, Work 15 by Seller 4)

INSERT INTO split_payments (id_seller, id_paypal_payment, split_amount, split_payment_status, commission_percentage)
VALUES (7, 7, 76.50, 'CALCULATED', 15.00); -- From PayPal 7 (Order 7, Work 17 by Seller 7)

INSERT INTO split_payments (id_seller, id_paypal_payment, split_amount, split_payment_status, commission_percentage)
VALUES (3, 8, 153.00, 'CALCULATED', 15.00); -- From PayPal 8 (Order 8, Work 2 by Seller 3)

INSERT INTO split_payments (id_seller, id_paypal_payment, split_amount, split_payment_status, commission_percentage)
VALUES (5, 9, 212.50, 'CALCULATED', 15.00); -- From PayPal 9 (Order 9, Work 4 by Seller 5)

INSERT INTO split_payments (id_seller, id_paypal_payment, split_amount, split_payment_status, commission_percentage)
VALUES (4, 10, 59.50, 'CALCULATED', 15.00); -- From PayPal 10 (Order 10, Work 7 by Seller 4)

INSERT INTO split_payments (id_seller, id_paypal_payment, split_amount, split_payment_status, commission_percentage)
VALUES (8, 11, 382.50, 'CALCULATED', 15.00); -- From PayPal 11 (Order 11, Work 12 by Seller 8)

INSERT INTO split_payments (id_seller, id_paypal_payment, split_amount, split_payment_status, commission_percentage)
VALUES (3, 12, 93.50, 'PENDING_PAYMENT', 15.00); -- From PayPal 12 (Order 12, Work 14 by Seller 3 - PayPal status was PENDING)

INSERT INTO split_payments (id_seller, id_paypal_payment, split_amount, split_payment_status, commission_percentage)
VALUES (5, 13, 425.00, 'CALCULATED', 15.00); -- From PayPal 13 (Order 13, Work 16 by Seller 5)

INSERT INTO split_payments (id_seller, id_paypal_payment, split_amount, split_payment_status, commission_percentage)
VALUES (9, 14, 85.00, 'CALCULATED', 15.00); -- From PayPal 14 (Order 14, Work 18 by Seller 9)

INSERT INTO split_payments (id_seller, id_paypal_payment, split_amount, split_payment_status, commission_percentage)
VALUES (9, 15, 340.00, 'CALCULATED', 15.00); -- From PayPal 15 (Order 15, Work 9 by Seller 9)

INSERT INTO split_payments (id_seller, id_paypal_payment, split_amount, split_payment_status, commission_percentage)
VALUES (2, 16, 510.00, 'CALCULATED', 15.00); -- From PayPal 16 (Order 16, Work 1 by Seller 2)

INSERT INTO split_payments (id_seller, id_paypal_payment, split_amount, split_payment_status, commission_percentage)
VALUES (4, 17, 680.00, 'CALCULATED', 15.00); -- From PayPal 17 (Order 17, Work 3 by Seller 4)

INSERT INTO split_payments (id_seller, id_paypal_payment, split_amount, split_payment_status, commission_percentage)
VALUES (8, 18, 42.50, 'CALCULATED', 15.00); -- From PayPal 18 (Order 18, Work 8 by Seller 8)

INSERT INTO split_payments (id_seller, id_paypal_payment, split_amount, split_payment_status, commission_percentage)
VALUES (10, 19, 153.00, 'REFUNDED_SOURCE', 15.00); -- From PayPal 19 (Sale, Order 19, Work 19 by Seller 10 - Order was refunded)

INSERT INTO split_payments (id_seller, id_paypal_payment, split_amount, split_payment_status, commission_percentage)
VALUES (6, 20, 1020.00, 'CALCULATED', 15.00); -- From PayPal 20 (Order 20, Work 20 by Seller 6)

-- [SOCIAL LOGINS TABLE]
INSERT INTO social_logins (id_social_login_user, social_login_provider, social_login_provider_user_id)
VALUES (1, 'google', 'google_user_id_10001'); -- User 1 (Admin) with Google login

INSERT INTO social_logins (id_social_login_user, social_login_provider, social_login_provider_user_id)
VALUES (2, 'google', 'google_user_id_10002'); -- User 2 (Seller) with Google login

INSERT INTO social_logins (id_social_login_user, social_login_provider, social_login_provider_user_id)
VALUES (3, 'google', 'google_user_id_10003'); -- User 3 (Seller) with Google login

INSERT INTO social_logins (id_social_login_user, social_login_provider, social_login_provider_user_id)
VALUES (4, 'google', 'google_user_id_10004'); -- User 4 (Seller) with Google login

INSERT INTO social_logins (id_social_login_user, social_login_provider, social_login_provider_user_id)
VALUES (5, 'google', 'google_user_id_10005'); -- User 5 (Seller) with Google login

INSERT INTO social_logins (id_social_login_user, social_login_provider, social_login_provider_user_id)
VALUES (6, 'google', 'google_user_id_10006'); -- User 6 (Seller) with Google login

INSERT INTO social_logins (id_social_login_user, social_login_provider, social_login_provider_user_id)
VALUES (7, 'google', 'google_user_id_10007'); -- User 7 (Seller) with Google login

INSERT INTO social_logins (id_social_login_user, social_login_provider, social_login_provider_user_id)
VALUES (8, 'google', 'google_user_id_10008'); -- User 8 (Seller) with Google login

INSERT INTO social_logins (id_social_login_user, social_login_provider, social_login_provider_user_id)
VALUES (9, 'google', 'google_user_id_10009'); -- User 9 (Seller) with Google login

INSERT INTO social_logins (id_social_login_user, social_login_provider, social_login_provider_user_id)
VALUES (10, 'google', 'google_user_id_10010'); -- User 10 (Seller) with Google login

INSERT INTO social_logins (id_social_login_user, social_login_provider, social_login_provider_user_id)
VALUES (11, 'google', 'google_user_id_10011'); -- User 11 (Buyer) with Google login

INSERT INTO social_logins (id_social_login_user, social_login_provider, social_login_provider_user_id)
VALUES (12, 'google', 'google_user_id_10012'); -- User 12 (Buyer) with Google login

INSERT INTO social_logins (id_social_login_user, social_login_provider, social_login_provider_user_id)
VALUES (13, 'google', 'google_user_id_10013'); -- User 13 (Buyer) with Google login

INSERT INTO social_logins (id_social_login_user, social_login_provider, social_login_provider_user_id)
VALUES (14, 'google', 'google_user_id_10014'); -- User 14 (Buyer) with Google login

INSERT INTO social_logins (id_social_login_user, social_login_provider, social_login_provider_user_id)
VALUES (15, 'google', 'google_user_id_10015'); -- User 15 (Buyer) with Google login

INSERT INTO social_logins (id_social_login_user, social_login_provider, social_login_provider_user_id)
VALUES (16, 'google', 'google_user_id_10016'); -- User 16 (Buyer) with Google login

INSERT INTO social_logins (id_social_login_user, social_login_provider, social_login_provider_user_id)
VALUES (17, 'google', 'google_user_id_10017'); -- User 17 (Buyer) with Google login

INSERT INTO social_logins (id_social_login_user, social_login_provider, social_login_provider_user_id)
VALUES (18, 'google', 'google_user_id_10018'); -- User 18 (Buyer) with Google login

INSERT INTO social_logins (id_social_login_user, social_login_provider, social_login_provider_user_id)
VALUES (19, 'google', 'google_user_id_10019'); -- User 19 (Buyer) with Google login

INSERT INTO social_logins (id_social_login_user, social_login_provider, social_login_provider_user_id)
VALUES (20, 'google', 'google_user_id_10020'); -- User 20 (Buyer) with Google login


-- [USER ROLES]
-- User 1 (Administrator) gets Role 1 (Administrator)
INSERT INTO user_roles (id_user, id_role) VALUES (1, 1);

-- Users 2-10 (Sellers) get Role 2 (Seller) - 9 users
INSERT INTO user_roles (id_user, id_role) VALUES (2, 2);
INSERT INTO user_roles (id_user, id_role) VALUES (3, 2);
INSERT INTO user_roles (id_user, id_role) VALUES (4, 2);
INSERT INTO user_roles (id_user, id_role) VALUES (5, 2);
INSERT INTO user_roles (id_user, id_role) VALUES (6, 2);
INSERT INTO user_roles (id_user, id_role) VALUES (7, 2);
INSERT INTO user_roles (id_user, id_role) VALUES (8, 2);
INSERT INTO user_roles (id_user, id_role) VALUES (9, 2);
INSERT INTO user_roles (id_user, id_role) VALUES (10, 2);
</file>

<file path="bootloader/src/main/resources/database/schema.sql">
-- --------------- CREATE DATABASE db_mk_certus -- ---------------

DROP DATABASE IF EXISTS db_mk_certus;
CREATE DATABASE db_mk_certus;
USE db_mk_certus;
-- --------------- CREATE TABLES -- ---------------

-- [1] TABLE roles
CREATE TABLE roles (
                       role_id INT AUTO_INCREMENT PRIMARY KEY,
                       role_name VARCHAR(50) NOT NULL,
                       role_description TEXT
);


-- [2] TABLE permissions
CREATE TABLE permissions (
                             permission_id INT AUTO_INCREMENT PRIMARY KEY,
                             permission_name VARCHAR(50) NOT NULL,
                             permission_description TEXT
);


-- [3] Tabla roles_permissions
CREATE TABLE roles_permissions (
                                   role_permission_id INT AUTO_INCREMENT PRIMARY KEY,
                                   id_role INT, -- FK
                                   id_permission INT, -- FK
                                   FOREIGN KEY (id_role) REFERENCES roles(role_id),
                                   FOREIGN KEY (id_permission) REFERENCES permissions(permission_id)
);


-- [4] TABLE users
CREATE TABLE users (
                       user_id INT AUTO_INCREMENT PRIMARY KEY,
                       id_role INT,-- FK
                       user_email VARCHAR(100) NOT NULL,
                       user_password VARCHAR(200) NOT NULL,
                       user_created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                       user_updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                       user_status BOOLEAN DEFAULT TRUE,

    -- Claves foráneas:
                       FOREIGN KEY (id_role) REFERENCES roles(role_id)
);

-- Tabla career_categories
CREATE TABLE career_categories (
                                   career_category_id INT AUTO_INCREMENT PRIMARY KEY,
                                   career_category_name VARCHAR(100) NOT NULL,
                                   career_category_description TEXT
);

-- Tabla: carrers
CREATE TABLE careers (
                         career_id INT AUTO_INCREMENT PRIMARY KEY,
                         id_career_category INT, -- FK
                         career_name VARCHAR(100) NOT NULL,
                         career_description TEXT,
                         FOREIGN KEY (id_career_category) REFERENCES career_categories(career_category_id)
);

-- Tabla people
CREATE TABLE people (
                        person_id INT AUTO_INCREMENT PRIMARY KEY,
                        id_user INT, -- FK
                        id_career INT, -- FK
                        person_name VARCHAR(100) NOT NULL,
                        person_lastname VARCHAR(100) NOT NULL,
                        person_dni CHAR(8),
                        person_mobile_phone VARCHAR(15),
                        person_gender CHAR(1),
                        person_institute_location VARCHAR(100),
                        person_institutional_email VARCHAR(100),
                        person_institutional_cycle INT,
                        FOREIGN KEY (id_user) REFERENCES users(user_id),
                        FOREIGN KEY (id_career) REFERENCES careers(career_id)
);


-- [6] Tabla work_categories
CREATE TABLE work_categories (
                                 work_category_id INT AUTO_INCREMENT PRIMARY KEY,
                                 work_category_name VARCHAR(100) NOT NULL,
                                 work_category_description TEXT
);


-- [7] TABLE works
CREATE TABLE works (
                       work_id INT AUTO_INCREMENT PRIMARY KEY,
                       id_seller_user INT, -- FK
                       id_work_category INT, -- FK
                       work_title VARCHAR(150) NOT NULL,
                       work_description TEXT,
                       work_category VARCHAR(100),
                       work_price DECIMAL(10,2),
                       work_is_deleted BOOLEAN,
                       work_image_url TEXT, -- ruta de lxs img/archivo
                       work_published_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                       work_updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                       work_status ENUM('PUBLICADO', 'EN REVISIÓN', 'RECHAZADO') DEFAULT 'en revision',


    -- Foreign keys :
                       FOREIGN KEY (id_seller_user) REFERENCES users(user_id),
                       FOREIGN KEY (id_work_category) REFERENCES work_categories(work_category_id)
);

-- [8] TABLE orders
CREATE TABLE orders (
                        order_id INT AUTO_INCREMENT PRIMARY KEY,
                        id_user INT NOT NULL, -- FK
                        FOREIGN KEY (id_user) REFERENCES users(user_id)
);

-- [9] TABLE paypal_payments
CREATE TABLE paypal_payments (
                                 paypal_payment_id INT AUTO_INCREMENT PRIMARY KEY,
                                 id_internal_order INT NOT NULL, -- FK
                                 paypal_payment_payer_email VARCHAR(255) NULL,
                                 paypal_payment_status VARCHAR(50) NOT NULL,
                                 paypal_payment_transaction_id VARCHAR(255) NULL UNIQUE,
                                 paypal_payment_amount DECIMAL(10, 2) NOT NULL,
                                 paypal_payment_currency CHAR(3) NOT NULL,
                                 paypal_payment_transaction_type VARCHAR(50) NOT NULL,
                                 paypal_payment_created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                                 paypal_payment_updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

    -- Foreign keys :
                                 FOREIGN KEY (id_internal_order) REFERENCES orders(order_id)
);


-- [10] TABLE order_details
CREATE TABLE order_details (
                               order_details_id INT AUTO_INCREMENT PRIMARY KEY,
                               id_order INT NOT NULL, -- FK
                               id_work INT NOT NULL, -- FK
                               order_details_status VARCHAR(50) NOT NULL,
                               order_details_quantity INT NOT NULL DEFAULT 1,
                               order_details_total_price DECIMAL(10, 2) NOT NULL,
                               order_details_created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                               order_details_access_granted BOOLEAN NULL,
                               FOREIGN KEY (id_order) REFERENCES orders(order_id),
                               FOREIGN KEY (id_work) REFERENCES works(work_id)
);

-- [11] TABLE seller_payments
CREATE TABLE seller_payments (
                                 seller_payment_id INT AUTO_INCREMENT PRIMARY KEY,
                                 seller_paypal_payment INT NULL, -- FK
                                 seller_id INT NOT NULL, -- FK
                                 seller_amount_received DECIMAL(10, 2) NOT NULL,
                                 seller_payment_status VARCHAR(50) NOT NULL,
                                 FOREIGN KEY (seller_paypal_payment) REFERENCES paypal_payments(paypal_payment_id),
                                 FOREIGN KEY (seller_id) REFERENCES users(user_id)
);


-- [12] TABLE comments
CREATE TABLE comments (
                          comment_id INT AUTO_INCREMENT PRIMARY KEY,
                          comment_work_id INT NOT NULL, -- FK
                          comment_user_id INT NOT NULL, -- FK
                          comment_parent_id INT NULL, -- FK
                          comment_body TEXT NOT NULL,
                          comment_is_deleted BOOLEAN,
                          comment_status VARCHAR(50) DEFAULT 'approved',
                          comment_created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                          comment_updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                          FOREIGN KEY (comment_work_id) REFERENCES works(work_id) ON DELETE CASCADE,
                          FOREIGN KEY (comment_user_id) REFERENCES users(user_id) ON DELETE CASCADE,
                          FOREIGN KEY (comment_parent_id) REFERENCES comments(comment_id) ON DELETE CASCADE
);

-- [13] TABLE ratings
CREATE TABLE ratings (
                         rating_id INT AUTO_INCREMENT PRIMARY KEY,
                         work_id INT NOT NULL, -- FK
                         user_id INT NOT NULL, -- FK
                         order_id INT NULL, -- FK
                         rating_score TINYINT UNSIGNED NOT NULL CHECK (rating_score BETWEEN 1 AND 5),
                         rating_comment TEXT NULL,
                         rating_created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                         FOREIGN KEY (work_id) REFERENCES works(work_id) ON DELETE CASCADE,
                         FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
                         FOREIGN KEY (order_id) REFERENCES orders(order_id) ON DELETE SET NULL
);

-- [14] TABLE split_payments
CREATE TABLE split_payments (
                                split_payment_id INT AUTO_INCREMENT PRIMARY KEY,
                                id_seller INT NOT NULL, -- FK
                                id_paypal_payment INT NULL, -- FK
                                split_amount DECIMAL(10, 2) NOT NULL,
                                split_payment_status VARCHAR(50) NOT NULL,
                                split_payment_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                                commission_percentage DECIMAL(5, 2) NULL,
                                FOREIGN KEY (id_seller) REFERENCES users(user_id),
                                FOREIGN KEY (id_paypal_payment) REFERENCES paypal_payments(paypal_payment_id)
);


-- [15] TABLE social_logins
CREATE TABLE social_logins (
                               social_login_id INT AUTO_INCREMENT PRIMARY KEY,
                               id_social_login_user INT NOT NULL, -- FK
                               social_login_provider VARCHAR(50) NOT NULL,
                               social_login_provider_user_id VARCHAR(255) NOT NULL,
                               social_login_linked_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                               FOREIGN KEY (id_social_login_user) REFERENCES users(user_id) ON DELETE CASCADE,
                               UNIQUE KEY uq_social_provider_user (social_login_provider, id_social_login_user),
                               UNIQUE KEY uq_social_user_provider (id_social_login_user, social_login_provider)
);



-- [16] TABLE user_roles
CREATE TABLE user_roles (
                            id_user INT NOT NULL, -- FK
                            id_role INT NOT NULL, -- FK
                            PRIMARY KEY (id_user, id_role),
                            FOREIGN KEY (id_user) REFERENCES users(user_id) ON DELETE CASCADE,
                            FOREIGN KEY (id_role) REFERENCES roles(role_id) ON DELETE CASCADE
);
</file>

<file path="LICENSE">
Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

   APPENDIX: How to apply the Apache License to your work.

      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "[]"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.

   Copyright [yyyy] [name of copyright owner]

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
</file>

<file path="mvnw">
#!/bin/sh
# ----------------------------------------------------------------------------
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
# ----------------------------------------------------------------------------

# ----------------------------------------------------------------------------
# Apache Maven Wrapper startup batch script, version 3.3.2
#
# Optional ENV vars
# -----------------
#   JAVA_HOME - location of a JDK home dir, required when download maven via java source
#   MVNW_REPOURL - repo url base for downloading maven distribution
#   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
#   MVNW_VERBOSE - true: enable verbose log; debug: trace the mvnw script; others: silence the output
# ----------------------------------------------------------------------------

set -euf
[ "${MVNW_VERBOSE-}" != debug ] || set -x

# OS specific support.
native_path() { printf %s\\n "$1"; }
case "$(uname)" in
CYGWIN* | MINGW*)
  [ -z "${JAVA_HOME-}" ] || JAVA_HOME="$(cygpath --unix "$JAVA_HOME")"
  native_path() { cygpath --path --windows "$1"; }
  ;;
esac

# set JAVACMD and JAVACCMD
set_java_home() {
  # For Cygwin and MinGW, ensure paths are in Unix format before anything is touched
  if [ -n "${JAVA_HOME-}" ]; then
    if [ -x "$JAVA_HOME/jre/sh/java" ]; then
      # IBM's JDK on AIX uses strange locations for the executables
      JAVACMD="$JAVA_HOME/jre/sh/java"
      JAVACCMD="$JAVA_HOME/jre/sh/javac"
    else
      JAVACMD="$JAVA_HOME/bin/java"
      JAVACCMD="$JAVA_HOME/bin/javac"

      if [ ! -x "$JAVACMD" ] || [ ! -x "$JAVACCMD" ]; then
        echo "The JAVA_HOME environment variable is not defined correctly, so mvnw cannot run." >&2
        echo "JAVA_HOME is set to \"$JAVA_HOME\", but \"\$JAVA_HOME/bin/java\" or \"\$JAVA_HOME/bin/javac\" does not exist." >&2
        return 1
      fi
    fi
  else
    JAVACMD="$(
      'set' +e
      'unset' -f command 2>/dev/null
      'command' -v java
    )" || :
    JAVACCMD="$(
      'set' +e
      'unset' -f command 2>/dev/null
      'command' -v javac
    )" || :

    if [ ! -x "${JAVACMD-}" ] || [ ! -x "${JAVACCMD-}" ]; then
      echo "The java/javac command does not exist in PATH nor is JAVA_HOME set, so mvnw cannot run." >&2
      return 1
    fi
  fi
}

# hash string like Java String::hashCode
hash_string() {
  str="${1:-}" h=0
  while [ -n "$str" ]; do
    char="${str%"${str#?}"}"
    h=$(((h * 31 + $(LC_CTYPE=C printf %d "'$char")) % 4294967296))
    str="${str#?}"
  done
  printf %x\\n $h
}

verbose() { :; }
[ "${MVNW_VERBOSE-}" != true ] || verbose() { printf %s\\n "${1-}"; }

die() {
  printf %s\\n "$1" >&2
  exit 1
}

trim() {
  # MWRAPPER-139:
  #   Trims trailing and leading whitespace, carriage returns, tabs, and linefeeds.
  #   Needed for removing poorly interpreted newline sequences when running in more
  #   exotic environments such as mingw bash on Windows.
  printf "%s" "${1}" | tr -d '[:space:]'
}

# parse distributionUrl and optional distributionSha256Sum, requires .mvn/wrapper/maven-wrapper.properties
while IFS="=" read -r key value; do
  case "${key-}" in
  distributionUrl) distributionUrl=$(trim "${value-}") ;;
  distributionSha256Sum) distributionSha256Sum=$(trim "${value-}") ;;
  esac
done <"${0%/*}/.mvn/wrapper/maven-wrapper.properties"
[ -n "${distributionUrl-}" ] || die "cannot read distributionUrl property in ${0%/*}/.mvn/wrapper/maven-wrapper.properties"

case "${distributionUrl##*/}" in
maven-mvnd-*bin.*)
  MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/
  case "${PROCESSOR_ARCHITECTURE-}${PROCESSOR_ARCHITEW6432-}:$(uname -a)" in
  *AMD64:CYGWIN* | *AMD64:MINGW*) distributionPlatform=windows-amd64 ;;
  :Darwin*x86_64) distributionPlatform=darwin-amd64 ;;
  :Darwin*arm64) distributionPlatform=darwin-aarch64 ;;
  :Linux*x86_64*) distributionPlatform=linux-amd64 ;;
  *)
    echo "Cannot detect native platform for mvnd on $(uname)-$(uname -m), use pure java version" >&2
    distributionPlatform=linux-amd64
    ;;
  esac
  distributionUrl="${distributionUrl%-bin.*}-$distributionPlatform.zip"
  ;;
maven-mvnd-*) MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/ ;;
*) MVN_CMD="mvn${0##*/mvnw}" _MVNW_REPO_PATTERN=/org/apache/maven/ ;;
esac

# apply MVNW_REPOURL and calculate MAVEN_HOME
# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
[ -z "${MVNW_REPOURL-}" ] || distributionUrl="$MVNW_REPOURL$_MVNW_REPO_PATTERN${distributionUrl#*"$_MVNW_REPO_PATTERN"}"
distributionUrlName="${distributionUrl##*/}"
distributionUrlNameMain="${distributionUrlName%.*}"
distributionUrlNameMain="${distributionUrlNameMain%-bin}"
MAVEN_USER_HOME="${MAVEN_USER_HOME:-${HOME}/.m2}"
MAVEN_HOME="${MAVEN_USER_HOME}/wrapper/dists/${distributionUrlNameMain-}/$(hash_string "$distributionUrl")"

exec_maven() {
  unset MVNW_VERBOSE MVNW_USERNAME MVNW_PASSWORD MVNW_REPOURL || :
  exec "$MAVEN_HOME/bin/$MVN_CMD" "$@" || die "cannot exec $MAVEN_HOME/bin/$MVN_CMD"
}

if [ -d "$MAVEN_HOME" ]; then
  verbose "found existing MAVEN_HOME at $MAVEN_HOME"
  exec_maven "$@"
fi

case "${distributionUrl-}" in
*?-bin.zip | *?maven-mvnd-?*-?*.zip) ;;
*) die "distributionUrl is not valid, must match *-bin.zip or maven-mvnd-*.zip, but found '${distributionUrl-}'" ;;
esac

# prepare tmp dir
if TMP_DOWNLOAD_DIR="$(mktemp -d)" && [ -d "$TMP_DOWNLOAD_DIR" ]; then
  clean() { rm -rf -- "$TMP_DOWNLOAD_DIR"; }
  trap clean HUP INT TERM EXIT
else
  die "cannot create temp dir"
fi

mkdir -p -- "${MAVEN_HOME%/*}"

# Download and Install Apache Maven
verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."
verbose "Downloading from: $distributionUrl"
verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"

# select .zip or .tar.gz
if ! command -v unzip >/dev/null; then
  distributionUrl="${distributionUrl%.zip}.tar.gz"
  distributionUrlName="${distributionUrl##*/}"
fi

# verbose opt
__MVNW_QUIET_WGET=--quiet __MVNW_QUIET_CURL=--silent __MVNW_QUIET_UNZIP=-q __MVNW_QUIET_TAR=''
[ "${MVNW_VERBOSE-}" != true ] || __MVNW_QUIET_WGET='' __MVNW_QUIET_CURL='' __MVNW_QUIET_UNZIP='' __MVNW_QUIET_TAR=v

# normalize http auth
case "${MVNW_PASSWORD:+has-password}" in
'') MVNW_USERNAME='' MVNW_PASSWORD='' ;;
has-password) [ -n "${MVNW_USERNAME-}" ] || MVNW_USERNAME='' MVNW_PASSWORD='' ;;
esac

if [ -z "${MVNW_USERNAME-}" ] && command -v wget >/dev/null; then
  verbose "Found wget ... using wget"
  wget ${__MVNW_QUIET_WGET:+"$__MVNW_QUIET_WGET"} "$distributionUrl" -O "$TMP_DOWNLOAD_DIR/$distributionUrlName" || die "wget: Failed to fetch $distributionUrl"
elif [ -z "${MVNW_USERNAME-}" ] && command -v curl >/dev/null; then
  verbose "Found curl ... using curl"
  curl ${__MVNW_QUIET_CURL:+"$__MVNW_QUIET_CURL"} -f -L -o "$TMP_DOWNLOAD_DIR/$distributionUrlName" "$distributionUrl" || die "curl: Failed to fetch $distributionUrl"
elif set_java_home; then
  verbose "Falling back to use Java to download"
  javaSource="$TMP_DOWNLOAD_DIR/Downloader.java"
  targetZip="$TMP_DOWNLOAD_DIR/$distributionUrlName"
  cat >"$javaSource" <<-END
	public class Downloader extends java.net.Authenticator
	{
	  protected java.net.PasswordAuthentication getPasswordAuthentication()
	  {
	    return new java.net.PasswordAuthentication( System.getenv( "MVNW_USERNAME" ), System.getenv( "MVNW_PASSWORD" ).toCharArray() );
	  }
	  public static void main( String[] args ) throws Exception
	  {
	    setDefault( new Downloader() );
	    java.nio.file.Files.copy( java.net.URI.create( args[0] ).toURL().openStream(), java.nio.file.Paths.get( args[1] ).toAbsolutePath().normalize() );
	  }
	}
	END
  # For Cygwin/MinGW, switch paths to Windows format before running javac and java
  verbose " - Compiling Downloader.java ..."
  "$(native_path "$JAVACCMD")" "$(native_path "$javaSource")" || die "Failed to compile Downloader.java"
  verbose " - Running Downloader.java ..."
  "$(native_path "$JAVACMD")" -cp "$(native_path "$TMP_DOWNLOAD_DIR")" Downloader "$distributionUrl" "$(native_path "$targetZip")"
fi

# If specified, validate the SHA-256 sum of the Maven distribution zip file
if [ -n "${distributionSha256Sum-}" ]; then
  distributionSha256Result=false
  if [ "$MVN_CMD" = mvnd.sh ]; then
    echo "Checksum validation is not supported for maven-mvnd." >&2
    echo "Please disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2
    exit 1
  elif command -v sha256sum >/dev/null; then
    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | sha256sum -c >/dev/null 2>&1; then
      distributionSha256Result=true
    fi
  elif command -v shasum >/dev/null; then
    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | shasum -a 256 -c >/dev/null 2>&1; then
      distributionSha256Result=true
    fi
  else
    echo "Checksum validation was requested but neither 'sha256sum' or 'shasum' are available." >&2
    echo "Please install either command, or disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2
    exit 1
  fi
  if [ $distributionSha256Result = false ]; then
    echo "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised." >&2
    echo "If you updated your Maven version, you need to update the specified distributionSha256Sum property." >&2
    exit 1
  fi
fi

# unzip and move
if command -v unzip >/dev/null; then
  unzip ${__MVNW_QUIET_UNZIP:+"$__MVNW_QUIET_UNZIP"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -d "$TMP_DOWNLOAD_DIR" || die "failed to unzip"
else
  tar xzf${__MVNW_QUIET_TAR:+"$__MVNW_QUIET_TAR"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -C "$TMP_DOWNLOAD_DIR" || die "failed to untar"
fi
printf %s\\n "$distributionUrl" >"$TMP_DOWNLOAD_DIR/$distributionUrlNameMain/mvnw.url"
mv -- "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" "$MAVEN_HOME" || [ -d "$MAVEN_HOME" ] || die "fail to move MAVEN_HOME"

clean || :
exec_maven "$@"
</file>

<file path="mvnw.cmd">
<# : batch portion
@REM ----------------------------------------------------------------------------
@REM Licensed to the Apache Software Foundation (ASF) under one
@REM or more contributor license agreements.  See the NOTICE file
@REM distributed with this work for additional information
@REM regarding copyright ownership.  The ASF licenses this file
@REM to you under the Apache License, Version 2.0 (the
@REM "License"); you may not use this file except in compliance
@REM with the License.  You may obtain a copy of the License at
@REM
@REM    http://www.apache.org/licenses/LICENSE-2.0
@REM
@REM Unless required by applicable law or agreed to in writing,
@REM software distributed under the License is distributed on an
@REM "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
@REM KIND, either express or implied.  See the License for the
@REM specific language governing permissions and limitations
@REM under the License.
@REM ----------------------------------------------------------------------------

@REM ----------------------------------------------------------------------------
@REM Apache Maven Wrapper startup batch script, version 3.3.2
@REM
@REM Optional ENV vars
@REM   MVNW_REPOURL - repo url base for downloading maven distribution
@REM   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
@REM   MVNW_VERBOSE - true: enable verbose log; others: silence the output
@REM ----------------------------------------------------------------------------

@IF "%__MVNW_ARG0_NAME__%"=="" (SET __MVNW_ARG0_NAME__=%~nx0)
@SET __MVNW_CMD__=
@SET __MVNW_ERROR__=
@SET __MVNW_PSMODULEP_SAVE=%PSModulePath%
@SET PSModulePath=
@FOR /F "usebackq tokens=1* delims==" %%A IN (`powershell -noprofile "& {$scriptDir='%~dp0'; $script='%__MVNW_ARG0_NAME__%'; icm -ScriptBlock ([Scriptblock]::Create((Get-Content -Raw '%~f0'))) -NoNewScope}"`) DO @(
  IF "%%A"=="MVN_CMD" (set __MVNW_CMD__=%%B) ELSE IF "%%B"=="" (echo %%A) ELSE (echo %%A=%%B)
)
@SET PSModulePath=%__MVNW_PSMODULEP_SAVE%
@SET __MVNW_PSMODULEP_SAVE=
@SET __MVNW_ARG0_NAME__=
@SET MVNW_USERNAME=
@SET MVNW_PASSWORD=
@IF NOT "%__MVNW_CMD__%"=="" (%__MVNW_CMD__% %*)
@echo Cannot start maven from wrapper >&2 && exit /b 1
@GOTO :EOF
: end batch / begin powershell #>

$ErrorActionPreference = "Stop"
if ($env:MVNW_VERBOSE -eq "true") {
  $VerbosePreference = "Continue"
}

# calculate distributionUrl, requires .mvn/wrapper/maven-wrapper.properties
$distributionUrl = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionUrl
if (!$distributionUrl) {
  Write-Error "cannot read distributionUrl property in $scriptDir/.mvn/wrapper/maven-wrapper.properties"
}

switch -wildcard -casesensitive ( $($distributionUrl -replace '^.*/','') ) {
  "maven-mvnd-*" {
    $USE_MVND = $true
    $distributionUrl = $distributionUrl -replace '-bin\.[^.]*$',"-windows-amd64.zip"
    $MVN_CMD = "mvnd.cmd"
    break
  }
  default {
    $USE_MVND = $false
    $MVN_CMD = $script -replace '^mvnw','mvn'
    break
  }
}

# apply MVNW_REPOURL and calculate MAVEN_HOME
# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
if ($env:MVNW_REPOURL) {
  $MVNW_REPO_PATTERN = if ($USE_MVND) { "/org/apache/maven/" } else { "/maven/mvnd/" }
  $distributionUrl = "$env:MVNW_REPOURL$MVNW_REPO_PATTERN$($distributionUrl -replace '^.*'+$MVNW_REPO_PATTERN,'')"
}
$distributionUrlName = $distributionUrl -replace '^.*/',''
$distributionUrlNameMain = $distributionUrlName -replace '\.[^.]*$','' -replace '-bin$',''
$MAVEN_HOME_PARENT = "$HOME/.m2/wrapper/dists/$distributionUrlNameMain"
if ($env:MAVEN_USER_HOME) {
  $MAVEN_HOME_PARENT = "$env:MAVEN_USER_HOME/wrapper/dists/$distributionUrlNameMain"
}
$MAVEN_HOME_NAME = ([System.Security.Cryptography.MD5]::Create().ComputeHash([byte[]][char[]]$distributionUrl) | ForEach-Object {$_.ToString("x2")}) -join ''
$MAVEN_HOME = "$MAVEN_HOME_PARENT/$MAVEN_HOME_NAME"

if (Test-Path -Path "$MAVEN_HOME" -PathType Container) {
  Write-Verbose "found existing MAVEN_HOME at $MAVEN_HOME"
  Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"
  exit $?
}

if (! $distributionUrlNameMain -or ($distributionUrlName -eq $distributionUrlNameMain)) {
  Write-Error "distributionUrl is not valid, must end with *-bin.zip, but found $distributionUrl"
}

# prepare tmp dir
$TMP_DOWNLOAD_DIR_HOLDER = New-TemporaryFile
$TMP_DOWNLOAD_DIR = New-Item -Itemtype Directory -Path "$TMP_DOWNLOAD_DIR_HOLDER.dir"
$TMP_DOWNLOAD_DIR_HOLDER.Delete() | Out-Null
trap {
  if ($TMP_DOWNLOAD_DIR.Exists) {
    try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
    catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }
  }
}

New-Item -Itemtype Directory -Path "$MAVEN_HOME_PARENT" -Force | Out-Null

# Download and Install Apache Maven
Write-Verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."
Write-Verbose "Downloading from: $distributionUrl"
Write-Verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"

$webclient = New-Object System.Net.WebClient
if ($env:MVNW_USERNAME -and $env:MVNW_PASSWORD) {
  $webclient.Credentials = New-Object System.Net.NetworkCredential($env:MVNW_USERNAME, $env:MVNW_PASSWORD)
}
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
$webclient.DownloadFile($distributionUrl, "$TMP_DOWNLOAD_DIR/$distributionUrlName") | Out-Null

# If specified, validate the SHA-256 sum of the Maven distribution zip file
$distributionSha256Sum = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionSha256Sum
if ($distributionSha256Sum) {
  if ($USE_MVND) {
    Write-Error "Checksum validation is not supported for maven-mvnd. `nPlease disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties."
  }
  Import-Module $PSHOME\Modules\Microsoft.PowerShell.Utility -Function Get-FileHash
  if ((Get-FileHash "$TMP_DOWNLOAD_DIR/$distributionUrlName" -Algorithm SHA256).Hash.ToLower() -ne $distributionSha256Sum) {
    Write-Error "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised. If you updated your Maven version, you need to update the specified distributionSha256Sum property."
  }
}

# unzip and move
Expand-Archive "$TMP_DOWNLOAD_DIR/$distributionUrlName" -DestinationPath "$TMP_DOWNLOAD_DIR" | Out-Null
Rename-Item -Path "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" -NewName $MAVEN_HOME_NAME | Out-Null
try {
  Move-Item -Path "$TMP_DOWNLOAD_DIR/$MAVEN_HOME_NAME" -Destination $MAVEN_HOME_PARENT | Out-Null
} catch {
  if (! (Test-Path -Path "$MAVEN_HOME" -PathType Container)) {
    Write-Error "fail to move MAVEN_HOME"
  }
} finally {
  try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
  catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }
}

Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"
</file>

<file path="people-module/.gitattributes">
/mvnw text eol=lf
*.cmd text eol=crlf
</file>

<file path="people-module/.gitignore">
HELP.md
target/
!.mvn/wrapper/maven-wrapper.jar
!**/src/main/**/target/
!**/src/test/**/target/

### STS ###
.apt_generated
.classpath
.factorypath
.project
.settings
.springBeans
.sts4-cache

### IntelliJ IDEA ###
.idea
*.iws
*.iml
*.ipr

### NetBeans ###
/nbproject/private/
/nbbuild/
/dist/
/nbdist/
/.nb-gradle/
build/
!**/src/main/**/build/
!**/src/test/**/build/

### VS Code ###
.vscode/
</file>

<file path="people-module/.mvn/wrapper/maven-wrapper.properties">
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
wrapperVersion=3.3.2
distributionType=only-script
distributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.9.9/apache-maven-3.9.9-bin.zip
</file>

<file path="people-module/mvnw">
#!/bin/sh
# ----------------------------------------------------------------------------
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
# ----------------------------------------------------------------------------

# ----------------------------------------------------------------------------
# Apache Maven Wrapper startup batch script, version 3.3.2
#
# Optional ENV vars
# -----------------
#   JAVA_HOME - location of a JDK home dir, required when download maven via java source
#   MVNW_REPOURL - repo url base for downloading maven distribution
#   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
#   MVNW_VERBOSE - true: enable verbose log; debug: trace the mvnw script; others: silence the output
# ----------------------------------------------------------------------------

set -euf
[ "${MVNW_VERBOSE-}" != debug ] || set -x

# OS specific support.
native_path() { printf %s\\n "$1"; }
case "$(uname)" in
CYGWIN* | MINGW*)
  [ -z "${JAVA_HOME-}" ] || JAVA_HOME="$(cygpath --unix "$JAVA_HOME")"
  native_path() { cygpath --path --windows "$1"; }
  ;;
esac

# set JAVACMD and JAVACCMD
set_java_home() {
  # For Cygwin and MinGW, ensure paths are in Unix format before anything is touched
  if [ -n "${JAVA_HOME-}" ]; then
    if [ -x "$JAVA_HOME/jre/sh/java" ]; then
      # IBM's JDK on AIX uses strange locations for the executables
      JAVACMD="$JAVA_HOME/jre/sh/java"
      JAVACCMD="$JAVA_HOME/jre/sh/javac"
    else
      JAVACMD="$JAVA_HOME/bin/java"
      JAVACCMD="$JAVA_HOME/bin/javac"

      if [ ! -x "$JAVACMD" ] || [ ! -x "$JAVACCMD" ]; then
        echo "The JAVA_HOME environment variable is not defined correctly, so mvnw cannot run." >&2
        echo "JAVA_HOME is set to \"$JAVA_HOME\", but \"\$JAVA_HOME/bin/java\" or \"\$JAVA_HOME/bin/javac\" does not exist." >&2
        return 1
      fi
    fi
  else
    JAVACMD="$(
      'set' +e
      'unset' -f command 2>/dev/null
      'command' -v java
    )" || :
    JAVACCMD="$(
      'set' +e
      'unset' -f command 2>/dev/null
      'command' -v javac
    )" || :

    if [ ! -x "${JAVACMD-}" ] || [ ! -x "${JAVACCMD-}" ]; then
      echo "The java/javac command does not exist in PATH nor is JAVA_HOME set, so mvnw cannot run." >&2
      return 1
    fi
  fi
}

# hash string like Java String::hashCode
hash_string() {
  str="${1:-}" h=0
  while [ -n "$str" ]; do
    char="${str%"${str#?}"}"
    h=$(((h * 31 + $(LC_CTYPE=C printf %d "'$char")) % 4294967296))
    str="${str#?}"
  done
  printf %x\\n $h
}

verbose() { :; }
[ "${MVNW_VERBOSE-}" != true ] || verbose() { printf %s\\n "${1-}"; }

die() {
  printf %s\\n "$1" >&2
  exit 1
}

trim() {
  # MWRAPPER-139:
  #   Trims trailing and leading whitespace, carriage returns, tabs, and linefeeds.
  #   Needed for removing poorly interpreted newline sequences when running in more
  #   exotic environments such as mingw bash on Windows.
  printf "%s" "${1}" | tr -d '[:space:]'
}

# parse distributionUrl and optional distributionSha256Sum, requires .mvn/wrapper/maven-wrapper.properties
while IFS="=" read -r key value; do
  case "${key-}" in
  distributionUrl) distributionUrl=$(trim "${value-}") ;;
  distributionSha256Sum) distributionSha256Sum=$(trim "${value-}") ;;
  esac
done <"${0%/*}/.mvn/wrapper/maven-wrapper.properties"
[ -n "${distributionUrl-}" ] || die "cannot read distributionUrl property in ${0%/*}/.mvn/wrapper/maven-wrapper.properties"

case "${distributionUrl##*/}" in
maven-mvnd-*bin.*)
  MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/
  case "${PROCESSOR_ARCHITECTURE-}${PROCESSOR_ARCHITEW6432-}:$(uname -a)" in
  *AMD64:CYGWIN* | *AMD64:MINGW*) distributionPlatform=windows-amd64 ;;
  :Darwin*x86_64) distributionPlatform=darwin-amd64 ;;
  :Darwin*arm64) distributionPlatform=darwin-aarch64 ;;
  :Linux*x86_64*) distributionPlatform=linux-amd64 ;;
  *)
    echo "Cannot detect native platform for mvnd on $(uname)-$(uname -m), use pure java version" >&2
    distributionPlatform=linux-amd64
    ;;
  esac
  distributionUrl="${distributionUrl%-bin.*}-$distributionPlatform.zip"
  ;;
maven-mvnd-*) MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/ ;;
*) MVN_CMD="mvn${0##*/mvnw}" _MVNW_REPO_PATTERN=/org/apache/maven/ ;;
esac

# apply MVNW_REPOURL and calculate MAVEN_HOME
# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
[ -z "${MVNW_REPOURL-}" ] || distributionUrl="$MVNW_REPOURL$_MVNW_REPO_PATTERN${distributionUrl#*"$_MVNW_REPO_PATTERN"}"
distributionUrlName="${distributionUrl##*/}"
distributionUrlNameMain="${distributionUrlName%.*}"
distributionUrlNameMain="${distributionUrlNameMain%-bin}"
MAVEN_USER_HOME="${MAVEN_USER_HOME:-${HOME}/.m2}"
MAVEN_HOME="${MAVEN_USER_HOME}/wrapper/dists/${distributionUrlNameMain-}/$(hash_string "$distributionUrl")"

exec_maven() {
  unset MVNW_VERBOSE MVNW_USERNAME MVNW_PASSWORD MVNW_REPOURL || :
  exec "$MAVEN_HOME/bin/$MVN_CMD" "$@" || die "cannot exec $MAVEN_HOME/bin/$MVN_CMD"
}

if [ -d "$MAVEN_HOME" ]; then
  verbose "found existing MAVEN_HOME at $MAVEN_HOME"
  exec_maven "$@"
fi

case "${distributionUrl-}" in
*?-bin.zip | *?maven-mvnd-?*-?*.zip) ;;
*) die "distributionUrl is not valid, must match *-bin.zip or maven-mvnd-*.zip, but found '${distributionUrl-}'" ;;
esac

# prepare tmp dir
if TMP_DOWNLOAD_DIR="$(mktemp -d)" && [ -d "$TMP_DOWNLOAD_DIR" ]; then
  clean() { rm -rf -- "$TMP_DOWNLOAD_DIR"; }
  trap clean HUP INT TERM EXIT
else
  die "cannot create temp dir"
fi

mkdir -p -- "${MAVEN_HOME%/*}"

# Download and Install Apache Maven
verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."
verbose "Downloading from: $distributionUrl"
verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"

# select .zip or .tar.gz
if ! command -v unzip >/dev/null; then
  distributionUrl="${distributionUrl%.zip}.tar.gz"
  distributionUrlName="${distributionUrl##*/}"
fi

# verbose opt
__MVNW_QUIET_WGET=--quiet __MVNW_QUIET_CURL=--silent __MVNW_QUIET_UNZIP=-q __MVNW_QUIET_TAR=''
[ "${MVNW_VERBOSE-}" != true ] || __MVNW_QUIET_WGET='' __MVNW_QUIET_CURL='' __MVNW_QUIET_UNZIP='' __MVNW_QUIET_TAR=v

# normalize http auth
case "${MVNW_PASSWORD:+has-password}" in
'') MVNW_USERNAME='' MVNW_PASSWORD='' ;;
has-password) [ -n "${MVNW_USERNAME-}" ] || MVNW_USERNAME='' MVNW_PASSWORD='' ;;
esac

if [ -z "${MVNW_USERNAME-}" ] && command -v wget >/dev/null; then
  verbose "Found wget ... using wget"
  wget ${__MVNW_QUIET_WGET:+"$__MVNW_QUIET_WGET"} "$distributionUrl" -O "$TMP_DOWNLOAD_DIR/$distributionUrlName" || die "wget: Failed to fetch $distributionUrl"
elif [ -z "${MVNW_USERNAME-}" ] && command -v curl >/dev/null; then
  verbose "Found curl ... using curl"
  curl ${__MVNW_QUIET_CURL:+"$__MVNW_QUIET_CURL"} -f -L -o "$TMP_DOWNLOAD_DIR/$distributionUrlName" "$distributionUrl" || die "curl: Failed to fetch $distributionUrl"
elif set_java_home; then
  verbose "Falling back to use Java to download"
  javaSource="$TMP_DOWNLOAD_DIR/Downloader.java"
  targetZip="$TMP_DOWNLOAD_DIR/$distributionUrlName"
  cat >"$javaSource" <<-END
	public class Downloader extends java.net.Authenticator
	{
	  protected java.net.PasswordAuthentication getPasswordAuthentication()
	  {
	    return new java.net.PasswordAuthentication( System.getenv( "MVNW_USERNAME" ), System.getenv( "MVNW_PASSWORD" ).toCharArray() );
	  }
	  public static void main( String[] args ) throws Exception
	  {
	    setDefault( new Downloader() );
	    java.nio.file.Files.copy( java.net.URI.create( args[0] ).toURL().openStream(), java.nio.file.Paths.get( args[1] ).toAbsolutePath().normalize() );
	  }
	}
	END
  # For Cygwin/MinGW, switch paths to Windows format before running javac and java
  verbose " - Compiling Downloader.java ..."
  "$(native_path "$JAVACCMD")" "$(native_path "$javaSource")" || die "Failed to compile Downloader.java"
  verbose " - Running Downloader.java ..."
  "$(native_path "$JAVACMD")" -cp "$(native_path "$TMP_DOWNLOAD_DIR")" Downloader "$distributionUrl" "$(native_path "$targetZip")"
fi

# If specified, validate the SHA-256 sum of the Maven distribution zip file
if [ -n "${distributionSha256Sum-}" ]; then
  distributionSha256Result=false
  if [ "$MVN_CMD" = mvnd.sh ]; then
    echo "Checksum validation is not supported for maven-mvnd." >&2
    echo "Please disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2
    exit 1
  elif command -v sha256sum >/dev/null; then
    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | sha256sum -c >/dev/null 2>&1; then
      distributionSha256Result=true
    fi
  elif command -v shasum >/dev/null; then
    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | shasum -a 256 -c >/dev/null 2>&1; then
      distributionSha256Result=true
    fi
  else
    echo "Checksum validation was requested but neither 'sha256sum' or 'shasum' are available." >&2
    echo "Please install either command, or disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2
    exit 1
  fi
  if [ $distributionSha256Result = false ]; then
    echo "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised." >&2
    echo "If you updated your Maven version, you need to update the specified distributionSha256Sum property." >&2
    exit 1
  fi
fi

# unzip and move
if command -v unzip >/dev/null; then
  unzip ${__MVNW_QUIET_UNZIP:+"$__MVNW_QUIET_UNZIP"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -d "$TMP_DOWNLOAD_DIR" || die "failed to unzip"
else
  tar xzf${__MVNW_QUIET_TAR:+"$__MVNW_QUIET_TAR"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -C "$TMP_DOWNLOAD_DIR" || die "failed to untar"
fi
printf %s\\n "$distributionUrl" >"$TMP_DOWNLOAD_DIR/$distributionUrlNameMain/mvnw.url"
mv -- "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" "$MAVEN_HOME" || [ -d "$MAVEN_HOME" ] || die "fail to move MAVEN_HOME"

clean || :
exec_maven "$@"
</file>

<file path="people-module/mvnw.cmd">
<# : batch portion
@REM ----------------------------------------------------------------------------
@REM Licensed to the Apache Software Foundation (ASF) under one
@REM or more contributor license agreements.  See the NOTICE file
@REM distributed with this work for additional information
@REM regarding copyright ownership.  The ASF licenses this file
@REM to you under the Apache License, Version 2.0 (the
@REM "License"); you may not use this file except in compliance
@REM with the License.  You may obtain a copy of the License at
@REM
@REM    http://www.apache.org/licenses/LICENSE-2.0
@REM
@REM Unless required by applicable law or agreed to in writing,
@REM software distributed under the License is distributed on an
@REM "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
@REM KIND, either express or implied.  See the License for the
@REM specific language governing permissions and limitations
@REM under the License.
@REM ----------------------------------------------------------------------------

@REM ----------------------------------------------------------------------------
@REM Apache Maven Wrapper startup batch script, version 3.3.2
@REM
@REM Optional ENV vars
@REM   MVNW_REPOURL - repo url base for downloading maven distribution
@REM   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
@REM   MVNW_VERBOSE - true: enable verbose log; others: silence the output
@REM ----------------------------------------------------------------------------

@IF "%__MVNW_ARG0_NAME__%"=="" (SET __MVNW_ARG0_NAME__=%~nx0)
@SET __MVNW_CMD__=
@SET __MVNW_ERROR__=
@SET __MVNW_PSMODULEP_SAVE=%PSModulePath%
@SET PSModulePath=
@FOR /F "usebackq tokens=1* delims==" %%A IN (`powershell -noprofile "& {$scriptDir='%~dp0'; $script='%__MVNW_ARG0_NAME__%'; icm -ScriptBlock ([Scriptblock]::Create((Get-Content -Raw '%~f0'))) -NoNewScope}"`) DO @(
  IF "%%A"=="MVN_CMD" (set __MVNW_CMD__=%%B) ELSE IF "%%B"=="" (echo %%A) ELSE (echo %%A=%%B)
)
@SET PSModulePath=%__MVNW_PSMODULEP_SAVE%
@SET __MVNW_PSMODULEP_SAVE=
@SET __MVNW_ARG0_NAME__=
@SET MVNW_USERNAME=
@SET MVNW_PASSWORD=
@IF NOT "%__MVNW_CMD__%"=="" (%__MVNW_CMD__% %*)
@echo Cannot start maven from wrapper >&2 && exit /b 1
@GOTO :EOF
: end batch / begin powershell #>

$ErrorActionPreference = "Stop"
if ($env:MVNW_VERBOSE -eq "true") {
  $VerbosePreference = "Continue"
}

# calculate distributionUrl, requires .mvn/wrapper/maven-wrapper.properties
$distributionUrl = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionUrl
if (!$distributionUrl) {
  Write-Error "cannot read distributionUrl property in $scriptDir/.mvn/wrapper/maven-wrapper.properties"
}

switch -wildcard -casesensitive ( $($distributionUrl -replace '^.*/','') ) {
  "maven-mvnd-*" {
    $USE_MVND = $true
    $distributionUrl = $distributionUrl -replace '-bin\.[^.]*$',"-windows-amd64.zip"
    $MVN_CMD = "mvnd.cmd"
    break
  }
  default {
    $USE_MVND = $false
    $MVN_CMD = $script -replace '^mvnw','mvn'
    break
  }
}

# apply MVNW_REPOURL and calculate MAVEN_HOME
# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
if ($env:MVNW_REPOURL) {
  $MVNW_REPO_PATTERN = if ($USE_MVND) { "/org/apache/maven/" } else { "/maven/mvnd/" }
  $distributionUrl = "$env:MVNW_REPOURL$MVNW_REPO_PATTERN$($distributionUrl -replace '^.*'+$MVNW_REPO_PATTERN,'')"
}
$distributionUrlName = $distributionUrl -replace '^.*/',''
$distributionUrlNameMain = $distributionUrlName -replace '\.[^.]*$','' -replace '-bin$',''
$MAVEN_HOME_PARENT = "$HOME/.m2/wrapper/dists/$distributionUrlNameMain"
if ($env:MAVEN_USER_HOME) {
  $MAVEN_HOME_PARENT = "$env:MAVEN_USER_HOME/wrapper/dists/$distributionUrlNameMain"
}
$MAVEN_HOME_NAME = ([System.Security.Cryptography.MD5]::Create().ComputeHash([byte[]][char[]]$distributionUrl) | ForEach-Object {$_.ToString("x2")}) -join ''
$MAVEN_HOME = "$MAVEN_HOME_PARENT/$MAVEN_HOME_NAME"

if (Test-Path -Path "$MAVEN_HOME" -PathType Container) {
  Write-Verbose "found existing MAVEN_HOME at $MAVEN_HOME"
  Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"
  exit $?
}

if (! $distributionUrlNameMain -or ($distributionUrlName -eq $distributionUrlNameMain)) {
  Write-Error "distributionUrl is not valid, must end with *-bin.zip, but found $distributionUrl"
}

# prepare tmp dir
$TMP_DOWNLOAD_DIR_HOLDER = New-TemporaryFile
$TMP_DOWNLOAD_DIR = New-Item -Itemtype Directory -Path "$TMP_DOWNLOAD_DIR_HOLDER.dir"
$TMP_DOWNLOAD_DIR_HOLDER.Delete() | Out-Null
trap {
  if ($TMP_DOWNLOAD_DIR.Exists) {
    try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
    catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }
  }
}

New-Item -Itemtype Directory -Path "$MAVEN_HOME_PARENT" -Force | Out-Null

# Download and Install Apache Maven
Write-Verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."
Write-Verbose "Downloading from: $distributionUrl"
Write-Verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"

$webclient = New-Object System.Net.WebClient
if ($env:MVNW_USERNAME -and $env:MVNW_PASSWORD) {
  $webclient.Credentials = New-Object System.Net.NetworkCredential($env:MVNW_USERNAME, $env:MVNW_PASSWORD)
}
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
$webclient.DownloadFile($distributionUrl, "$TMP_DOWNLOAD_DIR/$distributionUrlName") | Out-Null

# If specified, validate the SHA-256 sum of the Maven distribution zip file
$distributionSha256Sum = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionSha256Sum
if ($distributionSha256Sum) {
  if ($USE_MVND) {
    Write-Error "Checksum validation is not supported for maven-mvnd. `nPlease disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties."
  }
  Import-Module $PSHOME\Modules\Microsoft.PowerShell.Utility -Function Get-FileHash
  if ((Get-FileHash "$TMP_DOWNLOAD_DIR/$distributionUrlName" -Algorithm SHA256).Hash.ToLower() -ne $distributionSha256Sum) {
    Write-Error "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised. If you updated your Maven version, you need to update the specified distributionSha256Sum property."
  }
}

# unzip and move
Expand-Archive "$TMP_DOWNLOAD_DIR/$distributionUrlName" -DestinationPath "$TMP_DOWNLOAD_DIR" | Out-Null
Rename-Item -Path "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" -NewName $MAVEN_HOME_NAME | Out-Null
try {
  Move-Item -Path "$TMP_DOWNLOAD_DIR/$MAVEN_HOME_NAME" -Destination $MAVEN_HOME_PARENT | Out-Null
} catch {
  if (! (Test-Path -Path "$MAVEN_HOME" -PathType Container)) {
    Write-Error "fail to move MAVEN_HOME"
  }
} finally {
  try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
  catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }
}

Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"
</file>

<file path="people-module/pom.xml">
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>pe.edu.certus</groupId>
        <artifactId>cm-backend</artifactId>
        <version>0.0.1-SNAPSHOT</version>
    </parent>

    <artifactId>people-module</artifactId>
    <name>people-module</name>
    <description>people-module</description>
    <url/>

    <properties>
        <java.version>17</java.version>
        <lombok.version>1.18.32</lombok.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>${lombok.version}</version>
            <optional>true</optional>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <annotationProcessorPaths>
                        <path>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                            <version>${lombok.version}</version>
                        </path>
                    </annotationProcessorPaths>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <excludes>
                        <exclude>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                        </exclude>
                    </excludes>
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>
</file>

<file path="people-module/src/main/java/pe/edu/certus/peoplemodule/configuration/annotations/PeopleComponentScanConfig.java">
package pe.edu.certus.peoplemodule.configuration.annotations;

import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;

@Configuration
@ComponentScan(basePackages = "pe.edu.certus.peoplemodule")
public class PeopleComponentScanConfig {
}
</file>

<file path="people-module/src/main/java/pe/edu/certus/peoplemodule/configuration/annotations/PeopleEntityScanConfig.java">
package pe.edu.certus.peoplemodule.configuration.annotations;

import org.springframework.boot.autoconfigure.domain.EntityScan;
import org.springframework.context.annotation.Configuration;

@Configuration
@EntityScan(basePackages = "pe.edu.certus.peoplemodule.repository.entity")
public class PeopleEntityScanConfig {
}
</file>

<file path="people-module/src/main/java/pe/edu/certus/peoplemodule/configuration/annotations/PeoplePersistenceConfig.java">
package pe.edu.certus.peoplemodule.configuration.annotations;

import org.springframework.context.annotation.Configuration;
import org.springframework.data.jpa.repository.config.EnableJpaRepositories;

@Configuration
@EnableJpaRepositories(basePackages = "pe.edu.certus.peoplemodule.repository")
public class PeoplePersistenceConfig {
}
</file>

<file path="people-module/src/main/java/pe/edu/certus/peoplemodule/configuration/mappers/PeopleMapperConfig.java">
package pe.edu.certus.peoplemodule.configuration.mappers;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import pe.edu.certus.peoplemodule.logic.adapters.mapper.PeopleMapper;

@Configuration
public class PeopleMapperConfig {
    @Bean
    public PeopleMapper peopleMapper() {
        return new PeopleMapper();
    }
}
</file>

<file path="people-module/src/main/java/pe/edu/certus/peoplemodule/configuration/mappers/PeopleMapperPersistenceConfig.java">
package pe.edu.certus.peoplemodule.configuration.mappers;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import pe.edu.certus.peoplemodule.repository.adapters.mapper.PeoplePersistenceMapper;

@Configuration
public class PeopleMapperPersistenceConfig {
    @Bean
    public PeoplePersistenceMapper peoplePersistenceMapper() {
        return new PeoplePersistenceMapper();
    }

}
</file>

<file path="people-module/src/main/java/pe/edu/certus/peoplemodule/logic/adapters/driven/PeopleManager.java">
package pe.edu.certus.peoplemodule.logic.adapters.driven;

import org.springframework.stereotype.Service;
import pe.edu.certus.peoplemodule.logic.model.PeopleModel;
import pe.edu.certus.peoplemodule.logic.ports.driven.ForManagingPeople;
import pe.edu.certus.peoplemodule.logic.ports.driver.ForPeople;

import java.util.List;

@Service
public class PeopleManager implements ForPeople<PeopleModel, Long> {

    private final ForManagingPeople forManagingPeople;

    public PeopleManager(ForManagingPeople forManagingPeople) {
        this.forManagingPeople = forManagingPeople;
    }

    @Override
    public void createPeople(PeopleModel peopleModel) {
        try {
            forManagingPeople.satisfyCreatePeople(peopleModel);
            System.out.println("THE PERSON HAS BEEN CREATED SUCCESSFULLY");
        } catch (IllegalArgumentException e) {
            System.out.println("ERROR CREATING THE PERSON: " + e.getMessage());
            e.printStackTrace();
        }
    }

    @Override
    public PeopleModel findPeopleById(Long id) {
        try {
            if (id == null) {
                throw new IllegalArgumentException("ID CANNOT BE NULL");
            }

            PeopleModel peopleModel = forManagingPeople.satisfyFindPeopleById(id);
            System.out.println("THE PERSON HAS BEEN FOUND SUCCESSFULLY");

            if (peopleModel == null) {
                throw new IllegalArgumentException("PERSON NOT FOUND");
            }

            return peopleModel;
        } catch (Exception e) {
            throw new RuntimeException("FAILED TO FIND PERSON", e);
        }
    }

    @Override
    public PeopleModel updatePeople(PeopleModel peopleModel) {
        try {
            if (peopleModel == null) {
                throw new IllegalArgumentException("PERSON MODEL CANNOT BE NULL");
            }

            PeopleModel updatedPeopleModel = forManagingPeople.satisfyUpdatePeople(peopleModel);
            System.out.println("PERSON UPDATED SUCCESSFULLY");

            return updatedPeopleModel;
        } catch (Exception e) {
            throw new RuntimeException("FAILED TO UPDATE PERSON", e);
        }
    }

    @Override
    public void deletePeople(Long id) {
        try {
            if (id == null) {
                throw new IllegalArgumentException("ID CANNOT BE NULL");
            }

            forManagingPeople.satisfyDeletePeopleById(id);
            System.out.println("PERSON DELETED SUCCESSFULLY");

        } catch (Exception e) {
            throw new RuntimeException("FAILED TO DELETE PERSON", e);
        }
    }

    @Override
    public List<PeopleModel> findAllPeople() {
        try {
            List<PeopleModel> peopleModels = forManagingPeople.satisfyFindAllPeople();
            System.out.println("ALL PEOPLE HAVE BEEN FOUND SUCCESSFULLY");
            return peopleModels;
        } catch (Exception e) {
            throw new RuntimeException("FAILED TO FIND ALL PEOPLE", e);
        }
    }
}
</file>

<file path="people-module/src/main/java/pe/edu/certus/peoplemodule/logic/adapters/driver/PeopleAdapter.java">
package pe.edu.certus.peoplemodule.logic.adapters.driver;

import jakarta.persistence.EntityNotFoundException;
import jakarta.validation.Valid;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import pe.edu.certus.peoplemodule.logic.model.PeopleModel;
import pe.edu.certus.peoplemodule.logic.ports.driver.ForPeople;
import pe.edu.certus.peoplemodule.logic.ports.mapper.ForMappingPeople;

import java.util.List;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/people")
public class PeopleAdapter {

    private final ForPeople forPeople;
    private final ForMappingPeople forMappingPeople;

    public PeopleAdapter(ForPeople forPeople, ForMappingPeople forMappingPeople) {
        this.forPeople = forPeople;
        this.forMappingPeople = forMappingPeople;
    }

    @PostMapping("/create")
    public ResponseEntity<PeopleWebModel> createPeople(@Valid @RequestBody PeopleWebModel peopleWebModel) {
        try {
            PeopleModel objectFromWeb = forMappingPeople.fromWeb(peopleWebModel);
            forPeople.createPeople(objectFromWeb);
            return ResponseEntity.ok().build();
        } catch (IllegalArgumentException e) {
            throw new RuntimeException("ERROR CREATING PERSON", e);
        }
    }

    @GetMapping("/{id}")
    public ResponseEntity<PeopleWebModel> findPeopleById(@PathVariable Long id) {
        try {
            PeopleModel peopleModel = (PeopleModel) forPeople.findPeopleById(id);
            PeopleWebModel response = forMappingPeople.toWeb(peopleModel);
            return ResponseEntity.ok(response);
        } catch (EntityNotFoundException e) {
            return ResponseEntity.notFound().build();
        } catch (IllegalArgumentException e) {
            return ResponseEntity.badRequest().build();
        }
    }

    @PutMapping("/update")
    public ResponseEntity<PeopleWebModel> updatePeople(@Valid @RequestBody PeopleWebModel peopleWebModel) {
        try {
            PeopleModel objectFromWeb = forMappingPeople.fromWeb(peopleWebModel);
            PeopleModel updatedPeople = (PeopleModel) forPeople.updatePeople(objectFromWeb);
            PeopleWebModel response = forMappingPeople.toWeb(updatedPeople);
            return ResponseEntity.ok(response);
        } catch (EntityNotFoundException e) {
            return ResponseEntity.notFound().build();
        } catch (IllegalArgumentException e) {
            return ResponseEntity.badRequest().build();
        }
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deletePeopleById(@PathVariable Long id) {
        try {
            forPeople.deletePeople(id);
            return ResponseEntity.ok().build();
        } catch (EntityNotFoundException e) {
            return ResponseEntity.notFound().build();
        } catch (IllegalArgumentException e) {
            return ResponseEntity.badRequest().build();
        }
    }

    @GetMapping
    public ResponseEntity<List<PeopleWebModel>> findAllPeople() {
        try {
            List<PeopleModel> peopleModels = forPeople.findAllPeople();
            List<PeopleWebModel> response = peopleModels.stream()
                    .map(forMappingPeople::toWeb)
                    .collect(Collectors.toList());
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            throw new RuntimeException("ERROR FINDING ALL PEOPLE", e);
        }
    }
}
</file>

<file path="people-module/src/main/java/pe/edu/certus/peoplemodule/logic/adapters/driver/PeopleWebModel.java">
package pe.edu.certus.peoplemodule.logic.adapters.driver;

import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Pattern;
import jakarta.validation.constraints.Size;
import lombok.Builder;

@Builder
public record PeopleWebModel(
        Long personId,
        
        Long idUser,
        Long idCareer,
        
        @NotBlank(message = "El nombre no puede estar vacío")
        @Size(max = 100, message = "El nombre no puede exceder los 100 caracteres")
        String personName,
        
        @NotBlank(message = "El apellido no puede estar vacío")
        @Size(max = 100, message = "El apellido no puede exceder los 100 caracteres")
        String personLastname,
        
        @Size(max = 8, message = "El DNI debe tener 8 caracteres")
        @Pattern(regexp = "^[0-9]*$", message = "El DNI debe contener solo números")
        String personDni,
        
        @Size(max = 15, message = "El número de teléfono no puede exceder los 15 caracteres")
        String personMobilePhone,
        
        @Size(max = 1, message = "El género debe ser un solo carácter")
        String personGender,
        
        @Size(max = 100, message = "La ubicación del instituto no puede exceder los 100 caracteres")
        String personInstituteLocation,
        
        @Size(max = 100, message = "El correo institucional no puede exceder los 100 caracteres")
        String personInstitutionalEmail,
        
        Integer personInstitutionalCycle
) {
}
</file>

<file path="people-module/src/main/java/pe/edu/certus/peoplemodule/logic/adapters/mapper/PeopleMapper.java">
package pe.edu.certus.peoplemodule.logic.adapters.mapper;

import pe.edu.certus.peoplemodule.logic.adapters.driver.PeopleWebModel;
import pe.edu.certus.peoplemodule.logic.model.PeopleModel;
import pe.edu.certus.peoplemodule.logic.ports.mapper.ForMappingPeople;

public class PeopleMapper implements ForMappingPeople {

    @Override
    public PeopleModel fromWeb(PeopleWebModel peopleWebModel) {
        return PeopleModel.builder()
                .personId(peopleWebModel.personId())
                .idUser(peopleWebModel.idUser())
                .idCareer(peopleWebModel.idCareer())
                .personName(peopleWebModel.personName())
                .personLastname(peopleWebModel.personLastname())
                .personDni(peopleWebModel.personDni())
                .personMobilePhone(peopleWebModel.personMobilePhone())
                .personGender(peopleWebModel.personGender())
                .personInstituteLocation(peopleWebModel.personInstituteLocation())
                .personInstitutionalEmail(peopleWebModel.personInstitutionalEmail())
                .personInstitutionalCycle(peopleWebModel.personInstitutionalCycle())
                .build();
    }

    @Override
    public PeopleWebModel toWeb(PeopleModel peopleModel) {
        return new PeopleWebModel(
                peopleModel.getPersonId(),
                peopleModel.getIdUser(),
                peopleModel.getIdCareer(),
                peopleModel.getPersonName(),
                peopleModel.getPersonLastname(),
                peopleModel.getPersonDni(),
                peopleModel.getPersonMobilePhone(),
                peopleModel.getPersonGender(),
                peopleModel.getPersonInstituteLocation(),
                peopleModel.getPersonInstitutionalEmail(),
                peopleModel.getPersonInstitutionalCycle()
        );
    }
}
</file>

<file path="people-module/src/main/java/pe/edu/certus/peoplemodule/logic/model/PeopleModel.java">
package pe.edu.certus.peoplemodule.logic.model;

import lombok.Builder;
import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
@Builder
public class PeopleModel {
    private Long personId;
    private Long idUser;
    private Long idCareer;
    private String personName;
    private String personLastname;
    private String personDni;
    private String personMobilePhone;
    private String personGender;
    private String personInstituteLocation;
    private String personInstitutionalEmail;
    private Integer personInstitutionalCycle;
}
</file>

<file path="people-module/src/main/java/pe/edu/certus/peoplemodule/logic/ports/driven/ForManagingPeople.java">
package pe.edu.certus.peoplemodule.logic.ports.driven;

import pe.edu.certus.peoplemodule.logic.model.PeopleModel;

import java.util.List;

public interface ForManagingPeople {
    void satisfyCreatePeople(PeopleModel peopleModel);
    PeopleModel satisfyFindPeopleById(Long id);
    List<PeopleModel> satisfyFindAllPeople();
    PeopleModel satisfyUpdatePeople(PeopleModel peopleModel);
    void satisfyDeletePeopleById(Long id);
}
</file>

<file path="people-module/src/main/java/pe/edu/certus/peoplemodule/logic/ports/driver/ForPeople.java">
package pe.edu.certus.peoplemodule.logic.ports.driver;

import java.util.List;

public interface ForPeople<PeopleModel, Long> {
    void createPeople(PeopleModel peopleModel);
    PeopleModel findPeopleById(Long id);
    List<PeopleModel> findAllPeople();
    PeopleModel updatePeople(PeopleModel peopleModel);
    void deletePeople(Long id);
}
</file>

<file path="people-module/src/main/java/pe/edu/certus/peoplemodule/logic/ports/mapper/ForMappingPeople.java">
package pe.edu.certus.peoplemodule.logic.ports.mapper;

import pe.edu.certus.peoplemodule.logic.adapters.driver.PeopleWebModel;
import pe.edu.certus.peoplemodule.logic.model.PeopleModel;

public interface ForMappingPeople {
    PeopleModel fromWeb(PeopleWebModel peopleWebModel);
    PeopleWebModel toWeb(PeopleModel peopleModel);
}
</file>

<file path="people-module/src/main/java/pe/edu/certus/peoplemodule/PeopleModuleApplication.java">
package pe.edu.certus.peoplemodule;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class PeopleModuleApplication {

    public static void main( String[] args ) {
        SpringApplication.run( PeopleModuleApplication.class, args );
    }

}
</file>

<file path="people-module/src/main/java/pe/edu/certus/peoplemodule/repository/adapters/driver/PeopleQuerierProxy.java">
package pe.edu.certus.peoplemodule.repository.adapters.driver;

import jakarta.persistence.EntityNotFoundException;
import org.springframework.stereotype.Service;
import pe.edu.certus.peoplemodule.logic.model.PeopleModel;
import pe.edu.certus.peoplemodule.logic.ports.driven.ForManagingPeople;
import pe.edu.certus.peoplemodule.repository.entity.PeopleEntity;
import pe.edu.certus.peoplemodule.repository.ports.driver.ForQueryingPeople;
import pe.edu.certus.peoplemodule.repository.ports.mapper.ForBridgingPeople;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
public class PeopleQuerierProxy implements ForManagingPeople {
    private final ForQueryingPeople forQueryingPeople;
    private final ForBridgingPeople forBridgingPeople;

    public PeopleQuerierProxy(ForQueryingPeople forQueryingPeople, ForBridgingPeople forBridgingPeople) {
        this.forQueryingPeople = forQueryingPeople;
        this.forBridgingPeople = forBridgingPeople;
    }

    @Override
    public void satisfyCreatePeople(PeopleModel peopleModel) {
        PeopleEntity objectFromDomain = forBridgingPeople.toPersistence(peopleModel);
        forQueryingPeople.save(objectFromDomain);
        System.out.println("PERSON ENTITY HAS BEEN CREATED SUCCESSFULLY");
    }

    @Override
    public PeopleModel satisfyFindPeopleById(Long id) {
        return forQueryingPeople.findById(id)
                .map(forBridgingPeople::fromPersistence)
                .orElseThrow(() -> new EntityNotFoundException(
                        "PERSON ENTITY NOT FOUND WITH ID: " + id));
    }

    @Override
    public PeopleModel satisfyUpdatePeople(PeopleModel peopleModel) {
        PeopleEntity objectFromDomain = forBridgingPeople.toPersistence(peopleModel);
        
        Optional<PeopleEntity> existingPeople = forQueryingPeople.findById(objectFromDomain.getPersonId());
        if (existingPeople.isEmpty()) {
            throw new EntityNotFoundException("PERSON NOT FOUND WITH ID: " + objectFromDomain.getPersonId());
        }
        
        PeopleEntity updatedEntity = forQueryingPeople.save(objectFromDomain);
        System.out.println("PERSON ENTITY HAS BEEN UPDATED SUCCESSFULLY");

        return forBridgingPeople.fromPersistence(updatedEntity);
    }

    @Override
    public void satisfyDeletePeopleById(Long id) {
        Optional<PeopleEntity> existingPeople = forQueryingPeople.findById(id);
        if (existingPeople.isEmpty()) {
            throw new EntityNotFoundException("PERSON NOT FOUND WITH ID: " + id);
        }
        
        forQueryingPeople.deleteById(id);
        System.out.println("PERSON ID: " + id + " HAS BEEN DELETED");
    }

    @Override
    public List<PeopleModel> satisfyFindAllPeople() {
        List<PeopleEntity> peopleEntities = forQueryingPeople.findAll();
        System.out.println("ALL PERSON ENTITIES HAVE BEEN FOUND SUCCESSFULLY");
        
        return peopleEntities.stream()
                .map(forBridgingPeople::fromPersistence)
                .collect(Collectors.toList());
    }
}
</file>

<file path="people-module/src/main/java/pe/edu/certus/peoplemodule/repository/adapters/mapper/PeoplePersistenceMapper.java">
package pe.edu.certus.peoplemodule.repository.adapters.mapper;

import org.springframework.stereotype.Component;
import pe.edu.certus.peoplemodule.logic.model.PeopleModel;
import pe.edu.certus.peoplemodule.repository.entity.PeopleEntity;
import pe.edu.certus.peoplemodule.repository.ports.mapper.ForBridgingPeople;

@Component
public class PeoplePersistenceMapper implements ForBridgingPeople {

    @Override
    public PeopleModel fromPersistence(PeopleEntity peopleEntity) {
        return PeopleModel.builder()
                .personId(peopleEntity.getPersonId())
                .idUser(peopleEntity.getIdUser())
                .idCareer(peopleEntity.getIdCareer())
                .personName(peopleEntity.getPersonName())
                .personLastname(peopleEntity.getPersonLastname())
                .personDni(peopleEntity.getPersonDni())
                .personMobilePhone(peopleEntity.getPersonMobilePhone())
                .personGender(peopleEntity.getPersonGender())
                .personInstituteLocation(peopleEntity.getPersonInstituteLocation())
                .personInstitutionalEmail(peopleEntity.getPersonInstitutionalEmail())
                .personInstitutionalCycle(peopleEntity.getPersonInstitutionalCycle())
                .build();
    }

    @Override
    public PeopleEntity toPersistence(PeopleModel peopleModel) {
        return PeopleEntity.builder()
                .personId(peopleModel.getPersonId())
                .idUser(peopleModel.getIdUser())
                .idCareer(peopleModel.getIdCareer())
                .personName(peopleModel.getPersonName())
                .personLastname(peopleModel.getPersonLastname())
                .personDni(peopleModel.getPersonDni())
                .personMobilePhone(peopleModel.getPersonMobilePhone())
                .personGender(peopleModel.getPersonGender())
                .personInstituteLocation(peopleModel.getPersonInstituteLocation())
                .personInstitutionalEmail(peopleModel.getPersonInstitutionalEmail())
                .personInstitutionalCycle(peopleModel.getPersonInstitutionalCycle())
                .build();
    }
}
</file>

<file path="people-module/src/main/java/pe/edu/certus/peoplemodule/repository/entity/PeopleEntity.java">
package pe.edu.certus.peoplemodule.repository.entity;

import jakarta.persistence.*;
import lombok.*;

@Entity
@Table(name = "people")
@Getter
@Setter
@Builder
@AllArgsConstructor
@NoArgsConstructor
public class PeopleEntity {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "person_id")
    private Long personId;

    @Transient
    @Column(name = "id_user")
    private Long idUser;

    @Transient
    @Column(name = "id_career")
    private Long idCareer;

    @Column(name = "person_name", nullable = false, length = 100)
    private String personName;

    @Column(name = "person_lastname", nullable = false, length = 100)
    private String personLastname;

    @Column(name = "person_dni", length = 8)
    private String personDni;

    @Column(name = "person_mobile_phone", length = 15)
    private String personMobilePhone;

    @Column(name = "person_gender", length = 1)
    private String personGender;

    @Column(name = "person_institute_location", length = 100)
    private String personInstituteLocation;

    @Column(name = "person_institutional_email", length = 100)
    private String personInstitutionalEmail;

    @Column(name = "person_institutional_cycle")
    private Integer personInstitutionalCycle;
}
</file>

<file path="people-module/src/main/java/pe/edu/certus/peoplemodule/repository/ports/driver/ForQueryingPeople.java">
package pe.edu.certus.peoplemodule.repository.ports.driver;

import org.springframework.data.jpa.repository.JpaRepository;
import pe.edu.certus.peoplemodule.repository.entity.PeopleEntity;

public interface ForQueryingPeople extends JpaRepository<PeopleEntity, Long> {
}
</file>

<file path="people-module/src/main/java/pe/edu/certus/peoplemodule/repository/ports/mapper/ForBridgingPeople.java">
package pe.edu.certus.peoplemodule.repository.ports.mapper;

import pe.edu.certus.peoplemodule.logic.model.PeopleModel;
import pe.edu.certus.peoplemodule.repository.entity.PeopleEntity;

public interface ForBridgingPeople {
    PeopleModel fromPersistence(PeopleEntity peopleEntity);
    PeopleEntity toPersistence(PeopleModel peopleModel);
}
</file>

<file path="people-module/src/main/resources/application.properties">
spring.application.name=people-module
</file>

<file path="ratings-module/.gitattributes">
/mvnw text eol=lf
*.cmd text eol=crlf
</file>

<file path="ratings-module/.gitignore">
HELP.md
target/
!.mvn/wrapper/maven-wrapper.jar
!**/src/main/**/target/
!**/src/test/**/target/

### STS ###
.apt_generated
.classpath
.factorypath
.project
.settings
.springBeans
.sts4-cache

### IntelliJ IDEA ###
.idea
*.iws
*.iml
*.ipr

### NetBeans ###
/nbproject/private/
/nbbuild/
/dist/
/nbdist/
/.nb-gradle/
build/
!**/src/main/**/build/
!**/src/test/**/build/

### VS Code ###
.vscode/
</file>

<file path="ratings-module/.mvn/wrapper/maven-wrapper.properties">
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
wrapperVersion=3.3.2
distributionType=only-script
distributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.9.9/apache-maven-3.9.9-bin.zip
</file>

<file path="ratings-module/mvnw">
#!/bin/sh
# ----------------------------------------------------------------------------
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
# ----------------------------------------------------------------------------

# ----------------------------------------------------------------------------
# Apache Maven Wrapper startup batch script, version 3.3.2
#
# Optional ENV vars
# -----------------
#   JAVA_HOME - location of a JDK home dir, required when download maven via java source
#   MVNW_REPOURL - repo url base for downloading maven distribution
#   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
#   MVNW_VERBOSE - true: enable verbose log; debug: trace the mvnw script; others: silence the output
# ----------------------------------------------------------------------------

set -euf
[ "${MVNW_VERBOSE-}" != debug ] || set -x

# OS specific support.
native_path() { printf %s\\n "$1"; }
case "$(uname)" in
CYGWIN* | MINGW*)
  [ -z "${JAVA_HOME-}" ] || JAVA_HOME="$(cygpath --unix "$JAVA_HOME")"
  native_path() { cygpath --path --windows "$1"; }
  ;;
esac

# set JAVACMD and JAVACCMD
set_java_home() {
  # For Cygwin and MinGW, ensure paths are in Unix format before anything is touched
  if [ -n "${JAVA_HOME-}" ]; then
    if [ -x "$JAVA_HOME/jre/sh/java" ]; then
      # IBM's JDK on AIX uses strange locations for the executables
      JAVACMD="$JAVA_HOME/jre/sh/java"
      JAVACCMD="$JAVA_HOME/jre/sh/javac"
    else
      JAVACMD="$JAVA_HOME/bin/java"
      JAVACCMD="$JAVA_HOME/bin/javac"

      if [ ! -x "$JAVACMD" ] || [ ! -x "$JAVACCMD" ]; then
        echo "The JAVA_HOME environment variable is not defined correctly, so mvnw cannot run." >&2
        echo "JAVA_HOME is set to \"$JAVA_HOME\", but \"\$JAVA_HOME/bin/java\" or \"\$JAVA_HOME/bin/javac\" does not exist." >&2
        return 1
      fi
    fi
  else
    JAVACMD="$(
      'set' +e
      'unset' -f command 2>/dev/null
      'command' -v java
    )" || :
    JAVACCMD="$(
      'set' +e
      'unset' -f command 2>/dev/null
      'command' -v javac
    )" || :

    if [ ! -x "${JAVACMD-}" ] || [ ! -x "${JAVACCMD-}" ]; then
      echo "The java/javac command does not exist in PATH nor is JAVA_HOME set, so mvnw cannot run." >&2
      return 1
    fi
  fi
}

# hash string like Java String::hashCode
hash_string() {
  str="${1:-}" h=0
  while [ -n "$str" ]; do
    char="${str%"${str#?}"}"
    h=$(((h * 31 + $(LC_CTYPE=C printf %d "'$char")) % 4294967296))
    str="${str#?}"
  done
  printf %x\\n $h
}

verbose() { :; }
[ "${MVNW_VERBOSE-}" != true ] || verbose() { printf %s\\n "${1-}"; }

die() {
  printf %s\\n "$1" >&2
  exit 1
}

trim() {
  # MWRAPPER-139:
  #   Trims trailing and leading whitespace, carriage returns, tabs, and linefeeds.
  #   Needed for removing poorly interpreted newline sequences when running in more
  #   exotic environments such as mingw bash on Windows.
  printf "%s" "${1}" | tr -d '[:space:]'
}

# parse distributionUrl and optional distributionSha256Sum, requires .mvn/wrapper/maven-wrapper.properties
while IFS="=" read -r key value; do
  case "${key-}" in
  distributionUrl) distributionUrl=$(trim "${value-}") ;;
  distributionSha256Sum) distributionSha256Sum=$(trim "${value-}") ;;
  esac
done <"${0%/*}/.mvn/wrapper/maven-wrapper.properties"
[ -n "${distributionUrl-}" ] || die "cannot read distributionUrl property in ${0%/*}/.mvn/wrapper/maven-wrapper.properties"

case "${distributionUrl##*/}" in
maven-mvnd-*bin.*)
  MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/
  case "${PROCESSOR_ARCHITECTURE-}${PROCESSOR_ARCHITEW6432-}:$(uname -a)" in
  *AMD64:CYGWIN* | *AMD64:MINGW*) distributionPlatform=windows-amd64 ;;
  :Darwin*x86_64) distributionPlatform=darwin-amd64 ;;
  :Darwin*arm64) distributionPlatform=darwin-aarch64 ;;
  :Linux*x86_64*) distributionPlatform=linux-amd64 ;;
  *)
    echo "Cannot detect native platform for mvnd on $(uname)-$(uname -m), use pure java version" >&2
    distributionPlatform=linux-amd64
    ;;
  esac
  distributionUrl="${distributionUrl%-bin.*}-$distributionPlatform.zip"
  ;;
maven-mvnd-*) MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/ ;;
*) MVN_CMD="mvn${0##*/mvnw}" _MVNW_REPO_PATTERN=/org/apache/maven/ ;;
esac

# apply MVNW_REPOURL and calculate MAVEN_HOME
# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
[ -z "${MVNW_REPOURL-}" ] || distributionUrl="$MVNW_REPOURL$_MVNW_REPO_PATTERN${distributionUrl#*"$_MVNW_REPO_PATTERN"}"
distributionUrlName="${distributionUrl##*/}"
distributionUrlNameMain="${distributionUrlName%.*}"
distributionUrlNameMain="${distributionUrlNameMain%-bin}"
MAVEN_USER_HOME="${MAVEN_USER_HOME:-${HOME}/.m2}"
MAVEN_HOME="${MAVEN_USER_HOME}/wrapper/dists/${distributionUrlNameMain-}/$(hash_string "$distributionUrl")"

exec_maven() {
  unset MVNW_VERBOSE MVNW_USERNAME MVNW_PASSWORD MVNW_REPOURL || :
  exec "$MAVEN_HOME/bin/$MVN_CMD" "$@" || die "cannot exec $MAVEN_HOME/bin/$MVN_CMD"
}

if [ -d "$MAVEN_HOME" ]; then
  verbose "found existing MAVEN_HOME at $MAVEN_HOME"
  exec_maven "$@"
fi

case "${distributionUrl-}" in
*?-bin.zip | *?maven-mvnd-?*-?*.zip) ;;
*) die "distributionUrl is not valid, must match *-bin.zip or maven-mvnd-*.zip, but found '${distributionUrl-}'" ;;
esac

# prepare tmp dir
if TMP_DOWNLOAD_DIR="$(mktemp -d)" && [ -d "$TMP_DOWNLOAD_DIR" ]; then
  clean() { rm -rf -- "$TMP_DOWNLOAD_DIR"; }
  trap clean HUP INT TERM EXIT
else
  die "cannot create temp dir"
fi

mkdir -p -- "${MAVEN_HOME%/*}"

# Download and Install Apache Maven
verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."
verbose "Downloading from: $distributionUrl"
verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"

# select .zip or .tar.gz
if ! command -v unzip >/dev/null; then
  distributionUrl="${distributionUrl%.zip}.tar.gz"
  distributionUrlName="${distributionUrl##*/}"
fi

# verbose opt
__MVNW_QUIET_WGET=--quiet __MVNW_QUIET_CURL=--silent __MVNW_QUIET_UNZIP=-q __MVNW_QUIET_TAR=''
[ "${MVNW_VERBOSE-}" != true ] || __MVNW_QUIET_WGET='' __MVNW_QUIET_CURL='' __MVNW_QUIET_UNZIP='' __MVNW_QUIET_TAR=v

# normalize http auth
case "${MVNW_PASSWORD:+has-password}" in
'') MVNW_USERNAME='' MVNW_PASSWORD='' ;;
has-password) [ -n "${MVNW_USERNAME-}" ] || MVNW_USERNAME='' MVNW_PASSWORD='' ;;
esac

if [ -z "${MVNW_USERNAME-}" ] && command -v wget >/dev/null; then
  verbose "Found wget ... using wget"
  wget ${__MVNW_QUIET_WGET:+"$__MVNW_QUIET_WGET"} "$distributionUrl" -O "$TMP_DOWNLOAD_DIR/$distributionUrlName" || die "wget: Failed to fetch $distributionUrl"
elif [ -z "${MVNW_USERNAME-}" ] && command -v curl >/dev/null; then
  verbose "Found curl ... using curl"
  curl ${__MVNW_QUIET_CURL:+"$__MVNW_QUIET_CURL"} -f -L -o "$TMP_DOWNLOAD_DIR/$distributionUrlName" "$distributionUrl" || die "curl: Failed to fetch $distributionUrl"
elif set_java_home; then
  verbose "Falling back to use Java to download"
  javaSource="$TMP_DOWNLOAD_DIR/Downloader.java"
  targetZip="$TMP_DOWNLOAD_DIR/$distributionUrlName"
  cat >"$javaSource" <<-END
	public class Downloader extends java.net.Authenticator
	{
	  protected java.net.PasswordAuthentication getPasswordAuthentication()
	  {
	    return new java.net.PasswordAuthentication( System.getenv( "MVNW_USERNAME" ), System.getenv( "MVNW_PASSWORD" ).toCharArray() );
	  }
	  public static void main( String[] args ) throws Exception
	  {
	    setDefault( new Downloader() );
	    java.nio.file.Files.copy( java.net.URI.create( args[0] ).toURL().openStream(), java.nio.file.Paths.get( args[1] ).toAbsolutePath().normalize() );
	  }
	}
	END
  # For Cygwin/MinGW, switch paths to Windows format before running javac and java
  verbose " - Compiling Downloader.java ..."
  "$(native_path "$JAVACCMD")" "$(native_path "$javaSource")" || die "Failed to compile Downloader.java"
  verbose " - Running Downloader.java ..."
  "$(native_path "$JAVACMD")" -cp "$(native_path "$TMP_DOWNLOAD_DIR")" Downloader "$distributionUrl" "$(native_path "$targetZip")"
fi

# If specified, validate the SHA-256 sum of the Maven distribution zip file
if [ -n "${distributionSha256Sum-}" ]; then
  distributionSha256Result=false
  if [ "$MVN_CMD" = mvnd.sh ]; then
    echo "Checksum validation is not supported for maven-mvnd." >&2
    echo "Please disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2
    exit 1
  elif command -v sha256sum >/dev/null; then
    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | sha256sum -c >/dev/null 2>&1; then
      distributionSha256Result=true
    fi
  elif command -v shasum >/dev/null; then
    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | shasum -a 256 -c >/dev/null 2>&1; then
      distributionSha256Result=true
    fi
  else
    echo "Checksum validation was requested but neither 'sha256sum' or 'shasum' are available." >&2
    echo "Please install either command, or disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2
    exit 1
  fi
  if [ $distributionSha256Result = false ]; then
    echo "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised." >&2
    echo "If you updated your Maven version, you need to update the specified distributionSha256Sum property." >&2
    exit 1
  fi
fi

# unzip and move
if command -v unzip >/dev/null; then
  unzip ${__MVNW_QUIET_UNZIP:+"$__MVNW_QUIET_UNZIP"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -d "$TMP_DOWNLOAD_DIR" || die "failed to unzip"
else
  tar xzf${__MVNW_QUIET_TAR:+"$__MVNW_QUIET_TAR"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -C "$TMP_DOWNLOAD_DIR" || die "failed to untar"
fi
printf %s\\n "$distributionUrl" >"$TMP_DOWNLOAD_DIR/$distributionUrlNameMain/mvnw.url"
mv -- "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" "$MAVEN_HOME" || [ -d "$MAVEN_HOME" ] || die "fail to move MAVEN_HOME"

clean || :
exec_maven "$@"
</file>

<file path="ratings-module/mvnw.cmd">
<# : batch portion
@REM ----------------------------------------------------------------------------
@REM Licensed to the Apache Software Foundation (ASF) under one
@REM or more contributor license agreements.  See the NOTICE file
@REM distributed with this work for additional information
@REM regarding copyright ownership.  The ASF licenses this file
@REM to you under the Apache License, Version 2.0 (the
@REM "License"); you may not use this file except in compliance
@REM with the License.  You may obtain a copy of the License at
@REM
@REM    http://www.apache.org/licenses/LICENSE-2.0
@REM
@REM Unless required by applicable law or agreed to in writing,
@REM software distributed under the License is distributed on an
@REM "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
@REM KIND, either express or implied.  See the License for the
@REM specific language governing permissions and limitations
@REM under the License.
@REM ----------------------------------------------------------------------------

@REM ----------------------------------------------------------------------------
@REM Apache Maven Wrapper startup batch script, version 3.3.2
@REM
@REM Optional ENV vars
@REM   MVNW_REPOURL - repo url base for downloading maven distribution
@REM   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
@REM   MVNW_VERBOSE - true: enable verbose log; others: silence the output
@REM ----------------------------------------------------------------------------

@IF "%__MVNW_ARG0_NAME__%"=="" (SET __MVNW_ARG0_NAME__=%~nx0)
@SET __MVNW_CMD__=
@SET __MVNW_ERROR__=
@SET __MVNW_PSMODULEP_SAVE=%PSModulePath%
@SET PSModulePath=
@FOR /F "usebackq tokens=1* delims==" %%A IN (`powershell -noprofile "& {$scriptDir='%~dp0'; $script='%__MVNW_ARG0_NAME__%'; icm -ScriptBlock ([Scriptblock]::Create((Get-Content -Raw '%~f0'))) -NoNewScope}"`) DO @(
  IF "%%A"=="MVN_CMD" (set __MVNW_CMD__=%%B) ELSE IF "%%B"=="" (echo %%A) ELSE (echo %%A=%%B)
)
@SET PSModulePath=%__MVNW_PSMODULEP_SAVE%
@SET __MVNW_PSMODULEP_SAVE=
@SET __MVNW_ARG0_NAME__=
@SET MVNW_USERNAME=
@SET MVNW_PASSWORD=
@IF NOT "%__MVNW_CMD__%"=="" (%__MVNW_CMD__% %*)
@echo Cannot start maven from wrapper >&2 && exit /b 1
@GOTO :EOF
: end batch / begin powershell #>

$ErrorActionPreference = "Stop"
if ($env:MVNW_VERBOSE -eq "true") {
  $VerbosePreference = "Continue"
}

# calculate distributionUrl, requires .mvn/wrapper/maven-wrapper.properties
$distributionUrl = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionUrl
if (!$distributionUrl) {
  Write-Error "cannot read distributionUrl property in $scriptDir/.mvn/wrapper/maven-wrapper.properties"
}

switch -wildcard -casesensitive ( $($distributionUrl -replace '^.*/','') ) {
  "maven-mvnd-*" {
    $USE_MVND = $true
    $distributionUrl = $distributionUrl -replace '-bin\.[^.]*$',"-windows-amd64.zip"
    $MVN_CMD = "mvnd.cmd"
    break
  }
  default {
    $USE_MVND = $false
    $MVN_CMD = $script -replace '^mvnw','mvn'
    break
  }
}

# apply MVNW_REPOURL and calculate MAVEN_HOME
# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
if ($env:MVNW_REPOURL) {
  $MVNW_REPO_PATTERN = if ($USE_MVND) { "/org/apache/maven/" } else { "/maven/mvnd/" }
  $distributionUrl = "$env:MVNW_REPOURL$MVNW_REPO_PATTERN$($distributionUrl -replace '^.*'+$MVNW_REPO_PATTERN,'')"
}
$distributionUrlName = $distributionUrl -replace '^.*/',''
$distributionUrlNameMain = $distributionUrlName -replace '\.[^.]*$','' -replace '-bin$',''
$MAVEN_HOME_PARENT = "$HOME/.m2/wrapper/dists/$distributionUrlNameMain"
if ($env:MAVEN_USER_HOME) {
  $MAVEN_HOME_PARENT = "$env:MAVEN_USER_HOME/wrapper/dists/$distributionUrlNameMain"
}
$MAVEN_HOME_NAME = ([System.Security.Cryptography.MD5]::Create().ComputeHash([byte[]][char[]]$distributionUrl) | ForEach-Object {$_.ToString("x2")}) -join ''
$MAVEN_HOME = "$MAVEN_HOME_PARENT/$MAVEN_HOME_NAME"

if (Test-Path -Path "$MAVEN_HOME" -PathType Container) {
  Write-Verbose "found existing MAVEN_HOME at $MAVEN_HOME"
  Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"
  exit $?
}

if (! $distributionUrlNameMain -or ($distributionUrlName -eq $distributionUrlNameMain)) {
  Write-Error "distributionUrl is not valid, must end with *-bin.zip, but found $distributionUrl"
}

# prepare tmp dir
$TMP_DOWNLOAD_DIR_HOLDER = New-TemporaryFile
$TMP_DOWNLOAD_DIR = New-Item -Itemtype Directory -Path "$TMP_DOWNLOAD_DIR_HOLDER.dir"
$TMP_DOWNLOAD_DIR_HOLDER.Delete() | Out-Null
trap {
  if ($TMP_DOWNLOAD_DIR.Exists) {
    try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
    catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }
  }
}

New-Item -Itemtype Directory -Path "$MAVEN_HOME_PARENT" -Force | Out-Null

# Download and Install Apache Maven
Write-Verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."
Write-Verbose "Downloading from: $distributionUrl"
Write-Verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"

$webclient = New-Object System.Net.WebClient
if ($env:MVNW_USERNAME -and $env:MVNW_PASSWORD) {
  $webclient.Credentials = New-Object System.Net.NetworkCredential($env:MVNW_USERNAME, $env:MVNW_PASSWORD)
}
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
$webclient.DownloadFile($distributionUrl, "$TMP_DOWNLOAD_DIR/$distributionUrlName") | Out-Null

# If specified, validate the SHA-256 sum of the Maven distribution zip file
$distributionSha256Sum = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionSha256Sum
if ($distributionSha256Sum) {
  if ($USE_MVND) {
    Write-Error "Checksum validation is not supported for maven-mvnd. `nPlease disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties."
  }
  Import-Module $PSHOME\Modules\Microsoft.PowerShell.Utility -Function Get-FileHash
  if ((Get-FileHash "$TMP_DOWNLOAD_DIR/$distributionUrlName" -Algorithm SHA256).Hash.ToLower() -ne $distributionSha256Sum) {
    Write-Error "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised. If you updated your Maven version, you need to update the specified distributionSha256Sum property."
  }
}

# unzip and move
Expand-Archive "$TMP_DOWNLOAD_DIR/$distributionUrlName" -DestinationPath "$TMP_DOWNLOAD_DIR" | Out-Null
Rename-Item -Path "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" -NewName $MAVEN_HOME_NAME | Out-Null
try {
  Move-Item -Path "$TMP_DOWNLOAD_DIR/$MAVEN_HOME_NAME" -Destination $MAVEN_HOME_PARENT | Out-Null
} catch {
  if (! (Test-Path -Path "$MAVEN_HOME" -PathType Container)) {
    Write-Error "fail to move MAVEN_HOME"
  }
} finally {
  try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
  catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }
}

Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"
</file>

<file path="ratings-module/pom.xml">
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>pe.edu.certus</groupId>
		<artifactId>cm-backend</artifactId>
		<version>0.0.1-SNAPSHOT</version>
	</parent>

	<artifactId>ratings-module</artifactId>
	<name>ratings-module</name>
	<description>ratings-module</description>
	<url/>

	<properties>
		<java.version>17</java.version>
		<lombok.version>1.18.32</lombok.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<version>${lombok.version}</version>
			<optional>true</optional>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<annotationProcessorPaths>
						<path>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
							<version>${lombok.version}</version>
						</path>
					</annotationProcessorPaths>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>
</file>

<file path="ratings-module/src/main/java/pe/edu/certus/ratingsmodule/configuration/annotations/RatingComponentScanConfig.java">
package pe.edu.certus.ratingsmodule.configuration.annotations;

import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;

@Configuration
@ComponentScan(basePackages = "pe.edu.certus.ratingsmodule")
public class RatingComponentScanConfig {
}
</file>

<file path="ratings-module/src/main/java/pe/edu/certus/ratingsmodule/configuration/annotations/RatingEntityScanConfig.java">
package pe.edu.certus.ratingsmodule.configuration.annotations;

import org.springframework.boot.autoconfigure.domain.EntityScan;
import org.springframework.context.annotation.Configuration;

@Configuration
@EntityScan(basePackages = "pe.edu.certus.ratingsmodule.repository.entity")
public class RatingEntityScanConfig {
}
</file>

<file path="ratings-module/src/main/java/pe/edu/certus/ratingsmodule/configuration/annotations/RatingPersistenceConfig.java">
package pe.edu.certus.ratingsmodule.configuration.annotations;

import org.springframework.context.annotation.Configuration;
import org.springframework.data.jpa.repository.config.EnableJpaRepositories;

@Configuration
@EnableJpaRepositories(basePackages = "pe.edu.certus.ratingsmodule.repository")
public class RatingPersistenceConfig {
}
</file>

<file path="ratings-module/src/main/java/pe/edu/certus/ratingsmodule/configuration/mappers/RatingMapperConfig.java">
package pe.edu.certus.ratingsmodule.configuration.mappers;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import pe.edu.certus.ratingsmodule.logic.adapters.mapper.RatingMapper;

@Configuration
public class RatingMapperConfig {
    @Bean
    public RatingMapper ratingMapper() {
        return new RatingMapper();
    }
}
</file>

<file path="ratings-module/src/main/java/pe/edu/certus/ratingsmodule/configuration/mappers/RatingMapperPersistenceConfig.java">
package pe.edu.certus.ratingsmodule.configuration.mappers;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import pe.edu.certus.ratingsmodule.repository.adapters.mapper.RatingPersistenceMapper;

@Configuration
public class RatingMapperPersistenceConfig {
    @Bean
    public RatingPersistenceMapper ratingPersistenceMapper() {
        return new RatingPersistenceMapper();
    }
}
</file>

<file path="ratings-module/src/main/java/pe/edu/certus/ratingsmodule/logic/adapters/driven/RatingManager.java">
package pe.edu.certus.ratingsmodule.logic.adapters.driven;

import org.springframework.stereotype.Service;
import pe.edu.certus.ratingsmodule.logic.model.RatingModel;
import pe.edu.certus.ratingsmodule.logic.ports.driven.ForManagingRating;
import pe.edu.certus.ratingsmodule.logic.ports.driver.ForRating;

import java.util.List;

@Service
public class RatingManager implements ForRating< RatingModel, Long > {

    private final ForManagingRating forManagingRating;

    public RatingManager( ForManagingRating forManagingRating ) {
        this.forManagingRating = forManagingRating;
    }

    @Override
    public void createRating( RatingModel ratingModel ) {
        try {
            forManagingRating.satisfyCreateRating( ratingModel );
            System.out.println( "THE RATING HAS BEEN CREATED SUCCESSFULLY" );
        } catch ( IllegalArgumentException e ) {
            System.out.println( "ERROR CREATING THE RATING: " + e.getMessage( ) );
            e.printStackTrace( );
        }
    }

    @Override
    public RatingModel findRatingById( Long id ) {
        try {
            if ( id == null ) {
                throw new IllegalArgumentException( "ID CANNOT BE NULL" );
            }

            RatingModel ratingModel = forManagingRating.satisfyFindRatingById( id );
            System.out.println( "THE RATING HAS BEEN FOUND SUCCESSFULLY" );

            if ( ratingModel == null ) {
                throw new IllegalArgumentException( "RATING NOT FOUND" );
            }

            return ratingModel;
        } catch ( Exception e ) {
            throw new RuntimeException( "FAILED TO FIND RATING MODEL", e );
        }
    }


    @Override
    public RatingModel updateRating( RatingModel ratingModel ) {
        try {
            if ( ratingModel == null ) {
                throw new IllegalArgumentException( "RATING MODEL CANNOT BE NULL" );
            }

            RatingModel updatedRatingModel = forManagingRating.satisfyUpdateRating( ratingModel );
            System.out.println( "RATING MODEL UPDATED SUCCESSFULLY" );

            return updatedRatingModel;
        } catch ( Exception e ) {
            throw new RuntimeException( "FAILED TO UPDATE RATING MODEL", e );
        }
    }

    @Override
    public void deleteRating( Long id ) {
        try {
            if ( id == null ) {
                throw new IllegalArgumentException( "ID CANNOT BE NULL" );
            }

            forManagingRating.satisfyDeleteRatingById( id );
            System.out.println( "RATING MODEL DELETED SUCCESSFULLY" );

        } catch ( Exception e ) {
            throw new RuntimeException( "FAILED TO DELETE RATING MODEL", e );
        }
    }

    @Override
    public List< RatingModel > findAllRatings( ) {
        try {
            List< RatingModel > ratingModels = forManagingRating.satisfyFindAllRating( );
            System.out.println( "ALL RATINGS HAVE BEEN FOUND SUCCESSFULLY" );
            return ratingModels;
        } catch ( Exception e ) {
            throw new RuntimeException( "FAILED TO FIND ALL RATING MODELS", e );
        }
    }
}
</file>

<file path="ratings-module/src/main/java/pe/edu/certus/ratingsmodule/logic/adapters/driver/RatingAdapter.java">
package pe.edu.certus.ratingsmodule.logic.adapters.driver;

import jakarta.persistence.EntityNotFoundException;
import jakarta.validation.Valid;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import pe.edu.certus.ratingsmodule.logic.model.RatingModel;
import pe.edu.certus.ratingsmodule.logic.ports.driver.ForRating;
import pe.edu.certus.ratingsmodule.logic.ports.mapper.ForMappingRating;

import java.util.List;
import java.util.stream.Collectors;

@RestController
@RequestMapping( "/ratings" )
public class RatingAdapter {

    private final ForRating forRating;
    private final ForMappingRating forMappingRating;

    public RatingAdapter( ForRating forRating, ForMappingRating forMappingRating ) {
        this.forRating = forRating;
        this.forMappingRating = forMappingRating;
    }

    @PostMapping( "/create" )
    public ResponseEntity< RatingWebModel > createRating( @Valid @RequestBody RatingWebModel ratingWebModel ) {
        try {
            RatingModel objectFromWeb = forMappingRating.fromWeb( ratingWebModel );
            forRating.createRating( objectFromWeb );
            return ResponseEntity.ok( ).build( );
        } catch ( IllegalArgumentException e ) {
            throw new RuntimeException( "FAILED TO CREATE RATING", e );
        }
    }

    @GetMapping( "/{id}" )
    public ResponseEntity< RatingWebModel > findRatingById( @PathVariable Long id ) {
        try {
            RatingModel ratingModel = ( RatingModel ) forRating.findRatingById( id );
            RatingWebModel response = forMappingRating.toWeb( ratingModel );
            return ResponseEntity.ok( response );
        } catch ( EntityNotFoundException e ) {
            return ResponseEntity.notFound( ).build( );
        } catch ( IllegalArgumentException e ) {
            return ResponseEntity.badRequest( ).build( );
        }
    }

    @PutMapping( "/update" )
    public ResponseEntity< RatingWebModel > updateRating( @Valid @RequestBody RatingWebModel ratingWebModel ) {
        try {
            RatingModel objectFromWeb = forMappingRating.fromWeb( ratingWebModel );
            RatingModel updatedRating = ( RatingModel ) forRating.updateRating( objectFromWeb );
            RatingWebModel response = forMappingRating.toWeb( updatedRating );
            return ResponseEntity.ok( response );
        } catch ( EntityNotFoundException e ) {
            return ResponseEntity.notFound( ).build( );
        } catch ( IllegalArgumentException e ) {
            return ResponseEntity.badRequest( ).build( );
        }
    }

    @DeleteMapping( "/{id}" )
    public ResponseEntity< Void > deleteRatingById( @PathVariable Long id ) {
        try {
            forRating.deleteRating( id );
            return ResponseEntity.ok( ).build( );
        } catch ( EntityNotFoundException e ) {
            return ResponseEntity.notFound( ).build( );
        } catch ( IllegalArgumentException e ) {
            return ResponseEntity.badRequest( ).build( );
        }
    }

    @GetMapping
    public ResponseEntity< List< RatingWebModel > > findAllRatings( ) {
        try {
            List< RatingModel > ratingModels = forRating.findAllRatings( );
            List< RatingWebModel > response = ratingModels.stream( )
                    .map( forMappingRating::toWeb )
                    .collect( Collectors.toList( ) );
            return ResponseEntity.ok( response );
        } catch ( Exception e ) {
            return ResponseEntity.badRequest( ).build( );
        }
    }
}
</file>

<file path="ratings-module/src/main/java/pe/edu/certus/ratingsmodule/logic/adapters/driver/RatingWebModel.java">
package pe.edu.certus.ratingsmodule.logic.adapters.driver;

import jakarta.validation.constraints.Max;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;
import lombok.Builder;

import java.time.LocalDateTime;

@Builder
public record RatingWebModel(
        Long ratingId,
        
        Long workId,
        Long userId,
        Long orderId,
        
        @NotNull(message = "La puntuación no puede ser nula")
        @Min(value = 1, message = "La puntuación mínima es 1")
        @Max(value = 5, message = "La puntuación máxima es 5")
        byte ratingScore,
        
        @Size(max = 1000, message = "El comentario no puede exceder los 1000 caracteres")
        String ratingComment,
        
        LocalDateTime ratingCreatedAt
) {
    public RatingWebModel {
        ratingCreatedAt = ratingCreatedAt != null ? ratingCreatedAt : LocalDateTime.now();
    }
}
</file>

<file path="ratings-module/src/main/java/pe/edu/certus/ratingsmodule/logic/adapters/mapper/RatingMapper.java">
package pe.edu.certus.ratingsmodule.logic.adapters.mapper;

import pe.edu.certus.ratingsmodule.logic.adapters.driver.RatingWebModel;
import pe.edu.certus.ratingsmodule.logic.model.RatingModel;
import pe.edu.certus.ratingsmodule.logic.ports.mapper.ForMappingRating;

public class RatingMapper implements ForMappingRating {

    @Override
    public RatingModel fromWeb(RatingWebModel ratingWebModel) {
        return RatingModel.builder()
                .ratingId(ratingWebModel.ratingId())
                .workId(ratingWebModel.workId())
                .userId(ratingWebModel.userId())
                .orderId(ratingWebModel.orderId())
                .ratingScore(ratingWebModel.ratingScore())
                .ratingComment(ratingWebModel.ratingComment())
                .ratingCreatedAt(ratingWebModel.ratingCreatedAt())
                .build();
    }

    @Override
    public RatingWebModel toWeb(RatingModel ratingModel) {
        return new RatingWebModel(
                ratingModel.getRatingId(),
                ratingModel.getWorkId(),
                ratingModel.getUserId(),
                ratingModel.getOrderId(),
                ratingModel.getRatingScore(),
                ratingModel.getRatingComment(),
                ratingModel.getRatingCreatedAt()
        );
    }
}
</file>

<file path="ratings-module/src/main/java/pe/edu/certus/ratingsmodule/logic/model/RatingModel.java">
package pe.edu.certus.ratingsmodule.logic.model;

import lombok.Builder;
import lombok.Getter;
import lombok.Setter;

import java.time.LocalDateTime;

@Getter
@Setter
@Builder
public class RatingModel {
    private Long ratingId;
    private Long workId;
    private Long userId;
    private Long orderId;
    private byte ratingScore;
    private String ratingComment;
    private LocalDateTime ratingCreatedAt;
}
</file>

<file path="ratings-module/src/main/java/pe/edu/certus/ratingsmodule/logic/ports/driven/ForManagingRating.java">
package pe.edu.certus.ratingsmodule.logic.ports.driven;

import pe.edu.certus.ratingsmodule.logic.model.RatingModel;

import java.util.List;

public interface ForManagingRating {
    void satisfyCreateRating(RatingModel ratingModel);
    RatingModel satisfyFindRatingById(Long id);
    List<RatingModel> satisfyFindAllRating();
    RatingModel satisfyUpdateRating(RatingModel ratingModel);
    void satisfyDeleteRatingById(Long id);
}
</file>

<file path="ratings-module/src/main/java/pe/edu/certus/ratingsmodule/logic/ports/driver/ForRating.java">
package pe.edu.certus.ratingsmodule.logic.ports.driver;

import java.util.List;

public interface ForRating <RatingModel, Long> {
    void createRating(RatingModel ratingModel);
    RatingModel findRatingById(Long id);
    List<RatingModel> findAllRatings();
    RatingModel updateRating(RatingModel ratingModel);
    void deleteRating(Long id);
}
</file>

<file path="ratings-module/src/main/java/pe/edu/certus/ratingsmodule/logic/ports/mapper/ForMappingRating.java">
package pe.edu.certus.ratingsmodule.logic.ports.mapper;

import pe.edu.certus.ratingsmodule.logic.adapters.driver.RatingWebModel;
import pe.edu.certus.ratingsmodule.logic.model.RatingModel;

public interface ForMappingRating {

    RatingModel fromWeb( RatingWebModel ratingWebModel );

    RatingWebModel toWeb( RatingModel ratingModel );

}
</file>

<file path="ratings-module/src/main/java/pe/edu/certus/ratingsmodule/RatingsModuleApplication.java">
package pe.edu.certus.ratingsmodule;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class RatingsModuleApplication {

	public static void main(String[] args) {
		SpringApplication.run(RatingsModuleApplication.class, args);
	}

}
</file>

<file path="ratings-module/src/main/java/pe/edu/certus/ratingsmodule/repository/adapters/driver/RatingQuerierProxy.java">
package pe.edu.certus.ratingsmodule.repository.adapters.driver;

import jakarta.persistence.EntityNotFoundException;
import org.springframework.stereotype.Service;
import pe.edu.certus.ratingsmodule.logic.model.RatingModel;
import pe.edu.certus.ratingsmodule.logic.ports.driven.ForManagingRating;
import pe.edu.certus.ratingsmodule.repository.entity.RatingEntity;
import pe.edu.certus.ratingsmodule.repository.ports.driver.ForQueryingRating;
import pe.edu.certus.ratingsmodule.repository.ports.mapper.ForBridgingRating;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
public class RatingQuerierProxy implements ForManagingRating {
    private final ForQueryingRating forQueryingRating;
    private final ForBridgingRating forBridgingRating;

    public RatingQuerierProxy(ForQueryingRating forQueryingRating, ForBridgingRating forBridgingRating) {
        this.forQueryingRating = forQueryingRating;
        this.forBridgingRating = forBridgingRating;
    }

    @Override
    public void satisfyCreateRating(RatingModel ratingModel) {
        RatingEntity objectFromDomain = forBridgingRating.toPersistence(ratingModel);
        objectFromDomain.setRatingCreatedAt(LocalDateTime.now());
        forQueryingRating.save(objectFromDomain);
        System.out.println("THE RATING ENTITY HAS BEEN CREATED SUCCESSFULLY");
    }

    @Override
    public RatingModel satisfyFindRatingById(Long id) {
        return forQueryingRating.findById(id)
                .map(forBridgingRating::fromPersistence)
                .orElseThrow(() -> new EntityNotFoundException(
                        "THE ENTITY RATING NOT FOUND WITH ID: " + id));
    }

    @Override
    public RatingModel satisfyUpdateRating(RatingModel ratingModel) {
        RatingEntity objectFromDomain = forBridgingRating.toPersistence(ratingModel);
        
        Optional<RatingEntity> existingRating = forQueryingRating.findById(objectFromDomain.getRatingId());
        if (existingRating.isEmpty()) {
            throw new EntityNotFoundException("RATING NOT FOUND WITH ID: " + objectFromDomain.getRatingId());
        }
        
        RatingEntity updatedEntity = forQueryingRating.save(objectFromDomain);
        System.out.println("THE RATING ENTITY HAS BEEN UPDATED SUCCESSFULLY");

        return forBridgingRating.fromPersistence(updatedEntity);
    }

    @Override
    public void satisfyDeleteRatingById(Long id) {
        Optional<RatingEntity> existingRating = forQueryingRating.findById(id);
        if (existingRating.isEmpty()) {
            throw new EntityNotFoundException("RATING NOT FOUND WITH ID: " + id);
        }
        
        forQueryingRating.deleteById(id);
        System.out.println("RATING ID: " + id + " IS DELETED");
    }

    @Override
    public List<RatingModel> satisfyFindAllRating() {
        List<RatingEntity> ratingEntities = forQueryingRating.findAll();
        System.out.println("ALL RATING ENTITIES HAVE BEEN FOUND SUCCESSFULLY");
        
        return ratingEntities.stream()
                .map(forBridgingRating::fromPersistence)
                .collect(Collectors.toList());
    }
}
</file>

<file path="ratings-module/src/main/java/pe/edu/certus/ratingsmodule/repository/adapters/mapper/RatingPersistenceMapper.java">
package pe.edu.certus.ratingsmodule.repository.adapters.mapper;

import pe.edu.certus.ratingsmodule.logic.model.RatingModel;
import pe.edu.certus.ratingsmodule.repository.entity.RatingEntity;
import pe.edu.certus.ratingsmodule.repository.ports.mapper.ForBridgingRating;

public class RatingPersistenceMapper implements ForBridgingRating {
    @Override
    public RatingEntity toPersistence(RatingModel ratingModel) {
        return RatingEntity.builder()
                .ratingId(ratingModel.getRatingId())
                .workId(ratingModel.getWorkId())
                .userId(ratingModel.getUserId())
                .orderId(ratingModel.getOrderId())
                .ratingScore(ratingModel.getRatingScore())
                .ratingComment(ratingModel.getRatingComment())
                .ratingCreatedAt(ratingModel.getRatingCreatedAt())
                .build();
    }

    @Override
    public RatingModel fromPersistence(RatingEntity ratingEntity) {
        return RatingModel.builder()
                .ratingId(ratingEntity.getRatingId())
                .workId(ratingEntity.getWorkId())
                .userId(ratingEntity.getUserId())
                .orderId(ratingEntity.getOrderId())
                .ratingScore(ratingEntity.getRatingScore())
                .ratingComment(ratingEntity.getRatingComment())
                .ratingCreatedAt(ratingEntity.getRatingCreatedAt())
                .build();
    }
}
</file>

<file path="ratings-module/src/main/java/pe/edu/certus/ratingsmodule/repository/entity/RatingEntity.java">
package pe.edu.certus.ratingsmodule.repository.entity;

import jakarta.persistence.*;
import lombok.*;

import java.time.LocalDateTime;

@Entity
@Table(name = "ratings")
@Getter
@Setter
@Builder
@AllArgsConstructor
@NoArgsConstructor
public class RatingEntity {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "rating_id")
    private Long ratingId;

    @Transient
    @Column(name = "work_id", nullable = true)
    private Long workId;

    @Transient
    @Column(name = "user_id", nullable = true)
    private Long userId;

    @Transient
    @Column(name = "order_id")
    private Long orderId;

    @Column(name = "rating_score", nullable = false)
    private byte ratingScore;

    @Column(name = "rating_comment")
    private String ratingComment;

    @Column(name = "rating_created_at")
    private LocalDateTime ratingCreatedAt;
}
</file>

<file path="ratings-module/src/main/java/pe/edu/certus/ratingsmodule/repository/ports/driver/ForQueryingRating.java">
package pe.edu.certus.ratingsmodule.repository.ports.driver;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import pe.edu.certus.ratingsmodule.repository.entity.RatingEntity;

import java.util.List;

@Repository
public interface ForQueryingRating extends JpaRepository<RatingEntity, Long> {
}
</file>

<file path="ratings-module/src/main/java/pe/edu/certus/ratingsmodule/repository/ports/mapper/ForBridgingRating.java">
package pe.edu.certus.ratingsmodule.repository.ports.mapper;

import org.springframework.stereotype.Service;
import pe.edu.certus.ratingsmodule.logic.model.RatingModel;
import pe.edu.certus.ratingsmodule.repository.entity.RatingEntity;

@Service
public interface ForBridgingRating {

    RatingEntity toPersistence(RatingModel ratingModel);

    RatingModel fromPersistence(RatingEntity ratingEntity);

}
</file>

<file path="ratings-module/src/main/resources/application.properties">
spring.application.name=ratings-module
</file>

<file path="README.md">
# cm-backend
</file>

<file path="src/main/java/pe/edu/certus/CertUsBackendServiceApplication.java">
package pe.edu.certus;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class CertUsBackendServiceApplication {

	public static void main(String[] args) {
		SpringApplication.run(CertUsBackendServiceApplication.class, args);
	}

}
</file>

<file path="src/main/resources/application.properties">
spring.application.name=CertUs Backend Service
</file>

<file path="users-module/.gitattributes">
/mvnw text eol=lf
*.cmd text eol=crlf
</file>

<file path="users-module/.gitignore">
HELP.md
target/
!.mvn/wrapper/maven-wrapper.jar
!**/src/main/**/target/
!**/src/test/**/target/

### STS ###
.apt_generated
.classpath
.factorypath
.project
.settings
.springBeans
.sts4-cache

### IntelliJ IDEA ###
.idea
*.iws
*.iml
*.ipr

### NetBeans ###
/nbproject/private/
/nbbuild/
/dist/
/nbdist/
/.nb-gradle/
build/
!**/src/main/**/build/
!**/src/test/**/build/

### VS Code ###
.vscode/
</file>

<file path="users-module/.mvn/wrapper/maven-wrapper.properties">
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
wrapperVersion=3.3.2
distributionType=only-script
distributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.9.9/apache-maven-3.9.9-bin.zip
</file>

<file path="users-module/mvnw">
#!/bin/sh
# ----------------------------------------------------------------------------
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
# ----------------------------------------------------------------------------

# ----------------------------------------------------------------------------
# Apache Maven Wrapper startup batch script, version 3.3.2
#
# Optional ENV vars
# -----------------
#   JAVA_HOME - location of a JDK home dir, required when download maven via java source
#   MVNW_REPOURL - repo url base for downloading maven distribution
#   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
#   MVNW_VERBOSE - true: enable verbose log; debug: trace the mvnw script; others: silence the output
# ----------------------------------------------------------------------------

set -euf
[ "${MVNW_VERBOSE-}" != debug ] || set -x

# OS specific support.
native_path() { printf %s\\n "$1"; }
case "$(uname)" in
CYGWIN* | MINGW*)
  [ -z "${JAVA_HOME-}" ] || JAVA_HOME="$(cygpath --unix "$JAVA_HOME")"
  native_path() { cygpath --path --windows "$1"; }
  ;;
esac

# set JAVACMD and JAVACCMD
set_java_home() {
  # For Cygwin and MinGW, ensure paths are in Unix format before anything is touched
  if [ -n "${JAVA_HOME-}" ]; then
    if [ -x "$JAVA_HOME/jre/sh/java" ]; then
      # IBM's JDK on AIX uses strange locations for the executables
      JAVACMD="$JAVA_HOME/jre/sh/java"
      JAVACCMD="$JAVA_HOME/jre/sh/javac"
    else
      JAVACMD="$JAVA_HOME/bin/java"
      JAVACCMD="$JAVA_HOME/bin/javac"

      if [ ! -x "$JAVACMD" ] || [ ! -x "$JAVACCMD" ]; then
        echo "The JAVA_HOME environment variable is not defined correctly, so mvnw cannot run." >&2
        echo "JAVA_HOME is set to \"$JAVA_HOME\", but \"\$JAVA_HOME/bin/java\" or \"\$JAVA_HOME/bin/javac\" does not exist." >&2
        return 1
      fi
    fi
  else
    JAVACMD="$(
      'set' +e
      'unset' -f command 2>/dev/null
      'command' -v java
    )" || :
    JAVACCMD="$(
      'set' +e
      'unset' -f command 2>/dev/null
      'command' -v javac
    )" || :

    if [ ! -x "${JAVACMD-}" ] || [ ! -x "${JAVACCMD-}" ]; then
      echo "The java/javac command does not exist in PATH nor is JAVA_HOME set, so mvnw cannot run." >&2
      return 1
    fi
  fi
}

# hash string like Java String::hashCode
hash_string() {
  str="${1:-}" h=0
  while [ -n "$str" ]; do
    char="${str%"${str#?}"}"
    h=$(((h * 31 + $(LC_CTYPE=C printf %d "'$char")) % 4294967296))
    str="${str#?}"
  done
  printf %x\\n $h
}

verbose() { :; }
[ "${MVNW_VERBOSE-}" != true ] || verbose() { printf %s\\n "${1-}"; }

die() {
  printf %s\\n "$1" >&2
  exit 1
}

trim() {
  # MWRAPPER-139:
  #   Trims trailing and leading whitespace, carriage returns, tabs, and linefeeds.
  #   Needed for removing poorly interpreted newline sequences when running in more
  #   exotic environments such as mingw bash on Windows.
  printf "%s" "${1}" | tr -d '[:space:]'
}

# parse distributionUrl and optional distributionSha256Sum, requires .mvn/wrapper/maven-wrapper.properties
while IFS="=" read -r key value; do
  case "${key-}" in
  distributionUrl) distributionUrl=$(trim "${value-}") ;;
  distributionSha256Sum) distributionSha256Sum=$(trim "${value-}") ;;
  esac
done <"${0%/*}/.mvn/wrapper/maven-wrapper.properties"
[ -n "${distributionUrl-}" ] || die "cannot read distributionUrl property in ${0%/*}/.mvn/wrapper/maven-wrapper.properties"

case "${distributionUrl##*/}" in
maven-mvnd-*bin.*)
  MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/
  case "${PROCESSOR_ARCHITECTURE-}${PROCESSOR_ARCHITEW6432-}:$(uname -a)" in
  *AMD64:CYGWIN* | *AMD64:MINGW*) distributionPlatform=windows-amd64 ;;
  :Darwin*x86_64) distributionPlatform=darwin-amd64 ;;
  :Darwin*arm64) distributionPlatform=darwin-aarch64 ;;
  :Linux*x86_64*) distributionPlatform=linux-amd64 ;;
  *)
    echo "Cannot detect native platform for mvnd on $(uname)-$(uname -m), use pure java version" >&2
    distributionPlatform=linux-amd64
    ;;
  esac
  distributionUrl="${distributionUrl%-bin.*}-$distributionPlatform.zip"
  ;;
maven-mvnd-*) MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/ ;;
*) MVN_CMD="mvn${0##*/mvnw}" _MVNW_REPO_PATTERN=/org/apache/maven/ ;;
esac

# apply MVNW_REPOURL and calculate MAVEN_HOME
# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
[ -z "${MVNW_REPOURL-}" ] || distributionUrl="$MVNW_REPOURL$_MVNW_REPO_PATTERN${distributionUrl#*"$_MVNW_REPO_PATTERN"}"
distributionUrlName="${distributionUrl##*/}"
distributionUrlNameMain="${distributionUrlName%.*}"
distributionUrlNameMain="${distributionUrlNameMain%-bin}"
MAVEN_USER_HOME="${MAVEN_USER_HOME:-${HOME}/.m2}"
MAVEN_HOME="${MAVEN_USER_HOME}/wrapper/dists/${distributionUrlNameMain-}/$(hash_string "$distributionUrl")"

exec_maven() {
  unset MVNW_VERBOSE MVNW_USERNAME MVNW_PASSWORD MVNW_REPOURL || :
  exec "$MAVEN_HOME/bin/$MVN_CMD" "$@" || die "cannot exec $MAVEN_HOME/bin/$MVN_CMD"
}

if [ -d "$MAVEN_HOME" ]; then
  verbose "found existing MAVEN_HOME at $MAVEN_HOME"
  exec_maven "$@"
fi

case "${distributionUrl-}" in
*?-bin.zip | *?maven-mvnd-?*-?*.zip) ;;
*) die "distributionUrl is not valid, must match *-bin.zip or maven-mvnd-*.zip, but found '${distributionUrl-}'" ;;
esac

# prepare tmp dir
if TMP_DOWNLOAD_DIR="$(mktemp -d)" && [ -d "$TMP_DOWNLOAD_DIR" ]; then
  clean() { rm -rf -- "$TMP_DOWNLOAD_DIR"; }
  trap clean HUP INT TERM EXIT
else
  die "cannot create temp dir"
fi

mkdir -p -- "${MAVEN_HOME%/*}"

# Download and Install Apache Maven
verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."
verbose "Downloading from: $distributionUrl"
verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"

# select .zip or .tar.gz
if ! command -v unzip >/dev/null; then
  distributionUrl="${distributionUrl%.zip}.tar.gz"
  distributionUrlName="${distributionUrl##*/}"
fi

# verbose opt
__MVNW_QUIET_WGET=--quiet __MVNW_QUIET_CURL=--silent __MVNW_QUIET_UNZIP=-q __MVNW_QUIET_TAR=''
[ "${MVNW_VERBOSE-}" != true ] || __MVNW_QUIET_WGET='' __MVNW_QUIET_CURL='' __MVNW_QUIET_UNZIP='' __MVNW_QUIET_TAR=v

# normalize http auth
case "${MVNW_PASSWORD:+has-password}" in
'') MVNW_USERNAME='' MVNW_PASSWORD='' ;;
has-password) [ -n "${MVNW_USERNAME-}" ] || MVNW_USERNAME='' MVNW_PASSWORD='' ;;
esac

if [ -z "${MVNW_USERNAME-}" ] && command -v wget >/dev/null; then
  verbose "Found wget ... using wget"
  wget ${__MVNW_QUIET_WGET:+"$__MVNW_QUIET_WGET"} "$distributionUrl" -O "$TMP_DOWNLOAD_DIR/$distributionUrlName" || die "wget: Failed to fetch $distributionUrl"
elif [ -z "${MVNW_USERNAME-}" ] && command -v curl >/dev/null; then
  verbose "Found curl ... using curl"
  curl ${__MVNW_QUIET_CURL:+"$__MVNW_QUIET_CURL"} -f -L -o "$TMP_DOWNLOAD_DIR/$distributionUrlName" "$distributionUrl" || die "curl: Failed to fetch $distributionUrl"
elif set_java_home; then
  verbose "Falling back to use Java to download"
  javaSource="$TMP_DOWNLOAD_DIR/Downloader.java"
  targetZip="$TMP_DOWNLOAD_DIR/$distributionUrlName"
  cat >"$javaSource" <<-END
	public class Downloader extends java.net.Authenticator
	{
	  protected java.net.PasswordAuthentication getPasswordAuthentication()
	  {
	    return new java.net.PasswordAuthentication( System.getenv( "MVNW_USERNAME" ), System.getenv( "MVNW_PASSWORD" ).toCharArray() );
	  }
	  public static void main( String[] args ) throws Exception
	  {
	    setDefault( new Downloader() );
	    java.nio.file.Files.copy( java.net.URI.create( args[0] ).toURL().openStream(), java.nio.file.Paths.get( args[1] ).toAbsolutePath().normalize() );
	  }
	}
	END
  # For Cygwin/MinGW, switch paths to Windows format before running javac and java
  verbose " - Compiling Downloader.java ..."
  "$(native_path "$JAVACCMD")" "$(native_path "$javaSource")" || die "Failed to compile Downloader.java"
  verbose " - Running Downloader.java ..."
  "$(native_path "$JAVACMD")" -cp "$(native_path "$TMP_DOWNLOAD_DIR")" Downloader "$distributionUrl" "$(native_path "$targetZip")"
fi

# If specified, validate the SHA-256 sum of the Maven distribution zip file
if [ -n "${distributionSha256Sum-}" ]; then
  distributionSha256Result=false
  if [ "$MVN_CMD" = mvnd.sh ]; then
    echo "Checksum validation is not supported for maven-mvnd." >&2
    echo "Please disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2
    exit 1
  elif command -v sha256sum >/dev/null; then
    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | sha256sum -c >/dev/null 2>&1; then
      distributionSha256Result=true
    fi
  elif command -v shasum >/dev/null; then
    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | shasum -a 256 -c >/dev/null 2>&1; then
      distributionSha256Result=true
    fi
  else
    echo "Checksum validation was requested but neither 'sha256sum' or 'shasum' are available." >&2
    echo "Please install either command, or disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2
    exit 1
  fi
  if [ $distributionSha256Result = false ]; then
    echo "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised." >&2
    echo "If you updated your Maven version, you need to update the specified distributionSha256Sum property." >&2
    exit 1
  fi
fi

# unzip and move
if command -v unzip >/dev/null; then
  unzip ${__MVNW_QUIET_UNZIP:+"$__MVNW_QUIET_UNZIP"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -d "$TMP_DOWNLOAD_DIR" || die "failed to unzip"
else
  tar xzf${__MVNW_QUIET_TAR:+"$__MVNW_QUIET_TAR"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -C "$TMP_DOWNLOAD_DIR" || die "failed to untar"
fi
printf %s\\n "$distributionUrl" >"$TMP_DOWNLOAD_DIR/$distributionUrlNameMain/mvnw.url"
mv -- "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" "$MAVEN_HOME" || [ -d "$MAVEN_HOME" ] || die "fail to move MAVEN_HOME"

clean || :
exec_maven "$@"
</file>

<file path="users-module/mvnw.cmd">
<# : batch portion
@REM ----------------------------------------------------------------------------
@REM Licensed to the Apache Software Foundation (ASF) under one
@REM or more contributor license agreements.  See the NOTICE file
@REM distributed with this work for additional information
@REM regarding copyright ownership.  The ASF licenses this file
@REM to you under the Apache License, Version 2.0 (the
@REM "License"); you may not use this file except in compliance
@REM with the License.  You may obtain a copy of the License at
@REM
@REM    http://www.apache.org/licenses/LICENSE-2.0
@REM
@REM Unless required by applicable law or agreed to in writing,
@REM software distributed under the License is distributed on an
@REM "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
@REM KIND, either express or implied.  See the License for the
@REM specific language governing permissions and limitations
@REM under the License.
@REM ----------------------------------------------------------------------------

@REM ----------------------------------------------------------------------------
@REM Apache Maven Wrapper startup batch script, version 3.3.2
@REM
@REM Optional ENV vars
@REM   MVNW_REPOURL - repo url base for downloading maven distribution
@REM   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
@REM   MVNW_VERBOSE - true: enable verbose log; others: silence the output
@REM ----------------------------------------------------------------------------

@IF "%__MVNW_ARG0_NAME__%"=="" (SET __MVNW_ARG0_NAME__=%~nx0)
@SET __MVNW_CMD__=
@SET __MVNW_ERROR__=
@SET __MVNW_PSMODULEP_SAVE=%PSModulePath%
@SET PSModulePath=
@FOR /F "usebackq tokens=1* delims==" %%A IN (`powershell -noprofile "& {$scriptDir='%~dp0'; $script='%__MVNW_ARG0_NAME__%'; icm -ScriptBlock ([Scriptblock]::Create((Get-Content -Raw '%~f0'))) -NoNewScope}"`) DO @(
  IF "%%A"=="MVN_CMD" (set __MVNW_CMD__=%%B) ELSE IF "%%B"=="" (echo %%A) ELSE (echo %%A=%%B)
)
@SET PSModulePath=%__MVNW_PSMODULEP_SAVE%
@SET __MVNW_PSMODULEP_SAVE=
@SET __MVNW_ARG0_NAME__=
@SET MVNW_USERNAME=
@SET MVNW_PASSWORD=
@IF NOT "%__MVNW_CMD__%"=="" (%__MVNW_CMD__% %*)
@echo Cannot start maven from wrapper >&2 && exit /b 1
@GOTO :EOF
: end batch / begin powershell #>

$ErrorActionPreference = "Stop"
if ($env:MVNW_VERBOSE -eq "true") {
  $VerbosePreference = "Continue"
}

# calculate distributionUrl, requires .mvn/wrapper/maven-wrapper.properties
$distributionUrl = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionUrl
if (!$distributionUrl) {
  Write-Error "cannot read distributionUrl property in $scriptDir/.mvn/wrapper/maven-wrapper.properties"
}

switch -wildcard -casesensitive ( $($distributionUrl -replace '^.*/','') ) {
  "maven-mvnd-*" {
    $USE_MVND = $true
    $distributionUrl = $distributionUrl -replace '-bin\.[^.]*$',"-windows-amd64.zip"
    $MVN_CMD = "mvnd.cmd"
    break
  }
  default {
    $USE_MVND = $false
    $MVN_CMD = $script -replace '^mvnw','mvn'
    break
  }
}

# apply MVNW_REPOURL and calculate MAVEN_HOME
# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
if ($env:MVNW_REPOURL) {
  $MVNW_REPO_PATTERN = if ($USE_MVND) { "/org/apache/maven/" } else { "/maven/mvnd/" }
  $distributionUrl = "$env:MVNW_REPOURL$MVNW_REPO_PATTERN$($distributionUrl -replace '^.*'+$MVNW_REPO_PATTERN,'')"
}
$distributionUrlName = $distributionUrl -replace '^.*/',''
$distributionUrlNameMain = $distributionUrlName -replace '\.[^.]*$','' -replace '-bin$',''
$MAVEN_HOME_PARENT = "$HOME/.m2/wrapper/dists/$distributionUrlNameMain"
if ($env:MAVEN_USER_HOME) {
  $MAVEN_HOME_PARENT = "$env:MAVEN_USER_HOME/wrapper/dists/$distributionUrlNameMain"
}
$MAVEN_HOME_NAME = ([System.Security.Cryptography.MD5]::Create().ComputeHash([byte[]][char[]]$distributionUrl) | ForEach-Object {$_.ToString("x2")}) -join ''
$MAVEN_HOME = "$MAVEN_HOME_PARENT/$MAVEN_HOME_NAME"

if (Test-Path -Path "$MAVEN_HOME" -PathType Container) {
  Write-Verbose "found existing MAVEN_HOME at $MAVEN_HOME"
  Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"
  exit $?
}

if (! $distributionUrlNameMain -or ($distributionUrlName -eq $distributionUrlNameMain)) {
  Write-Error "distributionUrl is not valid, must end with *-bin.zip, but found $distributionUrl"
}

# prepare tmp dir
$TMP_DOWNLOAD_DIR_HOLDER = New-TemporaryFile
$TMP_DOWNLOAD_DIR = New-Item -Itemtype Directory -Path "$TMP_DOWNLOAD_DIR_HOLDER.dir"
$TMP_DOWNLOAD_DIR_HOLDER.Delete() | Out-Null
trap {
  if ($TMP_DOWNLOAD_DIR.Exists) {
    try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
    catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }
  }
}

New-Item -Itemtype Directory -Path "$MAVEN_HOME_PARENT" -Force | Out-Null

# Download and Install Apache Maven
Write-Verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."
Write-Verbose "Downloading from: $distributionUrl"
Write-Verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"

$webclient = New-Object System.Net.WebClient
if ($env:MVNW_USERNAME -and $env:MVNW_PASSWORD) {
  $webclient.Credentials = New-Object System.Net.NetworkCredential($env:MVNW_USERNAME, $env:MVNW_PASSWORD)
}
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
$webclient.DownloadFile($distributionUrl, "$TMP_DOWNLOAD_DIR/$distributionUrlName") | Out-Null

# If specified, validate the SHA-256 sum of the Maven distribution zip file
$distributionSha256Sum = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionSha256Sum
if ($distributionSha256Sum) {
  if ($USE_MVND) {
    Write-Error "Checksum validation is not supported for maven-mvnd. `nPlease disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties."
  }
  Import-Module $PSHOME\Modules\Microsoft.PowerShell.Utility -Function Get-FileHash
  if ((Get-FileHash "$TMP_DOWNLOAD_DIR/$distributionUrlName" -Algorithm SHA256).Hash.ToLower() -ne $distributionSha256Sum) {
    Write-Error "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised. If you updated your Maven version, you need to update the specified distributionSha256Sum property."
  }
}

# unzip and move
Expand-Archive "$TMP_DOWNLOAD_DIR/$distributionUrlName" -DestinationPath "$TMP_DOWNLOAD_DIR" | Out-Null
Rename-Item -Path "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" -NewName $MAVEN_HOME_NAME | Out-Null
try {
  Move-Item -Path "$TMP_DOWNLOAD_DIR/$MAVEN_HOME_NAME" -Destination $MAVEN_HOME_PARENT | Out-Null
} catch {
  if (! (Test-Path -Path "$MAVEN_HOME" -PathType Container)) {
    Write-Error "fail to move MAVEN_HOME"
  }
} finally {
  try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
  catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }
}

Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"
</file>

<file path="users-module/src/main/java/pe/edu/certus/usersmodule/configuration/annotations/UserComponentScanConfig.java">
package pe.edu.certus.usersmodule.configuration.annotations;

import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;

@Configuration
@ComponentScan(basePackages = "pe.edu.certus.usersmodule")
public class UserComponentScanConfig {
}
</file>

<file path="users-module/src/main/java/pe/edu/certus/usersmodule/configuration/annotations/UserEntityScanConfig.java">
package pe.edu.certus.usersmodule.configuration.annotations;

import org.springframework.boot.autoconfigure.domain.EntityScan;
import org.springframework.context.annotation.Configuration;

@Configuration
@EntityScan(basePackages = "pe.edu.certus.usersmodule.repository.entity")
public class UserEntityScanConfig {
}
</file>

<file path="users-module/src/main/java/pe/edu/certus/usersmodule/configuration/annotations/UserPersistenceConfig.java">
package pe.edu.certus.usersmodule.configuration.annotations;

import org.springframework.context.annotation.Configuration;
import org.springframework.data.jpa.repository.config.EnableJpaRepositories;

@Configuration
@EnableJpaRepositories(basePackages = "pe.edu.certus.usersmodule.repository")
public class UserPersistenceConfig {
}
</file>

<file path="users-module/src/main/java/pe/edu/certus/usersmodule/configuration/mappers/UserMapperConfig.java">
package pe.edu.certus.usersmodule.configuration.mappers;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import pe.edu.certus.usersmodule.logic.adapters.mapper.UserMapper;

@Configuration
public class UserMapperConfig {
    @Bean
    public UserMapper userMapper() {
        return new UserMapper();
    }
}
</file>

<file path="users-module/src/main/java/pe/edu/certus/usersmodule/configuration/mappers/UserMapperPersistenceConfig.java">
package pe.edu.certus.usersmodule.configuration.mappers;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import pe.edu.certus.usersmodule.repository.adapters.mapper.UserPersistenceMapper;

@Configuration
public class UserMapperPersistenceConfig {
    @Bean
    public UserPersistenceMapper userPersistenceMapper() {
        return new UserPersistenceMapper();
    }
}
</file>

<file path="users-module/src/main/java/pe/edu/certus/usersmodule/logic/adapters/driven/UserManager.java">
package pe.edu.certus.usersmodule.logic.adapters.driven;

import org.springframework.stereotype.Service;
import pe.edu.certus.usersmodule.logic.model.UserModel;
import pe.edu.certus.usersmodule.logic.ports.driven.ForManagingUser;
import pe.edu.certus.usersmodule.logic.ports.driver.ForUser;

import java.util.List;

@Service
public class UserManager implements ForUser< UserModel, Long > {

    private final ForManagingUser forManagingUser;

    public UserManager( ForManagingUser forManagingUser ) {
        this.forManagingUser = forManagingUser;
    }

    @Override
    public void createUser( UserModel userModel ) {
        try {
            forManagingUser.satisfyCreateUser( userModel );
            System.out.println( "THE USER HAS BEEN CREATED SUCCESSFULLY" );
        } catch ( IllegalArgumentException e ) {
            System.out.println( "ERROR CREATING THE USER: " + e.getMessage() );
            e.printStackTrace();
        }
    }

    @Override
    public UserModel findUserById( Long id ) {
        try {
            if ( id == null ) {
                throw new IllegalArgumentException( "ID CANNOT BE NULL" );
            }

            UserModel userModel = forManagingUser.satisfyFindUserById( id );
            System.out.println( "THE USER HAS BEEN FOUND SUCCESSFULLY" );

            if ( userModel == null ) {
                throw new IllegalArgumentException( "USER NOT FOUND" );
            }

            return userModel;
        } catch ( Exception e ) {
            throw new RuntimeException( "FAILED TO FIND USER MODEL", e );
        }
    }

    @Override
    public UserModel updateUser( UserModel userModel ) {
        try {
            if ( userModel == null ) {
                throw new IllegalArgumentException( "USER MODEL CANNOT BE NULL" );
            }

            UserModel updatedUserModel = forManagingUser.satisfyUpdateUser( userModel );
            System.out.println( "USER MODEL UPDATED SUCCESSFULLY" );

            return updatedUserModel;
        } catch ( Exception e ) {
            throw new RuntimeException( "FAILED TO UPDATE USER MODEL", e );
        }
    }

    @Override
    public void deleteUser( Long id ) {
        try {
            if ( id == null ) {
                throw new IllegalArgumentException( "ID CANNOT BE NULL" );
            }

            forManagingUser.satisfyDeleteUserById( id );
            System.out.println( "USER MODEL DELETED SUCCESSFULLY" );

        } catch ( Exception e ) {
            throw new RuntimeException( "FAILED TO DELETE USER MODEL", e );
        }
    }

    @Override
    public List< UserModel > findAllUsers( ) {
        try {
            List< UserModel > userModels = forManagingUser.satisfyFindAllUser( );
            System.out.println( "ALL USERS HAVE BEEN FOUND SUCCESSFULLY" );
            return userModels;
        } catch ( Exception e ) {
            throw new RuntimeException( "FAILED TO FIND ALL USER MODELS", e );
        }
    }
}
</file>

<file path="users-module/src/main/java/pe/edu/certus/usersmodule/logic/adapters/driver/UserAdapter.java">
package pe.edu.certus.usersmodule.logic.adapters.driver;

import jakarta.persistence.EntityNotFoundException;
import jakarta.validation.Valid;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import pe.edu.certus.usersmodule.logic.model.UserModel;
import pe.edu.certus.usersmodule.logic.ports.driver.ForUser;
import pe.edu.certus.usersmodule.logic.ports.mapper.ForMappingUser;

import java.util.List;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/users")
public class UserAdapter {

    private final ForUser forUser;
    private final ForMappingUser forMappingUser;

    public UserAdapter(ForUser forUser, ForMappingUser forMappingUser) {
        this.forUser = forUser;
        this.forMappingUser = forMappingUser;
    }

    @PostMapping("/create")
    public ResponseEntity<UserWebModel> createUser( @Valid @RequestBody UserWebModel userWebModel) {
        try {
            UserModel objectFromWeb = forMappingUser.fromWeb(userWebModel);
            forUser.createUser(objectFromWeb);
            return ResponseEntity.ok().build();
        } catch (IllegalArgumentException e) {
            throw new RuntimeException("ERROR CREATING USER", e);
        }
    }

    @GetMapping("/{id}")
    public ResponseEntity<UserWebModel> findUserById(@PathVariable Long id) {
        try {
            UserModel userModel = (UserModel) forUser.findUserById(id);
            UserWebModel response = forMappingUser.toWeb(userModel);
            return ResponseEntity.ok(response);
        } catch ( EntityNotFoundException e) {
            return ResponseEntity.notFound().build();
        } catch (IllegalArgumentException e) {
            return ResponseEntity.badRequest().build();
        }
    }

    @PutMapping("/update")
    public ResponseEntity<UserWebModel> updateUser(@Valid @RequestBody UserWebModel userWebModel) {
        try {
            UserModel objectFromWeb = forMappingUser.fromWeb(userWebModel);
            UserModel updatedUser = (UserModel) forUser.updateUser(objectFromWeb);
            UserWebModel response = forMappingUser.toWeb(updatedUser);
            return ResponseEntity.ok(response);
        } catch (EntityNotFoundException e) {
            return ResponseEntity.notFound().build();
        } catch (IllegalArgumentException e) {
            return ResponseEntity.badRequest().build();
        }
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteUserById(@PathVariable Long id) {
        try {
            forUser.deleteUser(id);
            return ResponseEntity.ok().build();
        } catch (EntityNotFoundException e) {
            return ResponseEntity.notFound().build();
        } catch (IllegalArgumentException e) {
            return ResponseEntity.badRequest().build();
        }
    }

    @GetMapping
    public ResponseEntity< List<UserWebModel> > findAllUsers() {
        try {
            List<UserModel> userModels = forUser.findAllUsers();
            List<UserWebModel> response = userModels.stream()
                    .map(forMappingUser::toWeb)
                    .collect( Collectors.toList());
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            throw new RuntimeException("ERROR FINDING ALL USERS", e);
        }
    }
}
</file>

<file path="users-module/src/main/java/pe/edu/certus/usersmodule/logic/adapters/driver/UserWebModel.java">
package pe.edu.certus.usersmodule.logic.adapters.driver;

import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Pattern;
import jakarta.validation.constraints.Size;
import lombok.Builder;

import java.time.LocalDateTime;

@Builder
public record UserWebModel(
        Long userId,
        Long idRole,

        @NotBlank(message = "El correo electrónico no puede estar vacío")
        @Pattern(regexp = "^[0-9]{8}@certus\\.edu\\.pe$",

                message = "El correo electrónico debe ser el DNI de 8 dígitos seguido de @certus.edu.pe")
        String userEmail,

        @NotBlank(message = "La contraseña no puede estar vacía")
        @Size(min = 8, max = 10, message = "La contraseña debe tener entre 8 y 10 caracteres")
        @Pattern(regexp = "^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^&+=]).*$",
                message = "La contraseña debe contener al menos un número, una letra minúscula, una mayúscula y un carácter especial")
        String userPassword,

        LocalDateTime userCreatedAt,
        LocalDateTime userUpdatedAt,
        @NotNull(message = "El estado del usuario no puede ser nulo")

        Boolean userStatus
) {

    public UserWebModel {
        userCreatedAt = userCreatedAt != null ? userCreatedAt : LocalDateTime.now();
        userUpdatedAt = userUpdatedAt != null ? userUpdatedAt : LocalDateTime.now();

    }
}
</file>

<file path="users-module/src/main/java/pe/edu/certus/usersmodule/logic/adapters/mapper/UserMapper.java">
package pe.edu.certus.usersmodule.logic.adapters.mapper;

import pe.edu.certus.usersmodule.logic.adapters.driver.UserWebModel;
import pe.edu.certus.usersmodule.logic.model.UserModel;
import pe.edu.certus.usersmodule.logic.ports.mapper.ForMappingUser;

public class UserMapper implements ForMappingUser {

    @Override
    public UserModel fromWeb( UserWebModel userWebModel) {
        return UserModel.builder()
                .userId(userWebModel.userId())
                .idRole(userWebModel.idRole())
                .userEmail(userWebModel.userEmail())
                .userPassword(userWebModel.userPassword())
                .userCreatedAt(userWebModel.userCreatedAt())
                .userUpdatedAt(userWebModel.userUpdatedAt())
                .userStatus(userWebModel.userStatus())
                .build();
    }

    @Override
    public UserWebModel toWeb( UserModel userModel) {
        return new UserWebModel(
                userModel.getUserId(),
                userModel.getIdRole(),
                userModel.getUserEmail(),
                userModel.getUserPassword(),
                userModel.getUserCreatedAt(),
                userModel.getUserUpdatedAt(),
                userModel.getUserStatus()
        );
    }
}
</file>

<file path="users-module/src/main/java/pe/edu/certus/usersmodule/logic/model/UserModel.java">
package pe.edu.certus.usersmodule.logic.model;

import lombok.Builder;
import lombok.Getter;
import lombok.Setter;

import java.time.LocalDateTime;

@Getter
@Setter
@Builder
public class UserModel {
    private Long userId;
    private Long idRole;
    private String userEmail;
    private String userPassword;
    private LocalDateTime userCreatedAt;
    private LocalDateTime userUpdatedAt;
    private Boolean userStatus;
}
</file>

<file path="users-module/src/main/java/pe/edu/certus/usersmodule/logic/ports/driven/ForManagingUser.java">
package pe.edu.certus.usersmodule.logic.ports.driven;

import pe.edu.certus.usersmodule.logic.model.UserModel;

import java.util.List;

public interface ForManagingUser {
    void satisfyCreateUser( UserModel userModel);
    UserModel satisfyFindUserById(Long id);
    List<UserModel> satisfyFindAllUser();
    UserModel satisfyUpdateUser(UserModel userModel);
    void satisfyDeleteUserById(Long id);
}
</file>

<file path="users-module/src/main/java/pe/edu/certus/usersmodule/logic/ports/driver/ForUser.java">
package pe.edu.certus.usersmodule.logic.ports.driver;

import java.util.List;

public interface ForUser < UserModel, Long>  {
    void createUser(UserModel userModel);
    UserModel findUserById(Long id);
    List<UserModel> findAllUsers();
    UserModel updateUser(UserModel userModel);
    void deleteUser(Long id);
}
</file>

<file path="users-module/src/main/java/pe/edu/certus/usersmodule/logic/ports/mapper/ForMappingUser.java">
package pe.edu.certus.usersmodule.logic.ports.mapper;

import pe.edu.certus.usersmodule.logic.adapters.driver.UserWebModel;
import pe.edu.certus.usersmodule.logic.model.UserModel;

public interface ForMappingUser {
    UserModel fromWeb( UserWebModel userWebModel);
    UserWebModel toWeb( UserModel userModel);
}
</file>

<file path="users-module/src/main/java/pe/edu/certus/usersmodule/repository/adapters/driver/UserQuerierProxy.java">
package pe.edu.certus.usersmodule.repository.adapters.driver;

import jakarta.persistence.EntityNotFoundException;
import org.springframework.stereotype.Service;
import pe.edu.certus.usersmodule.logic.model.UserModel;
import pe.edu.certus.usersmodule.logic.ports.driven.ForManagingUser;
import pe.edu.certus.usersmodule.repository.entity.UserEntity;
import pe.edu.certus.usersmodule.repository.ports.driver.ForQueryingUser;
import pe.edu.certus.usersmodule.repository.ports.mapper.ForBridgingUser;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
public class UserQuerierProxy implements ForManagingUser {
    private final ForQueryingUser forQueryingUser;
    private final ForBridgingUser forBridgingUser;

    public UserQuerierProxy ( ForQueryingUser forQueryingUser, ForBridgingUser forBridgingUser ) {
        this.forQueryingUser = forQueryingUser;
        this.forBridgingUser = forBridgingUser;
    }

    @Override
    public void satisfyCreateUser( UserModel userModel ){
        UserEntity objectFromDomain = forBridgingUser.toPersistence(userModel);
        forQueryingUser.save(objectFromDomain);
        System.out.print( "USER ENTITY HAS BEEN CREATED SUCCESSFULLY!" );
    }

    @Override
    public UserModel satisfyFindUserById( Long id) {
        return forQueryingUser.findById(id)
                .map(forBridgingUser::fromPersistence)
                .orElseThrow(() -> new EntityNotFoundException(
                        "USER ENTITY NOT FOUND WITH ID: " + id));
    }
    @Override
    public UserModel satisfyUpdateUser(UserModel userModel) {
        UserEntity objectFromDomain = forBridgingUser.toPersistence(userModel);

        Optional<UserEntity> existingUser = forQueryingUser.findById(objectFromDomain.getUserId());
        if (existingUser.isEmpty()) {
            throw new EntityNotFoundException("USER NOT FOUND WITH ID: " + objectFromDomain.getUserId());
        }

        UserEntity updatedEntity = forQueryingUser.save(objectFromDomain);
        System.out.println("USER ENTITY HAS BEEN UPDATED SUCCESSFULLY");

        return forBridgingUser.fromPersistence(updatedEntity);
    }

    @Override
    public void satisfyDeleteUserById(Long id) {
        Optional<UserEntity> existingUser = forQueryingUser.findById(id);
        if (existingUser.isEmpty()) {
            throw new EntityNotFoundException("USER NOT FOUND WITH ID: " + id);
        }

        forQueryingUser.deleteById(id);
        System.out.println("USER ID: " + id + " HAS BEEN DELETED");
    }

    @Override
    public List<UserModel> satisfyFindAllUser() {
        List<UserEntity> userEntities = forQueryingUser.findAll();
        System.out.println("ALL USER ENTITIES HAVE BEEN FOUND SUCCESSFULLY");

        return userEntities.stream()
                .map(forBridgingUser::fromPersistence)
                .collect( Collectors.toList());
    }
}
</file>

<file path="users-module/src/main/java/pe/edu/certus/usersmodule/repository/adapters/mapper/UserPersistenceMapper.java">
package pe.edu.certus.usersmodule.repository.adapters.mapper;

import pe.edu.certus.usersmodule.logic.model.UserModel;
import pe.edu.certus.usersmodule.repository.entity.UserEntity;
import pe.edu.certus.usersmodule.repository.ports.mapper.ForBridgingUser;

public class UserPersistenceMapper implements ForBridgingUser {

    @Override
    public UserEntity toPersistence(UserModel userModel) {
        return UserEntity.builder()
                .userId(userModel.getUserId())
                .idRole(userModel.getIdRole())
                .userEmail(userModel.getUserEmail())
                .userPassword(userModel.getUserPassword())
                .userCreatedAt(userModel.getUserCreatedAt())
                .userUpdatedAt(userModel.getUserUpdatedAt())
                .userStatus(userModel.getUserStatus())
                .build();
    }

    @Override
    public UserModel fromPersistence( UserEntity userEntity) {
        return UserModel.builder()
                .userId(userEntity.getUserId())
                .idRole(userEntity.getIdRole())
                .userEmail(userEntity.getUserEmail())
                .userPassword(userEntity.getUserPassword())
                .userCreatedAt(userEntity.getUserCreatedAt())
                .userUpdatedAt(userEntity.getUserUpdatedAt())
                .userStatus(userEntity.getUserStatus())
                .build();
    }
}
</file>

<file path="users-module/src/main/java/pe/edu/certus/usersmodule/repository/entity/UserEntity.java">
package pe.edu.certus.usersmodule.repository.entity;

import jakarta.persistence.*;
import lombok.*;

import java.time.LocalDateTime;

@Entity
@Table
@Getter
@Setter
@Builder
@AllArgsConstructor
@NoArgsConstructor
public class UserEntity {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column( name = "user_id" )
    private Long userId;

    @Transient
    @Column( name = "id_role" )
    private Long idRole;

    @Column( name = "user_email" )
    private String userEmail;

    @Column( name = "user_password" )
    private String userPassword;

    @Column( name = "user_created_at" )
    private LocalDateTime userCreatedAt;

    @Column( name = "user_updated_at" )
    private LocalDateTime userUpdatedAt;

    @Column( name = "user_status" )
    private Boolean userStatus;
}
</file>

<file path="users-module/src/main/java/pe/edu/certus/usersmodule/repository/ports/driver/ForQueryingUser.java">
package pe.edu.certus.usersmodule.repository.ports.driver;

import org.springframework.data.jpa.repository.JpaRepository;
import pe.edu.certus.usersmodule.repository.entity.UserEntity;

public interface ForQueryingUser extends JpaRepository< UserEntity, Long> {
}
</file>

<file path="users-module/src/main/java/pe/edu/certus/usersmodule/repository/ports/mapper/ForBridgingUser.java">
package pe.edu.certus.usersmodule.repository.ports.mapper;

import pe.edu.certus.usersmodule.logic.model.UserModel;
import pe.edu.certus.usersmodule.repository.entity.UserEntity;

public interface ForBridgingUser {
    UserModel fromPersistence( UserEntity userEntity);
    UserEntity toPersistence( UserModel userModel);
}
</file>

<file path="users-module/src/main/java/pe/edu/certus/usersmodule/UsersModuleApplication.java">
package pe.edu.certus.usersmodule;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class UsersModuleApplication {

    public static void main( String[] args ) {
        SpringApplication.run( UsersModuleApplication.class, args );
    }

}
</file>

<file path="users-module/src/main/resources/application.properties">
spring.application.name=users-module
</file>

<file path="works-module/.gitattributes">
/mvnw text eol=lf
*.cmd text eol=crlf
</file>

<file path="works-module/.gitignore">
HELP.md
target/
!.mvn/wrapper/maven-wrapper.jar
!**/src/main/**/target/
!**/src/test/**/target/

### STS ###
.apt_generated
.classpath
.factorypath
.project
.settings
.springBeans
.sts4-cache

### IntelliJ IDEA ###
.idea
*.iws
*.iml
*.ipr

### NetBeans ###
/nbproject/private/
/nbbuild/
/dist/
/nbdist/
/.nb-gradle/
build/
!**/src/main/**/build/
!**/src/test/**/build/

### VS Code ###
.vscode/
</file>

<file path="works-module/.mvn/wrapper/maven-wrapper.properties">
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
wrapperVersion=3.3.2
distributionType=only-script
distributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.9.9/apache-maven-3.9.9-bin.zip
</file>

<file path="works-module/mvnw">
#!/bin/sh
# ----------------------------------------------------------------------------
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
# ----------------------------------------------------------------------------

# ----------------------------------------------------------------------------
# Apache Maven Wrapper startup batch script, version 3.3.2
#
# Optional ENV vars
# -----------------
#   JAVA_HOME - location of a JDK home dir, required when download maven via java source
#   MVNW_REPOURL - repo url base for downloading maven distribution
#   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
#   MVNW_VERBOSE - true: enable verbose log; debug: trace the mvnw script; others: silence the output
# ----------------------------------------------------------------------------

set -euf
[ "${MVNW_VERBOSE-}" != debug ] || set -x

# OS specific support.
native_path() { printf %s\\n "$1"; }
case "$(uname)" in
CYGWIN* | MINGW*)
  [ -z "${JAVA_HOME-}" ] || JAVA_HOME="$(cygpath --unix "$JAVA_HOME")"
  native_path() { cygpath --path --windows "$1"; }
  ;;
esac

# set JAVACMD and JAVACCMD
set_java_home() {
  # For Cygwin and MinGW, ensure paths are in Unix format before anything is touched
  if [ -n "${JAVA_HOME-}" ]; then
    if [ -x "$JAVA_HOME/jre/sh/java" ]; then
      # IBM's JDK on AIX uses strange locations for the executables
      JAVACMD="$JAVA_HOME/jre/sh/java"
      JAVACCMD="$JAVA_HOME/jre/sh/javac"
    else
      JAVACMD="$JAVA_HOME/bin/java"
      JAVACCMD="$JAVA_HOME/bin/javac"

      if [ ! -x "$JAVACMD" ] || [ ! -x "$JAVACCMD" ]; then
        echo "The JAVA_HOME environment variable is not defined correctly, so mvnw cannot run." >&2
        echo "JAVA_HOME is set to \"$JAVA_HOME\", but \"\$JAVA_HOME/bin/java\" or \"\$JAVA_HOME/bin/javac\" does not exist." >&2
        return 1
      fi
    fi
  else
    JAVACMD="$(
      'set' +e
      'unset' -f command 2>/dev/null
      'command' -v java
    )" || :
    JAVACCMD="$(
      'set' +e
      'unset' -f command 2>/dev/null
      'command' -v javac
    )" || :

    if [ ! -x "${JAVACMD-}" ] || [ ! -x "${JAVACCMD-}" ]; then
      echo "The java/javac command does not exist in PATH nor is JAVA_HOME set, so mvnw cannot run." >&2
      return 1
    fi
  fi
}

# hash string like Java String::hashCode
hash_string() {
  str="${1:-}" h=0
  while [ -n "$str" ]; do
    char="${str%"${str#?}"}"
    h=$(((h * 31 + $(LC_CTYPE=C printf %d "'$char")) % 4294967296))
    str="${str#?}"
  done
  printf %x\\n $h
}

verbose() { :; }
[ "${MVNW_VERBOSE-}" != true ] || verbose() { printf %s\\n "${1-}"; }

die() {
  printf %s\\n "$1" >&2
  exit 1
}

trim() {
  # MWRAPPER-139:
  #   Trims trailing and leading whitespace, carriage returns, tabs, and linefeeds.
  #   Needed for removing poorly interpreted newline sequences when running in more
  #   exotic environments such as mingw bash on Windows.
  printf "%s" "${1}" | tr -d '[:space:]'
}

# parse distributionUrl and optional distributionSha256Sum, requires .mvn/wrapper/maven-wrapper.properties
while IFS="=" read -r key value; do
  case "${key-}" in
  distributionUrl) distributionUrl=$(trim "${value-}") ;;
  distributionSha256Sum) distributionSha256Sum=$(trim "${value-}") ;;
  esac
done <"${0%/*}/.mvn/wrapper/maven-wrapper.properties"
[ -n "${distributionUrl-}" ] || die "cannot read distributionUrl property in ${0%/*}/.mvn/wrapper/maven-wrapper.properties"

case "${distributionUrl##*/}" in
maven-mvnd-*bin.*)
  MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/
  case "${PROCESSOR_ARCHITECTURE-}${PROCESSOR_ARCHITEW6432-}:$(uname -a)" in
  *AMD64:CYGWIN* | *AMD64:MINGW*) distributionPlatform=windows-amd64 ;;
  :Darwin*x86_64) distributionPlatform=darwin-amd64 ;;
  :Darwin*arm64) distributionPlatform=darwin-aarch64 ;;
  :Linux*x86_64*) distributionPlatform=linux-amd64 ;;
  *)
    echo "Cannot detect native platform for mvnd on $(uname)-$(uname -m), use pure java version" >&2
    distributionPlatform=linux-amd64
    ;;
  esac
  distributionUrl="${distributionUrl%-bin.*}-$distributionPlatform.zip"
  ;;
maven-mvnd-*) MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/ ;;
*) MVN_CMD="mvn${0##*/mvnw}" _MVNW_REPO_PATTERN=/org/apache/maven/ ;;
esac

# apply MVNW_REPOURL and calculate MAVEN_HOME
# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
[ -z "${MVNW_REPOURL-}" ] || distributionUrl="$MVNW_REPOURL$_MVNW_REPO_PATTERN${distributionUrl#*"$_MVNW_REPO_PATTERN"}"
distributionUrlName="${distributionUrl##*/}"
distributionUrlNameMain="${distributionUrlName%.*}"
distributionUrlNameMain="${distributionUrlNameMain%-bin}"
MAVEN_USER_HOME="${MAVEN_USER_HOME:-${HOME}/.m2}"
MAVEN_HOME="${MAVEN_USER_HOME}/wrapper/dists/${distributionUrlNameMain-}/$(hash_string "$distributionUrl")"

exec_maven() {
  unset MVNW_VERBOSE MVNW_USERNAME MVNW_PASSWORD MVNW_REPOURL || :
  exec "$MAVEN_HOME/bin/$MVN_CMD" "$@" || die "cannot exec $MAVEN_HOME/bin/$MVN_CMD"
}

if [ -d "$MAVEN_HOME" ]; then
  verbose "found existing MAVEN_HOME at $MAVEN_HOME"
  exec_maven "$@"
fi

case "${distributionUrl-}" in
*?-bin.zip | *?maven-mvnd-?*-?*.zip) ;;
*) die "distributionUrl is not valid, must match *-bin.zip or maven-mvnd-*.zip, but found '${distributionUrl-}'" ;;
esac

# prepare tmp dir
if TMP_DOWNLOAD_DIR="$(mktemp -d)" && [ -d "$TMP_DOWNLOAD_DIR" ]; then
  clean() { rm -rf -- "$TMP_DOWNLOAD_DIR"; }
  trap clean HUP INT TERM EXIT
else
  die "cannot create temp dir"
fi

mkdir -p -- "${MAVEN_HOME%/*}"

# Download and Install Apache Maven
verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."
verbose "Downloading from: $distributionUrl"
verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"

# select .zip or .tar.gz
if ! command -v unzip >/dev/null; then
  distributionUrl="${distributionUrl%.zip}.tar.gz"
  distributionUrlName="${distributionUrl##*/}"
fi

# verbose opt
__MVNW_QUIET_WGET=--quiet __MVNW_QUIET_CURL=--silent __MVNW_QUIET_UNZIP=-q __MVNW_QUIET_TAR=''
[ "${MVNW_VERBOSE-}" != true ] || __MVNW_QUIET_WGET='' __MVNW_QUIET_CURL='' __MVNW_QUIET_UNZIP='' __MVNW_QUIET_TAR=v

# normalize http auth
case "${MVNW_PASSWORD:+has-password}" in
'') MVNW_USERNAME='' MVNW_PASSWORD='' ;;
has-password) [ -n "${MVNW_USERNAME-}" ] || MVNW_USERNAME='' MVNW_PASSWORD='' ;;
esac

if [ -z "${MVNW_USERNAME-}" ] && command -v wget >/dev/null; then
  verbose "Found wget ... using wget"
  wget ${__MVNW_QUIET_WGET:+"$__MVNW_QUIET_WGET"} "$distributionUrl" -O "$TMP_DOWNLOAD_DIR/$distributionUrlName" || die "wget: Failed to fetch $distributionUrl"
elif [ -z "${MVNW_USERNAME-}" ] && command -v curl >/dev/null; then
  verbose "Found curl ... using curl"
  curl ${__MVNW_QUIET_CURL:+"$__MVNW_QUIET_CURL"} -f -L -o "$TMP_DOWNLOAD_DIR/$distributionUrlName" "$distributionUrl" || die "curl: Failed to fetch $distributionUrl"
elif set_java_home; then
  verbose "Falling back to use Java to download"
  javaSource="$TMP_DOWNLOAD_DIR/Downloader.java"
  targetZip="$TMP_DOWNLOAD_DIR/$distributionUrlName"
  cat >"$javaSource" <<-END
	public class Downloader extends java.net.Authenticator
	{
	  protected java.net.PasswordAuthentication getPasswordAuthentication()
	  {
	    return new java.net.PasswordAuthentication( System.getenv( "MVNW_USERNAME" ), System.getenv( "MVNW_PASSWORD" ).toCharArray() );
	  }
	  public static void main( String[] args ) throws Exception
	  {
	    setDefault( new Downloader() );
	    java.nio.file.Files.copy( java.net.URI.create( args[0] ).toURL().openStream(), java.nio.file.Paths.get( args[1] ).toAbsolutePath().normalize() );
	  }
	}
	END
  # For Cygwin/MinGW, switch paths to Windows format before running javac and java
  verbose " - Compiling Downloader.java ..."
  "$(native_path "$JAVACCMD")" "$(native_path "$javaSource")" || die "Failed to compile Downloader.java"
  verbose " - Running Downloader.java ..."
  "$(native_path "$JAVACMD")" -cp "$(native_path "$TMP_DOWNLOAD_DIR")" Downloader "$distributionUrl" "$(native_path "$targetZip")"
fi

# If specified, validate the SHA-256 sum of the Maven distribution zip file
if [ -n "${distributionSha256Sum-}" ]; then
  distributionSha256Result=false
  if [ "$MVN_CMD" = mvnd.sh ]; then
    echo "Checksum validation is not supported for maven-mvnd." >&2
    echo "Please disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2
    exit 1
  elif command -v sha256sum >/dev/null; then
    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | sha256sum -c >/dev/null 2>&1; then
      distributionSha256Result=true
    fi
  elif command -v shasum >/dev/null; then
    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | shasum -a 256 -c >/dev/null 2>&1; then
      distributionSha256Result=true
    fi
  else
    echo "Checksum validation was requested but neither 'sha256sum' or 'shasum' are available." >&2
    echo "Please install either command, or disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2
    exit 1
  fi
  if [ $distributionSha256Result = false ]; then
    echo "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised." >&2
    echo "If you updated your Maven version, you need to update the specified distributionSha256Sum property." >&2
    exit 1
  fi
fi

# unzip and move
if command -v unzip >/dev/null; then
  unzip ${__MVNW_QUIET_UNZIP:+"$__MVNW_QUIET_UNZIP"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -d "$TMP_DOWNLOAD_DIR" || die "failed to unzip"
else
  tar xzf${__MVNW_QUIET_TAR:+"$__MVNW_QUIET_TAR"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -C "$TMP_DOWNLOAD_DIR" || die "failed to untar"
fi
printf %s\\n "$distributionUrl" >"$TMP_DOWNLOAD_DIR/$distributionUrlNameMain/mvnw.url"
mv -- "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" "$MAVEN_HOME" || [ -d "$MAVEN_HOME" ] || die "fail to move MAVEN_HOME"

clean || :
exec_maven "$@"
</file>

<file path="works-module/mvnw.cmd">
<# : batch portion
@REM ----------------------------------------------------------------------------
@REM Licensed to the Apache Software Foundation (ASF) under one
@REM or more contributor license agreements.  See the NOTICE file
@REM distributed with this work for additional information
@REM regarding copyright ownership.  The ASF licenses this file
@REM to you under the Apache License, Version 2.0 (the
@REM "License"); you may not use this file except in compliance
@REM with the License.  You may obtain a copy of the License at
@REM
@REM    http://www.apache.org/licenses/LICENSE-2.0
@REM
@REM Unless required by applicable law or agreed to in writing,
@REM software distributed under the License is distributed on an
@REM "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
@REM KIND, either express or implied.  See the License for the
@REM specific language governing permissions and limitations
@REM under the License.
@REM ----------------------------------------------------------------------------

@REM ----------------------------------------------------------------------------
@REM Apache Maven Wrapper startup batch script, version 3.3.2
@REM
@REM Optional ENV vars
@REM   MVNW_REPOURL - repo url base for downloading maven distribution
@REM   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
@REM   MVNW_VERBOSE - true: enable verbose log; others: silence the output
@REM ----------------------------------------------------------------------------

@IF "%__MVNW_ARG0_NAME__%"=="" (SET __MVNW_ARG0_NAME__=%~nx0)
@SET __MVNW_CMD__=
@SET __MVNW_ERROR__=
@SET __MVNW_PSMODULEP_SAVE=%PSModulePath%
@SET PSModulePath=
@FOR /F "usebackq tokens=1* delims==" %%A IN (`powershell -noprofile "& {$scriptDir='%~dp0'; $script='%__MVNW_ARG0_NAME__%'; icm -ScriptBlock ([Scriptblock]::Create((Get-Content -Raw '%~f0'))) -NoNewScope}"`) DO @(
  IF "%%A"=="MVN_CMD" (set __MVNW_CMD__=%%B) ELSE IF "%%B"=="" (echo %%A) ELSE (echo %%A=%%B)
)
@SET PSModulePath=%__MVNW_PSMODULEP_SAVE%
@SET __MVNW_PSMODULEP_SAVE=
@SET __MVNW_ARG0_NAME__=
@SET MVNW_USERNAME=
@SET MVNW_PASSWORD=
@IF NOT "%__MVNW_CMD__%"=="" (%__MVNW_CMD__% %*)
@echo Cannot start maven from wrapper >&2 && exit /b 1
@GOTO :EOF
: end batch / begin powershell #>

$ErrorActionPreference = "Stop"
if ($env:MVNW_VERBOSE -eq "true") {
  $VerbosePreference = "Continue"
}

# calculate distributionUrl, requires .mvn/wrapper/maven-wrapper.properties
$distributionUrl = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionUrl
if (!$distributionUrl) {
  Write-Error "cannot read distributionUrl property in $scriptDir/.mvn/wrapper/maven-wrapper.properties"
}

switch -wildcard -casesensitive ( $($distributionUrl -replace '^.*/','') ) {
  "maven-mvnd-*" {
    $USE_MVND = $true
    $distributionUrl = $distributionUrl -replace '-bin\.[^.]*$',"-windows-amd64.zip"
    $MVN_CMD = "mvnd.cmd"
    break
  }
  default {
    $USE_MVND = $false
    $MVN_CMD = $script -replace '^mvnw','mvn'
    break
  }
}

# apply MVNW_REPOURL and calculate MAVEN_HOME
# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
if ($env:MVNW_REPOURL) {
  $MVNW_REPO_PATTERN = if ($USE_MVND) { "/org/apache/maven/" } else { "/maven/mvnd/" }
  $distributionUrl = "$env:MVNW_REPOURL$MVNW_REPO_PATTERN$($distributionUrl -replace '^.*'+$MVNW_REPO_PATTERN,'')"
}
$distributionUrlName = $distributionUrl -replace '^.*/',''
$distributionUrlNameMain = $distributionUrlName -replace '\.[^.]*$','' -replace '-bin$',''
$MAVEN_HOME_PARENT = "$HOME/.m2/wrapper/dists/$distributionUrlNameMain"
if ($env:MAVEN_USER_HOME) {
  $MAVEN_HOME_PARENT = "$env:MAVEN_USER_HOME/wrapper/dists/$distributionUrlNameMain"
}
$MAVEN_HOME_NAME = ([System.Security.Cryptography.MD5]::Create().ComputeHash([byte[]][char[]]$distributionUrl) | ForEach-Object {$_.ToString("x2")}) -join ''
$MAVEN_HOME = "$MAVEN_HOME_PARENT/$MAVEN_HOME_NAME"

if (Test-Path -Path "$MAVEN_HOME" -PathType Container) {
  Write-Verbose "found existing MAVEN_HOME at $MAVEN_HOME"
  Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"
  exit $?
}

if (! $distributionUrlNameMain -or ($distributionUrlName -eq $distributionUrlNameMain)) {
  Write-Error "distributionUrl is not valid, must end with *-bin.zip, but found $distributionUrl"
}

# prepare tmp dir
$TMP_DOWNLOAD_DIR_HOLDER = New-TemporaryFile
$TMP_DOWNLOAD_DIR = New-Item -Itemtype Directory -Path "$TMP_DOWNLOAD_DIR_HOLDER.dir"
$TMP_DOWNLOAD_DIR_HOLDER.Delete() | Out-Null
trap {
  if ($TMP_DOWNLOAD_DIR.Exists) {
    try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
    catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }
  }
}

New-Item -Itemtype Directory -Path "$MAVEN_HOME_PARENT" -Force | Out-Null

# Download and Install Apache Maven
Write-Verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."
Write-Verbose "Downloading from: $distributionUrl"
Write-Verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"

$webclient = New-Object System.Net.WebClient
if ($env:MVNW_USERNAME -and $env:MVNW_PASSWORD) {
  $webclient.Credentials = New-Object System.Net.NetworkCredential($env:MVNW_USERNAME, $env:MVNW_PASSWORD)
}
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
$webclient.DownloadFile($distributionUrl, "$TMP_DOWNLOAD_DIR/$distributionUrlName") | Out-Null

# If specified, validate the SHA-256 sum of the Maven distribution zip file
$distributionSha256Sum = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionSha256Sum
if ($distributionSha256Sum) {
  if ($USE_MVND) {
    Write-Error "Checksum validation is not supported for maven-mvnd. `nPlease disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties."
  }
  Import-Module $PSHOME\Modules\Microsoft.PowerShell.Utility -Function Get-FileHash
  if ((Get-FileHash "$TMP_DOWNLOAD_DIR/$distributionUrlName" -Algorithm SHA256).Hash.ToLower() -ne $distributionSha256Sum) {
    Write-Error "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised. If you updated your Maven version, you need to update the specified distributionSha256Sum property."
  }
}

# unzip and move
Expand-Archive "$TMP_DOWNLOAD_DIR/$distributionUrlName" -DestinationPath "$TMP_DOWNLOAD_DIR" | Out-Null
Rename-Item -Path "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" -NewName $MAVEN_HOME_NAME | Out-Null
try {
  Move-Item -Path "$TMP_DOWNLOAD_DIR/$MAVEN_HOME_NAME" -Destination $MAVEN_HOME_PARENT | Out-Null
} catch {
  if (! (Test-Path -Path "$MAVEN_HOME" -PathType Container)) {
    Write-Error "fail to move MAVEN_HOME"
  }
} finally {
  try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
  catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }
}

Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"
</file>

<file path="works-module/src/main/java/pe/edu/certus/worksmodule/configuration/annotations/WorkEntityScanConfig.java">
package pe.edu.certus.worksmodule.configuration.annotations;

import org.springframework.boot.autoconfigure.domain.EntityScan;
import org.springframework.context.annotation.Configuration;

@Configuration
@EntityScan(basePackages = "pe.edu.certus.worksmodule.repository.entity")
public class WorkEntityScanConfig {
}
</file>

<file path="works-module/src/main/java/pe/edu/certus/worksmodule/configuration/annotations/WorkPersistenceConfig.java">
package pe.edu.certus.worksmodule.configuration.annotations;

import org.springframework.context.annotation.Configuration;
import org.springframework.data.jpa.repository.config.EnableJpaRepositories;

@Configuration
@EnableJpaRepositories(basePackages = "pe.edu.certus.worksmodule.repository")
public class WorkPersistenceConfig {
}
</file>

<file path="works-module/src/main/java/pe/edu/certus/worksmodule/configuration/mappers/WorkMapperConfig.java">
package pe.edu.certus.worksmodule.configuration.mappers;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import pe.edu.certus.worksmodule.logic.adapters.mapper.WorkMapper;

@Configuration
public class WorkMapperConfig {
    @Bean
    public WorkMapper workMapper() {
        return new WorkMapper();
    }
}
</file>

<file path="works-module/src/main/java/pe/edu/certus/worksmodule/configuration/mappers/WorkMapperPersistenceConfig.java">
package pe.edu.certus.worksmodule.configuration.mappers;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import pe.edu.certus.worksmodule.repository.adapters.mapper.WorkPersistenceMapper;

@Configuration
public class WorkMapperPersistenceConfig {
    @Bean
    public WorkPersistenceMapper workPersistenceMapper() {
        return new WorkPersistenceMapper();
    }
}
</file>

<file path="works-module/src/main/java/pe/edu/certus/worksmodule/WorksModuleApplication.java">
package pe.edu.certus.worksmodule;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class WorksModuleApplication {

	public static void main(String[] args) {
		SpringApplication.run(WorksModuleApplication.class, args);
	}

}
</file>

<file path="works-module/src/main/resources/application.properties">
spring.application.name=works-module
</file>

<file path=".gitignore">
HELP.md
target/
!.mvn/wrapper/maven-wrapper.jar
!**/src/main/**/target/
!**/src/test/**/target/

### STS ###
.apt_generated
.classpath
.factorypath
.project
.settings
.springBeans
.sts4-cache

### IntelliJ IDEA ###
.idea
*.iws
*.iml
*.ipr

### NetBeans ###
/nbproject/private/
/nbbuild/
/dist/
/nbdist/
/.nb-gradle/
build/
!**/src/main/**/build/
!**/src/test/**/build/

### VS Code ###
.vscode/
</file>

<file path="bootloader/src/main/resources/application.properties">
spring.config.import=optional:classpath:database-mysql.properties

# SERVER PROPERTIES
spring.application.name=cm-backend
server.port=8080
server.servlet.context-path=/api/v1

# DATABASE PROPERTIES
spring.datasource.url=${db.url}
spring.datasource.username=${db.username}
spring.datasource.password=${db.password}
spring.datasource.driverClassName=${db.driver.class}

# JPA PROPERTIES
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=update
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect

# PAYPAL SANDBOX PROPERTIES
paypal.client-id=Aa7PfspKAaCH25tsLsOkSF2sl2jTWnFisUK230tpD57smHSNuq1AxPI3XFIiYkYyE256mrx2d5UFsFZ6
paypal.client-secret=EO0wGjgZQJD7gO7lVeSlFnD-kLc5thi-wFqS0DZTx3Wd1wmF5u2EXRZnTzwKmLIVxMGQFqfMBa8muAYQ

# GOOGLE CLENT ID PROPERTIES
google.client-id=705148880910-suv7u8n9ub95ieqrdbvntnidduqbn81o.apps.googleusercontent.com
</file>

<file path="bootloader/src/main/resources/database-mysql.properties">
# CREDENTIALS FOR DATABASE
db.username=root
db.password=root

# DATABASE CONNECTION DETAILS
db.protocol=jdbc
db.driver=mysql
db.host=localhost
db.port=3306
db.name=db_mk_certus
db.driver.class=com.mysql.cj.jdbc.Driver

## PATH OF DATABASE URL
db.url=${db.protocol}:${db.driver}://${db.host}:${db.port}/${db.name}?createDatabaseIfNotExist=true

# SQL INIT PROPERTIES
# sql.schema = classpath*:database/schema.sql
# sql.data = classpath*:database/data.sql
</file>

<file path="users-module/pom.xml">
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>pe.edu.certus</groupId>
        <artifactId>cm-backend</artifactId>
        <version>0.0.1-SNAPSHOT</version>
    </parent>

    <artifactId>users-module</artifactId>
    <name>users-module</name>
    <description>users-module</description>
    <url/>

    <properties>
        <java.version>17</java.version>
        <lombok.version>1.18.32</lombok.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>${lombok.version}</version>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.data</groupId>
            <artifactId>spring-data-jpa</artifactId>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <annotationProcessorPaths>
                        <path>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                            <version>${lombok.version}</version>
                        </path>
                    </annotationProcessorPaths>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <excludes>
                        <exclude>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                        </exclude>
                    </excludes>
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>
</file>

<file path="works-module/src/main/java/pe/edu/certus/worksmodule/configuration/annotations/WorkComponentScanConfig.java">
package pe.edu.certus.worksmodule.configuration.annotations;

import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;

@Configuration
@ComponentScan(basePackages = "pe.edu.certus.worksmodule")
public class WorkComponentScanConfig {
}
</file>

<file path="works-module/src/main/java/pe/edu/certus/worksmodule/logic/adapters/driver/WorkWebModel.java">
package pe.edu.certus.worksmodule.logic.adapters.driver;

import jakarta.validation.constraints.DecimalMin;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;
import lombok.Builder;
import pe.edu.certus.worksmodule.logic.model.WorkModel;

import java.math.BigDecimal;
import java.time.LocalDateTime;

@Builder
public record WorkWebModel(
        Long workId,
        Long idSellerUser,
        Long idWorkCategory,
        
        @NotBlank(message = "El título del trabajo no puede estar vacío")
        @Size(min = 5, max = 100, message = "El título debe tener entre 5 y 100 caracteres")
        String workTitle,
        
        @NotBlank(message = "La descripción del trabajo no puede estar vacía")
        @Size(min = 20, max = 1000, message = "La descripción debe tener entre 20 y 1000 caracteres")
        String workDescription,
        
        String workCategory,
        
        @NotNull(message = "El precio no puede ser nulo")
        @DecimalMin(value = "0.0", inclusive = false, message = "El precio debe ser mayor que cero")
        BigDecimal workPrice,
        
        Boolean workIsDeleted,
        
        String workImageUrl,
        
        LocalDateTime workPublishedAt,
        
        LocalDateTime workUpdatedAt,
        
        WorkModel.WorkStatus workStatus
) {
    public WorkWebModel {
        workIsDeleted = workIsDeleted != null ? workIsDeleted : false;
        workPublishedAt = workPublishedAt != null ? workPublishedAt : LocalDateTime.now();
        workUpdatedAt = workUpdatedAt != null ? workUpdatedAt : LocalDateTime.now();
    }
}
</file>

<file path="works-module/src/main/java/pe/edu/certus/worksmodule/logic/model/WorkModel.java">
package pe.edu.certus.worksmodule.logic.model;

import lombok.Builder;
import lombok.Getter;
import lombok.Setter;

import java.math.BigDecimal;
import java.time.LocalDateTime;

@Getter
@Setter
@Builder
public class WorkModel {

    private Long workId;
    private Long idSellerUser;
    private Long idWorkCategory;
    private String workTitle;
    private String workDescription;
    private String workCategory;
    private BigDecimal workPrice;
    private Boolean workIsDeleted;
    private String workImageUrl;
    private LocalDateTime workPublishedAt;
    private LocalDateTime workUpdatedAt;
    private WorkStatus workStatus;

    public enum WorkStatus {
        PUBLICADO,
        EN_REVISION,
        RECHAZADO
    };
}
</file>

<file path="works-module/src/main/java/pe/edu/certus/worksmodule/logic/ports/mapper/ForMappingWork.java">
package pe.edu.certus.worksmodule.logic.ports.mapper;

import pe.edu.certus.worksmodule.logic.adapters.driver.WorkWebModel;
import pe.edu.certus.worksmodule.logic.model.WorkModel;

public interface ForMappingWork {

    WorkModel fromWeb( WorkWebModel workWebModel );

    WorkWebModel toWeb( WorkModel workModel );

}
</file>

<file path="works-module/src/main/java/pe/edu/certus/worksmodule/repository/ports/driver/ForQueryingWork.java">
package pe.edu.certus.worksmodule.repository.ports.driver;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import pe.edu.certus.worksmodule.repository.entity.WorkEntity;

@Repository
public interface ForQueryingWork extends JpaRepository< WorkEntity, Long > {
}
</file>

<file path="works-module/src/main/java/pe/edu/certus/worksmodule/repository/ports/mapper/ForBridgingWork.java">
package pe.edu.certus.worksmodule.repository.ports.mapper;

import org.springframework.stereotype.Service;
import pe.edu.certus.worksmodule.logic.model.WorkModel;
import pe.edu.certus.worksmodule.repository.entity.WorkEntity;

import java.util.List;
import java.util.stream.Collectors;

@Service
public interface ForBridgingWork {

    WorkEntity toPersistence( WorkModel workModel );

    WorkModel fromPersistence( WorkEntity workEntity );

}
</file>

<file path="bootloader/pom.xml">
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>pe.edu.certus</groupId>
        <artifactId>cm-backend</artifactId>
        <version>0.0.1-SNAPSHOT</version>
    </parent>

    <artifactId>bootloader</artifactId>
    <name>bootloader</name>
    <description>bootloader</description>

    <properties>
        <java.version>17</java.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>pe.edu.certus</groupId>
            <artifactId>works-module</artifactId>
            <version>${version}</version>
        </dependency>
        <dependency>
            <groupId>pe.edu.certus</groupId>
            <artifactId>ratings-module</artifactId>
            <version>${version}</version>
        </dependency>
        <dependency>
            <groupId>pe.edu.certus</groupId>
            <artifactId>people-module</artifactId>
            <version>${version}</version>
        </dependency>

        <dependency>
            <groupId>pe.edu.certus</groupId>
            <artifactId>users-module</artifactId>
            <version>${version}</version>
        </dependency>

        <dependency>
            <groupId>pe.edu.certus</groupId>
            <artifactId>paypal-module</artifactId>
            <version>${version}</version>
        </dependency>

        <dependency>
            <groupId>pe.edu.certus</groupId>
            <artifactId>auth-module</artifactId>
            <version>${version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>

</project>
</file>

<file path="works-module/src/main/java/pe/edu/certus/worksmodule/logic/adapters/driven/WorkManager.java">
package pe.edu.certus.worksmodule.logic.adapters.driven;

import org.springframework.stereotype.Service;
import pe.edu.certus.worksmodule.logic.model.WorkModel;
import pe.edu.certus.worksmodule.logic.ports.driven.ForManagingWork;
import pe.edu.certus.worksmodule.logic.ports.driver.ForWork;

import java.util.List;

@Service
public class WorkManager implements ForWork< WorkModel, Long > {

    private final ForManagingWork forManagingWork;

    public WorkManager( ForManagingWork forManagingWork ) { this.forManagingWork = forManagingWork; }

    @Override
    public void createWork( WorkModel workModel ) {

        try {
            forManagingWork.satisfyCreateWork( workModel );
            System.out.println( "THE WORK HAS BEEN CREATED SUCCESSFULLY" );
        } catch ( IllegalArgumentException e ) {
            System.out.println( "ERROR CREATING THE WORK: " + e.getMessage( ) );
            e.printStackTrace( );
        }

    }

    @Override
    public WorkModel findWorkById( Long id ) {
        try {
            if ( id == null ) {
                throw new IllegalArgumentException( "ID CANNOT BE NULL" );
            }

            WorkModel workModel = forManagingWork.satisfyFindWorkById( id );
            System.out.println( "THE WORK HAS BEEN FOUND SUCCESSFULLY" );

            if ( workModel == null ) {
                throw new IllegalArgumentException( "WORK NOT FOUND" );
            }

            return workModel;
        } catch ( Exception e ) {
            throw new RuntimeException( "FAILED TO FIND WORK MODEL", e );
        }
    }


    @Override
    public WorkModel updateWork( WorkModel workModel ) {
        try {
            if ( workModel == null ) {
                throw new IllegalArgumentException( "WORK MODEL CANNOT BE NULL" );
            }

            WorkModel updatedWorkModel = forManagingWork.satisfyUpdateWork( workModel );
            System.out.println( "WORK MODEL UPDATED SUCCESSFULLY" );

            return updatedWorkModel;
        } catch ( Exception e ) {
            throw new RuntimeException( "FAILED TO UPDATE WORK MODEL", e );
        }
    }

    @Override
    public void deleteWork( Long id ) {

        try {
            if ( id == null ) {
                throw new IllegalArgumentException( "ID CANNOT BE NULL" );
            }

            forManagingWork.satisfyDeleteWorkById( id );
            System.out.println( "WORK MODEL DELETED SUCCESSFULLY" );

        } catch ( Exception e ) {
            throw new RuntimeException( "FAILED TO DELETE WORK MODEL", e );
        }

    }

    @Override
    public List< WorkModel > findAllWorks( ) {
        try {
            List< WorkModel > workModels = forManagingWork.satisfyFindAllWork( );
            System.out.println( "ALL WORKS HAVE BEEN FOUND SUCCESSFULLY" );
            return workModels;
        } catch ( Exception e ) {
            throw new RuntimeException( "FAILED TO FIND ALL WORK MODELS", e );
        }
    }
}
</file>

<file path="works-module/src/main/java/pe/edu/certus/worksmodule/logic/adapters/driver/WorkAdapter.java">
package pe.edu.certus.worksmodule.logic.adapters.driver;

import jakarta.persistence.EntityNotFoundException;
import jakarta.validation.Valid;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import pe.edu.certus.worksmodule.logic.model.WorkModel;
import pe.edu.certus.worksmodule.logic.ports.driver.ForWork;
import pe.edu.certus.worksmodule.logic.ports.mapper.ForMappingWork;

import java.util.List;
import java.util.stream.Collectors;

@RestController
@RequestMapping( "/works" )
public class WorkAdapter {

    private final ForWork forWork;
    private final ForMappingWork forMappingWork;

    public WorkAdapter( ForWork forWork, ForMappingWork forMappingWork ) {
        this.forWork = forWork;
        this.forMappingWork = forMappingWork;
    }

    @RequestMapping( "/create" )
    public ResponseEntity< WorkWebModel > createWork( @Valid @RequestBody WorkWebModel workWebModel ) {
        try {
            WorkModel objectFromWeb = forMappingWork.fromWeb( workWebModel );
            forWork.createWork( objectFromWeb );
            return ResponseEntity.ok( ).build( );

        } catch ( IllegalArgumentException e ) {
            throw new RuntimeException( "FAILED TO CREATE WORK", e );
        }
    }

    @GetMapping( "/{id}" )
    public ResponseEntity< WorkWebModel > findWorkById( @PathVariable Long id ) {
        try {
            WorkModel workModel = ( WorkModel ) forWork.findWorkById( id );
            WorkWebModel response = forMappingWork.toWeb( workModel );
            return ResponseEntity.ok( response );
        } catch ( EntityNotFoundException e ) {
            return ResponseEntity.notFound( ).build( );
        } catch ( IllegalArgumentException e ) {
            return ResponseEntity.badRequest( ).build( );
        }
    }

    @PutMapping( "/update" )
    public ResponseEntity< WorkWebModel > updateWork( @Valid @RequestBody WorkWebModel workWebModel ) {
        try {
            WorkModel objectFromWeb = forMappingWork.fromWeb( workWebModel );
            WorkModel updatedWork = ( WorkModel ) forWork.updateWork( objectFromWeb );
            WorkWebModel response = forMappingWork.toWeb( updatedWork );
            return ResponseEntity.ok( response );
        } catch ( EntityNotFoundException e ) {
            return ResponseEntity.notFound( ).build( );
        } catch ( IllegalArgumentException e ) {
            return ResponseEntity.badRequest( ).build( );
        }
    }

    @DeleteMapping( "/{id}" )
    public ResponseEntity< Void > deleteWorkById( @PathVariable Long id ) {
        try {
            forWork.deleteWork( id );
            return ResponseEntity.ok( ).build( );
        } catch ( EntityNotFoundException e ) {
            return ResponseEntity.notFound( ).build( );
        } catch ( IllegalArgumentException e ) {
            return ResponseEntity.badRequest( ).build( );
        }
    }

    @GetMapping
    public ResponseEntity<List<WorkWebModel>> findAllWorks() {
        try {
            List<WorkModel> workModels = forWork.findAllWorks();
            List<WorkWebModel> response = workModels.stream()
                    .map(forMappingWork::toWeb)
                    .collect(Collectors.toList());
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            return ResponseEntity.badRequest().build();
        }
    }
}
</file>

<file path="works-module/src/main/java/pe/edu/certus/worksmodule/logic/adapters/mapper/WorkMapper.java">
package pe.edu.certus.worksmodule.logic.adapters.mapper;

import pe.edu.certus.worksmodule.logic.adapters.driver.WorkWebModel;
import pe.edu.certus.worksmodule.logic.model.WorkModel;
import pe.edu.certus.worksmodule.logic.ports.mapper.ForMappingWork;

public class WorkMapper implements ForMappingWork {

    @Override
    public WorkModel fromWeb( WorkWebModel workWebModel ) {
        return WorkModel.builder()
                .workId( workWebModel.workId() )
                .idSellerUser( workWebModel.idSellerUser() )
                .idWorkCategory( workWebModel.idWorkCategory() )
                .workTitle( workWebModel.workTitle() )
                .workDescription( workWebModel.workDescription() )
                .workPrice( workWebModel.workPrice() )
                .workIsDeleted( workWebModel.workIsDeleted() )
                .workImageUrl( workWebModel.workImageUrl() )
                .workPublishedAt( workWebModel.workPublishedAt() )
                .workUpdatedAt( workWebModel.workUpdatedAt() )
                .workStatus( workWebModel.workStatus() )
                .build();    }

    @Override
    public WorkWebModel toWeb( WorkModel workModel ) {
        return new WorkWebModel(
                workModel.getWorkId(),
                workModel.getIdSellerUser(),
                workModel.getIdWorkCategory(),
                workModel.getWorkTitle(),
                workModel.getWorkDescription(),
                workModel.getWorkCategory(),
                workModel.getWorkPrice(),
                workModel.getWorkIsDeleted(),
                workModel.getWorkImageUrl(),
                workModel.getWorkPublishedAt(),
                workModel.getWorkUpdatedAt(),
                workModel.getWorkStatus()
        );
    }
}
</file>

<file path="works-module/src/main/java/pe/edu/certus/worksmodule/logic/ports/driven/ForManagingWork.java">
package pe.edu.certus.worksmodule.logic.ports.driven;

import pe.edu.certus.worksmodule.logic.model.WorkModel;

import java.util.List;

public interface ForManagingWork {
    void satisfyCreateWork( WorkModel workModel );
    List<WorkModel> satisfyFindAllWork();
    WorkModel satisfyFindWorkById( Long id );
    WorkModel satisfyUpdateWork( WorkModel workModel );
    void satisfyDeleteWorkById( Long id );
}
</file>

<file path="works-module/src/main/java/pe/edu/certus/worksmodule/logic/ports/driver/ForWork.java">
package pe.edu.certus.worksmodule.logic.ports.driver;


import java.util.List;

public interface ForWork <WorkModel, Long>{
    void createWork(WorkModel workModel);
    WorkModel findWorkById(Long id);
    List<WorkModel> findAllWorks();
    WorkModel updateWork(WorkModel workModel);
    void deleteWork(Long id);
}
</file>

<file path="works-module/src/main/java/pe/edu/certus/worksmodule/repository/adapters/mapper/WorkPersistenceMapper.java">
package pe.edu.certus.worksmodule.repository.adapters.mapper;

import pe.edu.certus.worksmodule.logic.model.WorkModel;
import pe.edu.certus.worksmodule.repository.entity.WorkEntity;
import pe.edu.certus.worksmodule.repository.ports.mapper.ForBridgingWork;

public class WorkPersistenceMapper implements ForBridgingWork {

    @Override
    public WorkEntity toPersistence( WorkModel workModel ) {
        return WorkEntity.builder()
                .workId( workModel.getWorkId() )
                .idSellerUser( workModel.getIdSellerUser() )
                .idWorkCategory( workModel.getIdWorkCategory() )
                .workTitle( workModel.getWorkTitle() )
                .workDescription( workModel.getWorkDescription() )
                .workPrice( workModel.getWorkPrice() )
                .workIsDeleted( workModel.getWorkIsDeleted() )
                .workImageUrl( workModel.getWorkImageUrl() )
                .workPublishedAt( workModel.getWorkPublishedAt() )
                .workUpdatedAt( workModel.getWorkUpdatedAt() )
                .workStatus( convertToEntityStatus( workModel.getWorkStatus()) )
                .build();
    }

    @Override
    public  WorkModel fromPersistence( WorkEntity workEntity ) {
        return WorkModel.builder()
                .workId( workEntity.getWorkId() )
                .idSellerUser( workEntity.getIdSellerUser() )
                .idWorkCategory( workEntity.getIdWorkCategory() )
                .workTitle( workEntity.getWorkTitle() )
                .workDescription( workEntity.getWorkDescription() )
                .workPrice( workEntity.getWorkPrice() )
                .workIsDeleted( workEntity.getWorkIsDeleted() )
                .workImageUrl( workEntity.getWorkImageUrl() )
                .workPublishedAt( workEntity.getWorkPublishedAt() )
                .workUpdatedAt( workEntity.getWorkUpdatedAt() )
                .workStatus( convertToModelStatus( workEntity.getWorkStatus()) )
                .build();
    }

    private WorkEntity.WorkStatus convertToEntityStatus(WorkModel.WorkStatus modelStatus) {
        if (modelStatus == null) return null;
        return WorkEntity.WorkStatus.valueOf(modelStatus.name());
    }

    private WorkModel.WorkStatus convertToModelStatus(WorkEntity.WorkStatus entityStatus) {
        if (entityStatus == null) return null;
        return WorkModel.WorkStatus.valueOf(entityStatus.name());
    }
}
</file>

<file path="works-module/src/main/java/pe/edu/certus/worksmodule/repository/entity/WorkEntity.java">
package pe.edu.certus.worksmodule.repository.entity;

import jakarta.persistence.*;
import lombok.*;

import java.math.BigDecimal;
import java.time.LocalDateTime;

@Entity( name = "works" )
@Getter
@Setter
@Builder
@AllArgsConstructor
@NoArgsConstructor
public class WorkEntity {

    @Id
    @GeneratedValue( strategy = GenerationType.IDENTITY )
    @Column( name = "work_id" )
    private Long workId;

    @Transient
    @Column( name = "id_seller_user" )
    private Long idSellerUser;

    @Transient
    @Column( name = "id_work_category" )
    private Long idWorkCategory;

    @Column( name = "work_title" )
    private String workTitle;

    @Column( name = "work_description" )
    private String workDescription;

    @Column( name = "work_category" )
    private String workCategory;

    @Column( name = "work_price" )
    private BigDecimal workPrice;

    @Column( name = "work_is_deleted" )
    private Boolean workIsDeleted;

    @Column( name = "work_image_url" )
    private String workImageUrl;

    @Column( name = "work_published_at" )
    private LocalDateTime workPublishedAt;

    @Column( name = "work_updated_at" )
    private LocalDateTime workUpdatedAt;

    @Column( name = "work_status" )
    private WorkStatus workStatus;

    public enum WorkStatus {
        EN_REVISION, PUBLICADO, RECHAZADO
    }

}
</file>

<file path="pom.xml">
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.2.3</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>

    <groupId>pe.edu.certus</groupId>
    <artifactId>cm-backend</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>CertUs Backend Service</name>

    <packaging>pom</packaging>    <!-- multi-module project -->
    <description>Backend project for CertUs</description>
    <url/>

    <licenses>
        <license/>
    </licenses>

    <developers>
        <developer>
            <id>CM-GJ</id>
            <name>Geraldo Jaramillo</name>
            <email>Geraldo_07_@outlook.com</email>
            <url>https://github.com/Geraldow</url>
            <organization></organization>
            <roles>
                <role>developer</role>
            </roles>
            <timezone>-5</timezone>
        </developer>
        <developer>
            <id>CM-GC</id>
            <name>Gabriela Conde</name>
            <email>gabriela.2020.ci@hotmail.com</email>
            <url>https://github.com/mersudredi</url>
            <organization></organization>
            <roles>
                <role>developer</role>
            </roles>
            <timezone>-5</timezone>
        </developer>
    </developers>

    <scm>
        <connection>scm:git:https://github.com/CertusMarketplace/cm-backend.git</connection>
        <developerConnection>scm:git@github.com:CertusMarketplace/cm-backend.git
        </developerConnection>
        <url>https://github.com/CertusMarketplace/cm-backend</url>
        <tag>HEAD</tag>
    </scm>

    <modules>
        <module>works-module</module>
        <module>ratings-module</module>
        <module>users-module</module>
        <module>people-module</module>
        <module>bootloader</module>
        <module>paypal-module</module>
    </modules>

    <properties>
        <java.version>17</java.version>
    </properties>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>3.2.3</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>org.projectlombok</groupId>
                <artifactId>lombok</artifactId>
                <version>1.18.32</version>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        <dependency>
            <groupId>com.mysql</groupId>
            <artifactId>mysql-connector-j</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <annotationProcessorPaths>
                        <path>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                            <version>1.18.32</version>
                        </path>
                    </annotationProcessorPaths>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <excludes>
                        <exclude>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                        </exclude>
                    </excludes>
                </configuration>
            </plugin>
        </plugins>
    </build>
    <repositories>
        <repository>
            <id>spring-snapshots</id>
            <name>Spring Snapshots</name>
            <url>https://repo.spring.io/snapshot</url>
            <releases>
                <enabled>false</enabled>
            </releases>
            <snapshots>
                <enabled>true</enabled>
            </snapshots>
        </repository>
    </repositories>
    <pluginRepositories>
        <pluginRepository>
            <id>spring-snapshots</id>
            <name>Spring Snapshots</name>
            <url>https://repo.spring.io/snapshot</url>
            <releases>
                <enabled>false</enabled>
            </releases>
        </pluginRepository>
    </pluginRepositories>

</project>
</file>

<file path="works-module/pom.xml">
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>pe.edu.certus</groupId>
        <artifactId>cm-backend</artifactId>
        <version>0.0.1-SNAPSHOT</version>
    </parent>

    <artifactId>works-module</artifactId>
    <name>works-module</name>
    <description>works-module</description>
    <url/>

    <properties>
        <java.version>17</java.version>
        <lombok.version>1.18.32</lombok.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>${lombok.version}</version>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <annotationProcessorPaths>
                        <path>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                            <version>${lombok.version}</version>
                        </path>
                    </annotationProcessorPaths>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <excludes>
                        <exclude>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                        </exclude>
                    </excludes>
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>
</file>

<file path="works-module/src/main/java/pe/edu/certus/worksmodule/repository/adapters/driver/WorkQuerierProxy.java">
package pe.edu.certus.worksmodule.repository.adapters.driver;

import jakarta.persistence.EntityNotFoundException;
import org.springframework.stereotype.Service;
import pe.edu.certus.worksmodule.logic.model.WorkModel;
import pe.edu.certus.worksmodule.logic.ports.driven.ForManagingWork;
import pe.edu.certus.worksmodule.repository.entity.WorkEntity;
import pe.edu.certus.worksmodule.repository.ports.driver.ForQueryingWork;
import pe.edu.certus.worksmodule.repository.ports.mapper.ForBridgingWork;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
public class WorkQuerierProxy implements ForManagingWork {
    private final ForQueryingWork forQueryingWork;
    private final ForBridgingWork forBridgingWork;

    public WorkQuerierProxy( ForQueryingWork forQueryingWork, ForBridgingWork forBridgingWork ) {
        this.forQueryingWork = forQueryingWork;
        this.forBridgingWork = forBridgingWork;
    }

    @Override
    public void satisfyCreateWork( WorkModel workModel ) {
        WorkEntity objectFromDomain = forBridgingWork.toPersistence( workModel );
        forQueryingWork.save( objectFromDomain );
        System.out.println( "THE ENTITY HAS BEEN CREATED SUCCESSFULLY" );
    }


    @Override
    public WorkModel satisfyFindWorkById( Long id ) {
        return forQueryingWork.findById( id )
                .map( forBridgingWork::fromPersistence )
                .orElseThrow( ( ) -> new EntityNotFoundException(
                        "THE ENTITY WORK NOT FOUND WITH ID: " + id ) );
    }

    @Override
    public WorkModel satisfyUpdateWork( WorkModel workModel ) {

        WorkEntity objectFromDomain = forBridgingWork.toPersistence( workModel );
        objectFromDomain.setWorkPublishedAt( LocalDateTime.now( ) );
        objectFromDomain.setWorkUpdatedAt( LocalDateTime.now( ) );

        WorkEntity updatedEntity = forQueryingWork.save( objectFromDomain );
        System.out.println( "THE ENTITY HAS BEEN UPDATED SUCCESSFULLY" );

        return forBridgingWork.fromPersistence( updatedEntity );
    }

    @Override
    public void satisfyDeleteWorkById( Long id ) {

        Optional< WorkEntity > existingWork = forQueryingWork.findById( id );
        forQueryingWork.deleteById( id );
        System.out.println( "WORK ID: " + id + " IS DELETED" );

    }

    @Override
    public List<WorkModel> satisfyFindAllWork() {
        List<WorkEntity> workEntities = forQueryingWork.findAll();
        System.out.println("ALL ENTITIES HAVE BEEN FOUND SUCCESSFULLY");
        
        return workEntities.stream()
                .map(forBridgingWork::fromPersistence)
                .collect(Collectors.toList());
    }
}
</file>

</files>
